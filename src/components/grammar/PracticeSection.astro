---
export interface Props {
  exercises: {
    fillInBlanks?: {
      title: string;
      items: Array<{
        korean: string;
        vietnamese: string;
        blanks: Array<{
          position: number; // Position of blank in sentence
          answer: string;
          hint?: string;
          alternatives?: string[]; // Alternative correct answers
        }>;
        explanation?: string;
      }>;
    };
    multipleChoice?: {
      title: string;
      items: Array<{
        question: string;
        options: Array<{
          text: string;
          correct: boolean;
          explanation?: string;
        }>;
        hint?: string;
      }>;
    };
    interactive?: {
      title: string;
      items: Array<{
        type: 'transformation' | 'completion' | 'translation';
        prompt: string;
        input: string;
        expectedOutput: string;
        hint?: string;
        explanation?: string;
      }>;
    };
  };
  showVietnamese?: boolean;
}

const { exercises, showVietnamese = true } = Astro.props;

// Determine which exercise types to show
const hasFillInBlanks = exercises.fillInBlanks && exercises.fillInBlanks.items.length > 0;
const hasMultipleChoice = exercises.multipleChoice && exercises.multipleChoice.items.length > 0;
const hasInteractive = exercises.interactive && exercises.interactive.items.length > 0;

// Default to first available exercise type
const defaultTab = hasFillInBlanks ? 'fillInBlanks' : 
                  hasMultipleChoice ? 'multipleChoice' : 
                  hasInteractive ? 'interactive' : '';

// Generate unique IDs for form elements
const generateId = (prefix: string, index: number) => `${prefix}-${Math.random().toString(36).substr(2, 9)}-${index}`;
---

<section class="practice-section bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
  <!-- Section Header -->
  <div class="bg-gradient-to-r from-purple-50 to-pink-50 px-6 py-4 border-b border-gray-200">
    <h3 class="text-xl font-semibold text-gray-800 flex items-center">
      üéØ B√†i T·∫≠p Th·ª±c H√†nh
      <span class="ml-3 px-3 py-1 bg-purple-100 text-purple-800 rounded-full text-sm">
        T∆∞∆°ng t√°c
      </span>
    </h3>
  </div>

  {(hasFillInBlanks || hasMultipleChoice || hasInteractive) ? (
    <div class="p-6">
      <!-- Exercise Type Navigation -->
      {(hasFillInBlanks && hasMultipleChoice) || (hasFillInBlanks && hasInteractive) || (hasMultipleChoice && hasInteractive) ? (
        <div class="flex space-x-1 mb-6 bg-gray-100 p-1 rounded-lg">
          {hasFillInBlanks && (
            <button 
              class="exercise-tab flex-1 py-2 px-4 text-sm font-medium rounded-md transition-all duration-200 data-[active=true]:bg-white data-[active=true]:text-purple-600 data-[active=true]:shadow-sm text-gray-600 hover:text-gray-800"
              data-tab="fillInBlanks"
              data-active={defaultTab === 'fillInBlanks'}
            >
              üìù ƒêi·ªÅn t·ª´
            </button>
          )}
          {hasMultipleChoice && (
            <button 
              class="exercise-tab flex-1 py-2 px-4 text-sm font-medium rounded-md transition-all duration-200 data-[active=true]:bg-white data-[active=true]:text-purple-600 data-[active=true]:shadow-sm text-gray-600 hover:text-gray-800"
              data-tab="multipleChoice"
              data-active={defaultTab === 'multipleChoice'}
            >
              ‚úÖ Tr·∫Øc nghi·ªám
            </button>
          )}
          {hasInteractive && (
            <button 
              class="exercise-tab flex-1 py-2 px-4 text-sm font-medium rounded-md transition-all duration-200 data-[active=true]:bg-white data-[active=true]:text-purple-600 data-[active=true]:shadow-sm text-gray-600 hover:text-gray-800"
              data-tab="interactive"
              data-active={defaultTab === 'interactive'}
            >
              üéÆ T∆∞∆°ng t√°c
            </button>
          )}
        </div>
      ) : null}

      <!-- Fill in the Blanks Exercises -->
      {hasFillInBlanks && (
        <div 
          class="exercise-content" 
          data-tab="fillInBlanks"
          style={defaultTab !== 'fillInBlanks' ? 'display: none;' : ''}
        >
          <div class="space-y-6">
            {exercises.fillInBlanks!.items.map((item, index) => (
              <div class="exercise-item bg-gradient-to-r from-blue-50 to-cyan-50 rounded-lg p-4 border-l-4 border-blue-400">
                <div class="space-y-3">
                  <!-- Exercise Number -->
                  <div class="flex items-center space-x-2">
                    <span class="bg-blue-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold">
                      {index + 1}
                    </span>
                    <span class="text-gray-600 text-sm">ƒêi·ªÅn t·ª´ th√≠ch h·ª£p v√†o ch·ªó tr·ªëng</span>
                  </div>

                  <!-- Korean Sentence with Blanks -->
                  <div class="korean-text text-lg font-medium text-gray-800 leading-relaxed">
                    <div class="fill-in-exercise" data-exercise-id={generateId('fill', index)}>
                      {item.korean.split('___').map((part, partIndex, parts) => (
                        <span>
                          {part}
                          {partIndex < parts.length - 1 && (
                            <input 
                              type="text" 
                              class="blank-input mx-1 px-2 py-1 border-b-2 border-blue-300 bg-transparent focus:border-blue-500 focus:outline-none text-center min-w-[60px]"
                              data-answer={item.blanks[partIndex]?.answer}
                              data-alternatives={item.blanks[partIndex]?.alternatives?.join(',')}
                              placeholder="___"
                              autocomplete="off"
                            />
                          )}
                        </span>
                      ))}
                    </div>
                  </div>

                  <!-- Vietnamese Translation -->
                  <div class="vietnamese-text text-gray-600 italic" style={!showVietnamese ? 'display: none;' : ''}>
                    {item.vietnamese}
                  </div>

                  <!-- Hints -->
                  {item.blanks.some(blank => blank.hint) && (
                    <div class="hints bg-yellow-50 rounded p-3">
                      <span class="text-yellow-700 text-sm font-medium">üí° G·ª£i √Ω:</span>
                      <ul class="list-disc list-inside text-sm text-yellow-700 mt-1">
                        {item.blanks.map((blank, blankIndex) => 
                          blank.hint && (
                            <li key={blankIndex}>{blank.hint}</li>
                          )
                        )}
                      </ul>
                    </div>
                  )}

                  <!-- Check Answer Button -->
                  <div class="exercise-controls flex space-x-2">
                    <button class="check-answer-btn px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors text-sm font-medium">
                      Ki·ªÉm tra ƒë√°p √°n
                    </button>
                    <button class="reset-btn px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600 transition-colors text-sm font-medium">
                      L√†m l·∫°i
                    </button>
                  </div>

                  <!-- Answer Feedback -->
                  <div class="answer-feedback hidden">
                    <div class="correct-feedback bg-green-50 border border-green-200 rounded p-3 hidden">
                      <span class="text-green-700 font-medium">‚úÖ Ch√≠nh x√°c!</span>
                      {item.explanation && (
                        <p class="text-green-700 text-sm mt-1">{item.explanation}</p>
                      )}
                    </div>
                    <div class="incorrect-feedback bg-red-50 border border-red-200 rounded p-3 hidden">
                      <span class="text-red-700 font-medium">‚ùå Ch∆∞a ƒë√∫ng. Th·ª≠ l·∫°i!</span>
                      <div class="correct-answers text-red-700 text-sm mt-1">
                        <strong>ƒê√°p √°n ƒë√∫ng:</strong>
                        <ul class="list-disc list-inside mt-1">
                          {item.blanks.map((blank, blankIndex) => (
                            <li key={blankIndex}>Ch·ªó tr·ªëng {blankIndex + 1}: <strong>{blank.answer}</strong></li>
                          ))}
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      <!-- Multiple Choice Exercises -->
      {hasMultipleChoice && (
        <div 
          class="exercise-content" 
          data-tab="multipleChoice"
          style={defaultTab !== 'multipleChoice' ? 'display: none;' : ''}
        >
          <div class="space-y-6">
            {exercises.multipleChoice!.items.map((item, index) => (
              <div class="exercise-item bg-gradient-to-r from-green-50 to-emerald-50 rounded-lg p-4 border-l-4 border-green-400">
                <div class="space-y-3">
                  <!-- Question -->
                  <div class="flex items-start space-x-2">
                    <span class="bg-green-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold mt-1">
                      {index + 1}
                    </span>
                    <div class="flex-1">
                      <p class="text-lg font-medium text-gray-800">{item.question}</p>
                    </div>
                  </div>

                  <!-- Hint -->
                  {item.hint && (
                    <div class="bg-yellow-50 rounded p-3 ml-8">
                      <span class="text-yellow-700 text-sm">üí° <strong>G·ª£i √Ω:</strong> {item.hint}</span>
                    </div>
                  )}

                  <!-- Options -->
                  <div class="ml-8 space-y-2" data-question-id={generateId('mc', index)}>
                    {item.options.map((option, optionIndex) => (
                      <label class="flex items-center space-x-3 p-2 rounded hover:bg-gray-50 cursor-pointer">
                        <input 
                          type="radio" 
                          name={generateId('question', index)}
                          value={optionIndex}
                          data-correct={option.correct}
                          data-explanation={option.explanation}
                          class="radio-option"
                        />
                        <span class="text-gray-700">{option.text}</span>
                      </label>
                    ))}
                  </div>

                  <!-- Check Answer Button -->
                  <div class="exercise-controls flex space-x-2 ml-8">
                    <button class="check-mc-btn px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 transition-colors text-sm font-medium">
                      Ki·ªÉm tra ƒë√°p √°n
                    </button>
                    <button class="reset-mc-btn px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600 transition-colors text-sm font-medium">
                      L√†m l·∫°i
                    </button>
                  </div>

                  <!-- Answer Feedback -->
                  <div class="mc-feedback hidden ml-8"></div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      <!-- Interactive Exercises -->
      {hasInteractive && (
        <div 
          class="exercise-content" 
          data-tab="interactive"
          style={defaultTab !== 'interactive' ? 'display: none;' : ''}
        >
          <div class="space-y-6">
            {exercises.interactive!.items.map((item, index) => (
              <div class="exercise-item bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg p-4 border-l-4 border-purple-400">
                <div class="space-y-3">
                  <!-- Exercise Type & Number -->
                  <div class="flex items-center space-x-2">
                    <span class="bg-purple-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold">
                      {index + 1}
                    </span>
                    <span class="text-gray-600 text-sm capitalize">
                      {item.type === 'transformation' ? 'üîÑ Chuy·ªÉn ƒë·ªïi' : 
                       item.type === 'completion' ? '‚úçÔ∏è Ho√†n th√†nh' : 
                       'üåê D·ªãch thu·∫≠t'}
                    </span>
                  </div>

                  <!-- Prompt -->
                  <div class="prompt text-lg font-medium text-gray-800 leading-relaxed">
                    {item.prompt}
                  </div>

                  <!-- Input -->
                  <div class="input-section bg-gray-50 rounded p-3">
                    <p class="text-sm text-gray-600 mb-2">Cho tr∆∞·ªõc:</p>
                    <div class="korean-text text-lg font-medium text-gray-800">
                      {item.input}
                    </div>
                  </div>

                  <!-- User Answer Area -->
                  <div class="answer-area">
                    <label class="block text-sm text-gray-600 mb-2">C√¢u tr·∫£ l·ªùi c·ªßa b·∫°n:</label>
                    <textarea 
                      class="interactive-answer w-full p-3 border border-gray-300 rounded-md focus:border-purple-500 focus:outline-none korean-text"
                      rows="2"
                      placeholder="Nh·∫≠p c√¢u tr·∫£ l·ªùi..."
                      data-expected={item.expectedOutput}
                    ></textarea>
                  </div>

                  <!-- Hint -->
                  {item.hint && (
                    <div class="bg-yellow-50 rounded p-3">
                      <span class="text-yellow-700 text-sm">üí° <strong>G·ª£i √Ω:</strong> {item.hint}</span>
                    </div>
                  )}

                  <!-- Check Answer Button -->
                  <div class="exercise-controls flex space-x-2">
                    <button class="check-interactive-btn px-4 py-2 bg-purple-500 text-white rounded-md hover:bg-purple-600 transition-colors text-sm font-medium">
                      Ki·ªÉm tra ƒë√°p √°n
                    </button>
                    <button class="reset-interactive-btn px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600 transition-colors text-sm font-medium">
                      L√†m l·∫°i
                    </button>
                  </div>

                  <!-- Answer Feedback -->
                  <div class="interactive-feedback hidden"></div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  ) : (
    <!-- Empty State -->
    <div class="p-8 text-center text-gray-500">
      <div class="text-4xl mb-2">üéØ</div>
      <p class="text-lg font-medium">Ch∆∞a c√≥ b√†i t·∫≠p</p>
      <p class="text-sm">B√†i t·∫≠p th·ª±c h√†nh s·∫Ω ƒë∆∞·ª£c th√™m v√†o s·ªõm</p>
    </div>
  )}
</section>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Tab switching functionality
    const exerciseTabs = document.querySelectorAll('.exercise-tab');
    const exerciseContents = document.querySelectorAll('.exercise-content');

    exerciseTabs.forEach(tab => {
      tab.addEventListener('click', function() {
        const tabName = this.getAttribute('data-tab');
        
        // Update tab states
        exerciseTabs.forEach(t => t.setAttribute('data-active', 'false'));
        this.setAttribute('data-active', 'true');
        
        // Show/hide content
        exerciseContents.forEach(content => {
          content.style.display = content.getAttribute('data-tab') === tabName ? 'block' : 'none';
        });
      });
    });

    // Fill-in-the-blank exercise functionality
    const checkAnswerBtns = document.querySelectorAll('.check-answer-btn');
    const resetBtns = document.querySelectorAll('.reset-btn');

    checkAnswerBtns.forEach((btn, index) => {
      btn.addEventListener('click', function() {
        const exerciseItem = this.closest('.exercise-item');
        const inputs = exerciseItem.querySelectorAll('.blank-input');
        const feedback = exerciseItem.querySelector('.answer-feedback');
        const correctFeedback = exerciseItem.querySelector('.correct-feedback');
        const incorrectFeedback = exerciseItem.querySelector('.incorrect-feedback');
        
        let allCorrect = true;
        
        inputs.forEach(input => {
          const userAnswer = input.value.trim().toLowerCase();
          const correctAnswer = input.getAttribute('data-answer').toLowerCase();
          const alternatives = input.getAttribute('data-alternatives');
          const alternativeAnswers = alternatives ? alternatives.split(',').map(a => a.trim().toLowerCase()) : [];
          
          const isCorrect = userAnswer === correctAnswer || alternativeAnswers.includes(userAnswer);
          
          if (isCorrect) {
            input.style.borderColor = '#10b981';
            input.style.backgroundColor = '#d1fae5';
          } else {
            input.style.borderColor = '#ef4444';
            input.style.backgroundColor = '#fee2e2';
            allCorrect = false;
          }
        });
        
        // Show feedback
        feedback.classList.remove('hidden');
        if (allCorrect) {
          correctFeedback.classList.remove('hidden');
          incorrectFeedback.classList.add('hidden');
        } else {
          correctFeedback.classList.add('hidden');
          incorrectFeedback.classList.remove('hidden');
        }
      });
    });

    resetBtns.forEach(btn => {
      btn.addEventListener('click', function() {
        const exerciseItem = this.closest('.exercise-item');
        const inputs = exerciseItem.querySelectorAll('.blank-input');
        const feedback = exerciseItem.querySelector('.answer-feedback');
        
        inputs.forEach(input => {
          input.value = '';
          input.style.borderColor = '#93c5fd';
          input.style.backgroundColor = 'transparent';
        });
        
        feedback.classList.add('hidden');
      });
    });

    // Multiple choice functionality
    const checkMcBtns = document.querySelectorAll('.check-mc-btn');
    const resetMcBtns = document.querySelectorAll('.reset-mc-btn');

    checkMcBtns.forEach(btn => {
      btn.addEventListener('click', function() {
        const exerciseItem = this.closest('.exercise-item');
        const radioInputs = exerciseItem.querySelectorAll('.radio-option');
        const feedback = exerciseItem.querySelector('.mc-feedback');
        
        let selectedOption = null;
        radioInputs.forEach(radio => {
          if (radio.checked) {
            selectedOption = radio;
          }
        });
        
        if (!selectedOption) {
          feedback.innerHTML = '<div class="bg-yellow-50 border border-yellow-200 rounded p-3"><span class="text-yellow-700">‚ö†Ô∏è Vui l√≤ng ch·ªçn m·ªôt ƒë√°p √°n</span></div>';
          feedback.classList.remove('hidden');
          return;
        }
        
        const isCorrect = selectedOption.getAttribute('data-correct') === 'true';
        const explanation = selectedOption.getAttribute('data-explanation');
        
        if (isCorrect) {
          feedback.innerHTML = `
            <div class="bg-green-50 border border-green-200 rounded p-3">
              <span class="text-green-700 font-medium">‚úÖ Ch√≠nh x√°c!</span>
              ${explanation ? `<p class="text-green-700 text-sm mt-1">${explanation}</p>` : ''}
            </div>
          `;
        } else {
          const correctOption = Array.from(radioInputs).find(r => r.getAttribute('data-correct') === 'true');
          const correctExplanation = correctOption?.getAttribute('data-explanation') || '';
          
          feedback.innerHTML = `
            <div class="bg-red-50 border border-red-200 rounded p-3">
              <span class="text-red-700 font-medium">‚ùå Ch∆∞a ƒë√∫ng</span>
              <p class="text-red-700 text-sm mt-1"><strong>ƒê√°p √°n ƒë√∫ng:</strong> ${correctOption?.nextElementSibling?.textContent}</p>
              ${correctExplanation ? `<p class="text-red-700 text-sm mt-1">${correctExplanation}</p>` : ''}
            </div>
          `;
        }
        
        feedback.classList.remove('hidden');
      });
    });

    resetMcBtns.forEach(btn => {
      btn.addEventListener('click', function() {
        const exerciseItem = this.closest('.exercise-item');
        const radioInputs = exerciseItem.querySelectorAll('.radio-option');
        const feedback = exerciseItem.querySelector('.mc-feedback');
        
        radioInputs.forEach(radio => {
          radio.checked = false;
        });
        
        feedback.classList.add('hidden');
      });
    });

    // Interactive exercise functionality
    const checkInteractiveBtns = document.querySelectorAll('.check-interactive-btn');
    const resetInteractiveBtns = document.querySelectorAll('.reset-interactive-btn');

    checkInteractiveBtns.forEach(btn => {
      btn.addEventListener('click', function() {
        const exerciseItem = this.closest('.exercise-item');
        const textarea = exerciseItem.querySelector('.interactive-answer');
        const feedback = exerciseItem.querySelector('.interactive-feedback');
        const userAnswer = textarea.value.trim();
        const expectedAnswer = textarea.getAttribute('data-expected').trim();
        
        if (!userAnswer) {
          feedback.innerHTML = '<div class="bg-yellow-50 border border-yellow-200 rounded p-3"><span class="text-yellow-700">‚ö†Ô∏è Vui l√≤ng nh·∫≠p c√¢u tr·∫£ l·ªùi</span></div>';
          feedback.classList.remove('hidden');
          return;
        }
        
        // Simple comparison - can be enhanced with more sophisticated matching
        const isCorrect = userAnswer.toLowerCase() === expectedAnswer.toLowerCase();
        
        if (isCorrect) {
          feedback.innerHTML = `
            <div class="bg-green-50 border border-green-200 rounded p-3">
              <span class="text-green-700 font-medium">‚úÖ Tuy·ªát v·ªùi!</span>
              <p class="text-green-700 text-sm mt-1">C√¢u tr·∫£ l·ªùi c·ªßa b·∫°n ch√≠nh x√°c.</p>
            </div>
          `;
          textarea.style.borderColor = '#10b981';
          textarea.style.backgroundColor = '#d1fae5';
        } else {
          feedback.innerHTML = `
            <div class="bg-red-50 border border-red-200 rounded p-3">
              <span class="text-red-700 font-medium">üí≠ Tham kh·∫£o ƒë√°p √°n</span>
              <p class="text-red-700 text-sm mt-1"><strong>G·ª£i √Ω ƒë√°p √°n:</strong> ${expectedAnswer}</p>
              <p class="text-red-700 text-sm">So s√°nh v·ªõi c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n v√† th·ª≠ l·∫°i!</p>
            </div>
          `;
          textarea.style.borderColor = '#f59e0b';
          textarea.style.backgroundColor = '#fef3c7';
        }
        
        feedback.classList.remove('hidden');
      });
    });

    resetInteractiveBtns.forEach(btn => {
      btn.addEventListener('click', function() {
        const exerciseItem = this.closest('.exercise-item');
        const textarea = exerciseItem.querySelector('.interactive-answer');
        const feedback = exerciseItem.querySelector('.interactive-feedback');
        
        textarea.value = '';
        textarea.style.borderColor = '#d1d5db';
        textarea.style.backgroundColor = 'white';
        
        feedback.classList.add('hidden');
      });
    });
  });
</script>

<style>
  /* Korean text styling */
  .korean-text {
    font-family: 'Noto Sans KR', 'Malgun Gothic', 'ÎßëÏùÄ Í≥†Îîï', 'Apple SD Gothic Neo', sans-serif;
    word-break: keep-all;
    line-height: 1.6;
  }

  /* Exercise transitions */
  .exercise-content {
    animation: fadeIn 0.3s ease-in-out;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Exercise tab active state */
  .exercise-tab[data-active="true"] {
    background-color: white;
    color: #9333ea;
    box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1);
  }

  /* Input focus styles */
  .blank-input:focus {
    box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.1);
  }

  .interactive-answer:focus {
    box-shadow: 0 0 0 2px rgba(147, 51, 234, 0.1);
  }

  /* Radio button styling */
  .radio-option {
    accent-color: #10b981;
  }

  /* Button hover effects */
  .exercise-controls button:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 4px 0 rgb(0 0 0 / 0.1);
  }

  /* Exercise item hover effect */
  .exercise-item {
    transition: all 0.3s ease;
  }

  .exercise-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px 0 rgb(0 0 0 / 0.1);
  }
</style>
