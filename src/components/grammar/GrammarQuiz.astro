---
// Component: GrammarQuiz
// Description: Interactive quiz component for grammar assessment
// Used in: grammar lesson pages, review sections, assessment pages
// Purpose: Provides various quiz types, scoring, and progress tracking

export interface Props {
  grammarId: string;
  quizType?: 'multiple-choice' | 'fill-blanks' | 'sentence-building' | 'translation' | 'mixed';
  difficulty?: 'beginner' | 'intermediate' | 'advanced';
  questionCount?: number;
  showProgress?: boolean;
  showHints?: boolean;
  showExplanations?: boolean;
  timeLimit?: number; // in minutes, 0 for no limit
}

const { 
  grammarId,
  quizType = 'mixed',
  difficulty = 'beginner',
  questionCount = 10,
  showProgress = true,
  showHints = true,
  showExplanations = true,
  timeLimit = 0
} = Astro.props;

// Quiz questions data structure
const quizQuestions = {
  'particles-e-wa': {
    beginner: [
      {
        type: 'multiple-choice',
        question: 'Chọn trợ từ phù hợp: 저___학생이에요.',
        options: ['는', '가', '을', '에'],
        correct: 0,
        explanation: 'Trợ từ "는" được dùng để chỉ chủ đề của câu.',
        hint: 'Trợ từ này dùng để chỉ chủ đề trong câu.',
        korean: '저는 학생이에요.',
        vietnamese: 'Tôi là học sinh.'
      },
      {
        type: 'fill-blanks',
        question: 'Điền trợ từ thích hợp: 이것___ 책이에요.',
        answer: '은',
        explanation: 'Sau "이것" (kết thúc bằng phụ âm) dùng "은".',
        hint: 'Từ "이것" kết thúc bằng phụ âm, nên dùng trợ từ nào?',
        korean: '이것은 책이에요.',
        vietnamese: 'Đây là sách.'
      },
      {
        type: 'translation',
        question: 'Dịch sang tiếng Hàn: "Tôi thích pizza"',
        answer: '저는 피자를 좋아해요',
        alternatives: ['저는 피자 좋아해요', '나는 피자를 좋아해요'],
        explanation: 'Dùng "저는" (chủ đề) và "를" (tân ngữ) cho câu lịch sự.',
        hint: 'Sử dụng dạng lịch sự và trợ từ tân ngữ.'
      },
      {
        type: 'sentence-building',
        question: 'Sắp xếp thành câu: [저는, 학교에, 갑니다, 매일]',
        answer: '저는 매일 학교에 갑니다',
        explanation: 'Trật tự: Chủ ngữ + Thời gian + Địa điểm + Động từ',
        hint: 'Thời gian thường đứng sau chủ ngữ, trước địa điểm.'
      }
    ],
    intermediate: [
      {
        type: 'multiple-choice',
        question: 'Câu nào sử dụng trợ từ chính xác?',
        options: [
          '친구가 선물은 줬어요',
          '친구는 선물을 줬어요', 
          '친구를 선물이 줬어요',
          '친구에 선물을 줬어요'
        ],
        correct: 1,
        explanation: '친구는 (chủ đề) + 선물을 (tân ngữ) + 줬어요 (động từ)',
        hint: 'Ai là người cho và cái gì được cho?'
      }
    ]
  },
  // Add more grammar patterns here
};

// Get questions for current grammar and difficulty
const getQuestions = (grammarId: string, difficulty: string, type: string, count: number) => {
  const grammarQuestions = quizQuestions[grammarId as keyof typeof quizQuestions];
  if (!grammarQuestions) return [];
  
  const difficultyQuestions = grammarQuestions[difficulty as keyof typeof grammarQuestions] || [];
  
  let filteredQuestions = difficultyQuestions;
  if (type !== 'mixed') {
    filteredQuestions = difficultyQuestions.filter(q => q.type === type);
  }
  
  // Shuffle and limit to requested count
  return filteredQuestions
    .sort(() => Math.random() - 0.5)
    .slice(0, Math.min(count, filteredQuestions.length));
};

const questions = getQuestions(grammarId, difficulty, quizType, questionCount);
---

<div class="grammar-quiz" id="grammar-quiz">
  <!-- Quiz Header -->
  <div class="quiz-header">
    <div class="quiz-info">
      <h3 class="quiz-title">📝 Bài kiểm tra ngữ pháp</h3>
      <div class="quiz-details">
        <span class="quiz-difficulty difficulty-{difficulty}">
          {difficulty === 'beginner' ? '🟢 Cơ bản' : 
           difficulty === 'intermediate' ? '🟡 Trung cấp' : '🔴 Nâng cao'}
        </span>
        <span class="quiz-type">
          {quizType === 'mixed' ? '🎯 Tổng hợp' :
           quizType === 'multiple-choice' ? '☑️ Trắc nghiệm' :
           quizType === 'fill-blanks' ? '✏️ Điền từ' :
           quizType === 'sentence-building' ? '🔧 Sắp xếp câu' : '🔄 Dịch thuật'}
        </span>
        <span class="question-count">📊 {questions.length} câu hỏi</span>
      </div>
    </div>

    {timeLimit > 0 && (
      <div class="quiz-timer">
        <div class="timer-icon">⏰</div>
        <div class="timer-display" id="timer-display">
          <span id="timer-minutes">{timeLimit}</span>:<span id="timer-seconds">00</span>
        </div>
      </div>
    )}
  </div>

  <!-- Progress Bar -->
  {showProgress && (
    <div class="quiz-progress">
      <div class="progress-bar">
        <div class="progress-fill" id="progress-fill"></div>
      </div>
      <div class="progress-text">
        <span id="current-question">1</span> / <span id="total-questions">{questions.length}</span>
      </div>
    </div>
  )}

  <!-- Quiz Container -->
  <div class="quiz-container" id="quiz-container">
    {questions.length === 0 ? (
      <div class="no-questions">
        <div class="no-questions-icon">❓</div>
        <h4>Không có câu hỏi</h4>
        <p>Hiện tại chưa có câu hỏi cho mức độ và loại này.</p>
        <button class="retry-button" onclick="location.reload()">
          🔄 Thử lại
        </button>
      </div>
    ) : (
      questions.map((question, index) => (
        <div 
          class={`quiz-question ${index === 0 ? 'active' : ''}`} 
          id={`question-${index}`}
          data-question-type={question.type}
        >
          <!-- Question Content -->
          <div class="question-content">
            <div class="question-number">Câu {index + 1}</div>
            <div class="question-text">{question.question}</div>
            
            {question.type === 'multiple-choice' && (
              <div class="options-container">
                {question.options?.map((option, optionIndex) => (
                  <label class="option-label">
                    <input 
                      type="radio" 
                      name={`question-${index}`}
                      value={optionIndex}
                      class="option-input"
                    />
                    <span class="option-text">{option}</span>
                    <span class="option-indicator"></span>
                  </label>
                ))}
              </div>
            )}

            {question.type === 'fill-blanks' && (
              <div class="fill-container">
                <input 
                  type="text" 
                  class="fill-input" 
                  id={`answer-${index}`}
                  placeholder="Nhập câu trả lời..."
                  autocomplete="off"
                />
                <div class="fill-hint">💡 Gợi ý: Nhập trợ từ hoặc từ phù hợp</div>
              </div>
            )}

            {question.type === 'translation' && (
              <div class="translation-container">
                <textarea 
                  class="translation-input" 
                  id={`answer-${index}`}
                  placeholder="Nhập bản dịch tiếng Hàn..."
                  rows="3"
                ></textarea>
                <div class="translation-hint">💡 Sử dụng dạng lịch sự (-요 ending)</div>
              </div>
            )}

            {question.type === 'sentence-building' && (
              <div class="sentence-building-container">
                <div class="word-bank">
                  <div class="word-bank-title">Từ vựng có sẵn:</div>
                  <div class="word-list" id={`word-bank-${index}`}>
                    {question.question.match(/\[(.*?)\]/)?.[1]?.split(', ').map((word, wordIndex) => (
                      <span class="word-item" data-word={word} onclick="selectWord(this, {index})">
                        {word}
                      </span>
                    ))}
                  </div>
                </div>
                <div class="sentence-area">
                  <div class="sentence-area-title">Câu của bạn:</div>
                  <div class="sentence-input" id={`sentence-${index}`} data-answer=""></div>
                  <button class="clear-sentence" onclick="clearSentence({index})">🗑️ Xóa</button>
                </div>
              </div>
            )}
          </div>

          <!-- Question Actions -->
          <div class="question-actions">
            {showHints && (
              <button class="hint-button" onclick="showHint({index})">
                💡 Gợi ý
              </button>
            )}
            
            <div class="navigation-buttons">
              {index > 0 && (
                <button class="nav-button prev" onclick="previousQuestion()">
                  ← Câu trước
                </button>
              )}
              
              <button class="nav-button next" onclick="nextQuestion()">
                {index < questions.length - 1 ? 'Câu tiếp →' : '✓ Hoàn thành'}
              </button>
            </div>
          </div>

          <!-- Hint Panel -->
          {showHints && (
            <div class="hint-panel" id={`hint-${index}`} style="display: none;">
              <div class="hint-content">
                <div class="hint-icon">💡</div>
                <div class="hint-text">{question.hint}</div>
              </div>
            </div>
          )}

          <!-- Explanation Panel -->
          {showExplanations && (
            <div class="explanation-panel" id={`explanation-${index}`} style="display: none;">
              <div class="explanation-content">
                <div class="explanation-header">
                  <div class="explanation-icon correct">✅</div>
                  <div class="explanation-title">Giải thích</div>
                </div>
                <div class="explanation-text">{question.explanation}</div>
                
                {(question.korean || question.vietnamese) && (
                  <div class="example-sentences">
                    {question.korean && (
                      <div class="example-korean">🇰🇷 {question.korean}</div>
                    )}
                    {question.vietnamese && (
                      <div class="example-vietnamese">🇻🇳 {question.vietnamese}</div>
                    )}
                  </div>
                )}
              </div>
            </div>
          )}
        </div>
      ))
    )}
  </div>

  <!-- Quiz Results -->
  <div class="quiz-results" id="quiz-results" style="display: none;">
    <div class="results-header">
      <div class="results-icon" id="results-icon">🎉</div>
      <h3 class="results-title" id="results-title">Hoàn thành bài kiểm tra!</h3>
      <div class="results-score">
        <span class="score-text">Điểm số:</span>
        <span class="score-number" id="final-score">0</span>
        <span class="score-total">/ {questions.length}</span>
      </div>
    </div>

    <div class="results-details">
      <div class="score-breakdown">
        <div class="breakdown-item correct">
          <div class="breakdown-icon">✅</div>
          <div class="breakdown-label">Đúng</div>
          <div class="breakdown-count" id="correct-count">0</div>
        </div>
        <div class="breakdown-item incorrect">
          <div class="breakdown-icon">❌</div>
          <div class="breakdown-label">Sai</div>
          <div class="breakdown-count" id="incorrect-count">0</div>
        </div>
        <div class="breakdown-item percentage">
          <div class="breakdown-icon">📊</div>
          <div class="breakdown-label">Tỷ lệ</div>
          <div class="breakdown-count" id="percentage-score">0%</div>
        </div>
      </div>

      <div class="performance-message" id="performance-message">
        <!-- Will be populated by JavaScript -->
      </div>

      <div class="study-suggestions" id="study-suggestions">
        <!-- Will be populated by JavaScript -->
      </div>
    </div>

    <div class="results-actions">
      <button class="action-button primary" onclick="reviewAnswers()">
        📝 Xem đáp án
      </button>
      <button class="action-button secondary" onclick="retakeQuiz()">
        🔄 Làm lại
      </button>
      <button class="action-button tertiary" onclick="continueStudying()">
        📚 Tiếp tục học
      </button>
    </div>
  </div>
</div>

<style>
  .grammar-quiz {
    background: white;
    border-radius: 16px;
    padding: 2rem;
    margin: 2rem 0;
    border: 1px solid #e2e8f0;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.05);
    max-width: 800px;
    margin: 2rem auto;
  }

  /* Quiz Header */
  .quiz-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid #e2e8f0;
  }

  .quiz-title {
    color: #1f2937;
    font-size: 1.5rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
  }

  .quiz-details {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .quiz-details span {
    background: #f3f4f6;
    padding: 0.25rem 0.75rem;
    border-radius: 6px;
    font-size: 0.8rem;
    font-weight: 600;
  }

  .difficulty-beginner { background: #d1fae5; color: #065f46; }
  .difficulty-intermediate { background: #fef3c7; color: #92400e; }
  .difficulty-advanced { background: #fed7d7; color: #c53030; }

  .quiz-timer {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: #fef2f2;
    padding: 1rem;
    border-radius: 10px;
    border: 1px solid #fecaca;
  }

  .timer-icon {
    font-size: 1.5rem;
  }

  .timer-display {
    font-size: 1.2rem;
    font-weight: 700;
    color: #dc2626;
  }

  /* Progress */
  .quiz-progress {
    margin-bottom: 2rem;
  }

  .progress-bar {
    width: 100%;
    height: 8px;
    background: #e2e8f0;
    border-radius: 4px;
    overflow: hidden;
    margin-bottom: 0.5rem;
  }

  .progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #3b82f6 0%, #2563eb 100%);
    border-radius: 4px;
    transition: width 0.3s ease;
    width: 0%;
  }

  .progress-text {
    text-align: center;
    font-size: 0.9rem;
    font-weight: 600;
    color: #6b7280;
  }

  /* Questions */
  .quiz-question {
    display: none;
    animation: fadeIn 0.5s ease;
  }

  .quiz-question.active {
    display: block;
  }

  .question-content {
    background: #f8fafc;
    border-radius: 12px;
    padding: 2rem;
    margin-bottom: 2rem;
  }

  .question-number {
    background: #3b82f6;
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 700;
    display: inline-block;
    margin-bottom: 1rem;
  }

  .question-text {
    font-size: 1.1rem;
    font-weight: 600;
    color: #1f2937;
    margin-bottom: 1.5rem;
    line-height: 1.6;
  }

  /* Multiple Choice */
  .options-container {
    display: grid;
    gap: 0.75rem;
  }

  .option-label {
    display: flex;
    align-items: center;
    padding: 1rem;
    background: white;
    border: 2px solid #e2e8f0;
    border-radius: 10px;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
  }

  .option-label:hover {
    border-color: #3b82f6;
    background: #f0f9ff;
  }

  .option-input {
    display: none;
  }

  .option-input:checked + .option-text {
    color: #1d4ed8;
    font-weight: 600;
  }

  .option-input:checked ~ .option-indicator {
    background: #3b82f6;
    border-color: #3b82f6;
  }

  .option-input:checked ~ .option-indicator::after {
    opacity: 1;
  }

  .option-text {
    flex: 1;
    margin-left: 0.75rem;
  }

  .option-indicator {
    width: 20px;
    height: 20px;
    border: 2px solid #d1d5db;
    border-radius: 50%;
    position: relative;
    transition: all 0.3s ease;
  }

  .option-indicator::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 8px;
    height: 8px;
    background: white;
    border-radius: 50%;
    transform: translate(-50%, -50%);
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  /* Fill in Blanks */
  .fill-container, .translation-container {
    margin-top: 1rem;
  }

  .fill-input, .translation-input {
    width: 100%;
    padding: 1rem;
    border: 2px solid #e2e8f0;
    border-radius: 10px;
    font-size: 1rem;
    transition: border-color 0.3s ease;
  }

  .fill-input:focus, .translation-input:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  .fill-hint, .translation-hint {
    margin-top: 0.5rem;
    font-size: 0.8rem;
    color: #6b7280;
  }

  /* Sentence Building */
  .sentence-building-container {
    margin-top: 1rem;
  }

  .word-bank {
    margin-bottom: 1.5rem;
  }

  .word-bank-title, .sentence-area-title {
    font-weight: 600;
    color: #374151;
    margin-bottom: 0.5rem;
  }

  .word-list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .word-item {
    background: #e0e7ff;
    color: #3730a3;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    cursor: pointer;
    font-weight: 600;
    transition: all 0.3s ease;
    user-select: none;
  }

  .word-item:hover {
    background: #c7d2fe;
    transform: translateY(-2px);
  }

  .word-item.selected {
    background: #1d4ed8;
    color: white;
  }

  .sentence-area {
    position: relative;
  }

  .sentence-input {
    min-height: 60px;
    border: 2px dashed #d1d5db;
    border-radius: 10px;
    padding: 1rem;
    background: #f9fafb;
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .sentence-input.has-words {
    border-color: #3b82f6;
    background: #f0f9ff;
  }

  .sentence-word {
    background: #3b82f6;
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .sentence-word:hover {
    background: #2563eb;
  }

  .clear-sentence {
    position: absolute;
    top: -10px;
    right: -10px;
    background: #ef4444;
    color: white;
    border: none;
    border-radius: 20px;
    padding: 0.5rem;
    cursor: pointer;
    font-size: 0.8rem;
    opacity: 0.8;
    transition: opacity 0.3s ease;
  }

  .clear-sentence:hover {
    opacity: 1;
  }

  /* Question Actions */
  .question-actions {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
  }

  .hint-button {
    background: #fbbf24;
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 10px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .hint-button:hover {
    background: #f59e0b;
    transform: translateY(-2px);
  }

  .navigation-buttons {
    display: flex;
    gap: 1rem;
  }

  .nav-button {
    padding: 0.75rem 1.5rem;
    border-radius: 10px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    border: none;
  }

  .nav-button.prev {
    background: #6b7280;
    color: white;
  }

  .nav-button.prev:hover {
    background: #4b5563;
  }

  .nav-button.next {
    background: #3b82f6;
    color: white;
  }

  .nav-button.next:hover {
    background: #2563eb;
    transform: translateY(-2px);
  }

  /* Hint Panel */
  .hint-panel {
    background: #fffbeb;
    border: 1px solid #fbbf24;
    border-radius: 10px;
    padding: 1rem;
    margin-top: 1rem;
    animation: slideDown 0.3s ease;
  }

  .hint-content {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .hint-icon {
    font-size: 1.5rem;
  }

  .hint-text {
    color: #92400e;
    font-weight: 600;
  }

  /* Explanation Panel */
  .explanation-panel {
    background: #f0fdf4;
    border: 1px solid #22c55e;
    border-radius: 10px;
    padding: 1rem;
    margin-top: 1rem;
    animation: slideDown 0.3s ease;
  }

  .explanation-header {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 0.75rem;
  }

  .explanation-icon {
    font-size: 1.5rem;
  }

  .explanation-title {
    font-weight: 700;
    color: #15803d;
  }

  .explanation-text {
    color: #166534;
    margin-bottom: 1rem;
    line-height: 1.6;
  }

  .example-sentences {
    background: white;
    border-radius: 8px;
    padding: 1rem;
    border: 1px solid #bbf7d0;
  }

  .example-korean {
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: #1f2937;
  }

  .example-vietnamese {
    color: #6b7280;
    font-style: italic;
  }

  /* No Questions */
  .no-questions {
    text-align: center;
    padding: 3rem;
    color: #6b7280;
  }

  .no-questions-icon {
    font-size: 4rem;
    margin-bottom: 1rem;
  }

  .retry-button {
    background: #3b82f6;
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 10px;
    font-weight: 600;
    cursor: pointer;
    margin-top: 1rem;
  }

  /* Quiz Results */
  .quiz-results {
    text-align: center;
    animation: fadeIn 0.5s ease;
  }

  .results-header {
    margin-bottom: 2rem;
  }

  .results-icon {
    font-size: 4rem;
    margin-bottom: 1rem;
  }

  .results-title {
    color: #1f2937;
    font-size: 1.8rem;
    font-weight: 700;
    margin-bottom: 1rem;
  }

  .results-score {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    font-size: 1.5rem;
  }

  .score-number {
    font-size: 2rem;
    font-weight: 700;
    color: #3b82f6;
  }

  .score-breakdown {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
    margin-bottom: 2rem;
  }

  .breakdown-item {
    background: white;
    border-radius: 10px;
    padding: 1.5rem;
    border: 1px solid #e2e8f0;
  }

  .breakdown-item.correct {
    border-left: 4px solid #22c55e;
  }

  .breakdown-item.incorrect {
    border-left: 4px solid #ef4444;
  }

  .breakdown-item.percentage {
    border-left: 4px solid #3b82f6;
  }

  .breakdown-icon {
    font-size: 2rem;
    margin-bottom: 0.5rem;
  }

  .breakdown-label {
    font-weight: 600;
    color: #6b7280;
    margin-bottom: 0.5rem;
  }

  .breakdown-count {
    font-size: 1.5rem;
    font-weight: 700;
    color: #1f2937;
  }

  .performance-message {
    background: #f0f9ff;
    border: 1px solid #3b82f6;
    border-radius: 10px;
    padding: 1.5rem;
    margin-bottom: 2rem;
    color: #1e40af;
    font-weight: 600;
  }

  .study-suggestions {
    background: #fffbeb;
    border: 1px solid #fbbf24;
    border-radius: 10px;
    padding: 1.5rem;
    margin-bottom: 2rem;
    text-align: left;
  }

  .results-actions {
    display: flex;
    gap: 1rem;
    justify-content: center;
    flex-wrap: wrap;
  }

  .action-button {
    padding: 0.75rem 1.5rem;
    border-radius: 10px;
    font-weight: 600;
    text-decoration: none;
    border: none;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .action-button.primary {
    background: #3b82f6;
    color: white;
  }

  .action-button.primary:hover {
    background: #2563eb;
    transform: translateY(-2px);
  }

  .action-button.secondary {
    background: #f3f4f6;
    color: #374151;
    border: 1px solid #d1d5db;
  }

  .action-button.secondary:hover {
    background: #e5e7eb;
  }

  .action-button.tertiary {
    background: transparent;
    color: #6b7280;
    border: 1px solid #e5e7eb;
  }

  .action-button.tertiary:hover {
    background: #f9fafb;
    color: #374151;
  }

  /* Animations */
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
  }

  @keyframes slideDown {
    from { opacity: 0; transform: translateY(-10px); }
    to { opacity: 1; transform: translateY(0); }
  }

  /* Responsive */
  @media (max-width: 768px) {
    .grammar-quiz {
      padding: 1.5rem;
      margin: 1rem;
    }

    .quiz-header {
      flex-direction: column;
      gap: 1rem;
      align-items: stretch;
    }

    .quiz-details {
      flex-direction: column;
      gap: 0.5rem;
    }

    .question-content {
      padding: 1.5rem;
    }

    .question-actions {
      flex-direction: column;
      gap: 1rem;
    }

    .navigation-buttons {
      flex-direction: column;
    }

    .score-breakdown {
      grid-template-columns: 1fr;
    }

    .results-actions {
      flex-direction: column;
    }

    .word-list {
      justify-content: center;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const quiz = document.getElementById('grammar-quiz');
    if (!quiz) return;

    let currentQuestion = 0;
    let answers = {};
    let startTime = Date.now();
    let timeRemaining = {timeLimit} * 60; // Convert to seconds
    let timerInterval;

    const questions = {JSON.stringify(questions)};
    const totalQuestions = questions.length;

    // Initialize quiz
    initializeQuiz();

    function initializeQuiz() {
      if (timeRemaining > 0) {
        startTimer();
      }
      updateProgress();
      
      // Set up event listeners
      setupEventListeners();
    }

    function startTimer() {
      const timerDisplay = document.getElementById('timer-display');
      if (!timerDisplay) return;

      timerInterval = setInterval(() => {
        timeRemaining--;
        
        const minutes = Math.floor(timeRemaining / 60);
        const seconds = timeRemaining % 60;
        
        document.getElementById('timer-minutes').textContent = minutes.toString().padStart(2, '0');
        document.getElementById('timer-seconds').textContent = seconds.toString().padStart(2, '0');
        
        if (timeRemaining <= 60) {
          timerDisplay.style.color = '#dc2626';
          timerDisplay.style.animation = 'pulse 1s infinite';
        }
        
        if (timeRemaining <= 0) {
          clearInterval(timerInterval);
          submitQuiz(true); // Auto submit when time runs out
        }
      }, 1000);
    }

    function setupEventListeners() {
      // Option selections
      document.querySelectorAll('.option-input').forEach(input => {
        input.addEventListener('change', function() {
          const questionIndex = parseInt(this.name.split('-')[1]);
          answers[questionIndex] = parseInt(this.value);
        });
      });

      // Text inputs
      document.querySelectorAll('.fill-input, .translation-input').forEach(input => {
        input.addEventListener('input', function() {
          const questionIndex = parseInt(this.id.split('-')[1]);
          answers[questionIndex] = this.value.trim();
        });
      });
    }

    function updateProgress() {
      const progressFill = document.getElementById('progress-fill');
      const currentQuestionSpan = document.getElementById('current-question');
      
      if (progressFill) {
        const progress = ((currentQuestion + 1) / totalQuestions) * 100;
        progressFill.style.width = progress + '%';
      }
      
      if (currentQuestionSpan) {
        currentQuestionSpan.textContent = currentQuestion + 1;
      }
    }

    window.nextQuestion = function() {
      if (currentQuestion < totalQuestions - 1) {
        // Hide current question
        document.getElementById(`question-${currentQuestion}`).classList.remove('active');
        
        // Show next question
        currentQuestion++;
        document.getElementById(`question-${currentQuestion}`).classList.add('active');
        
        updateProgress();
      } else {
        // Submit quiz
        submitQuiz();
      }
    };

    window.previousQuestion = function() {
      if (currentQuestion > 0) {
        // Hide current question
        document.getElementById(`question-${currentQuestion}`).classList.remove('active');
        
        // Show previous question
        currentQuestion--;
        document.getElementById(`question-${currentQuestion}`).classList.add('active');
        
        updateProgress();
      }
    };

    window.showHint = function(questionIndex) {
      const hintPanel = document.getElementById(`hint-${questionIndex}`);
      if (hintPanel) {
        hintPanel.style.display = hintPanel.style.display === 'none' ? 'block' : 'none';
      }
    };

    function submitQuiz(timeUp = false) {
      if (timerInterval) {
        clearInterval(timerInterval);
      }

      const totalTime = Math.floor((Date.now() - startTime) / 1000);
      let correctCount = 0;

      // Check answers
      questions.forEach((question, index) => {
        const userAnswer = answers[index];
        let isCorrect = false;

        switch (question.type) {
          case 'multiple-choice':
            isCorrect = userAnswer === question.correct;
            break;
          case 'fill-blanks':
            isCorrect = userAnswer && userAnswer.toLowerCase() === question.answer.toLowerCase();
            break;
          case 'translation':
            if (userAnswer) {
              const normalizedAnswer = userAnswer.toLowerCase().replace(/\s+/g, '');
              const correctAnswer = question.answer.toLowerCase().replace(/\s+/g, '');
              isCorrect = normalizedAnswer === correctAnswer;
              
              // Check alternatives
              if (!isCorrect && question.alternatives) {
                isCorrect = question.alternatives.some(alt => 
                  normalizedAnswer === alt.toLowerCase().replace(/\s+/g, '')
                );
              }
            }
            break;
          case 'sentence-building':
            if (userAnswer) {
              const normalizedAnswer = userAnswer.toLowerCase().replace(/\s+/g, '');
              const correctAnswer = question.answer.toLowerCase().replace(/\s+/g, '');
              isCorrect = normalizedAnswer === correctAnswer;
            }
            break;
        }

        if (isCorrect) correctCount++;
      });

      showResults(correctCount, totalQuestions, totalTime, timeUp);
    }

    function showResults(correct, total, timeSpent, timeUp) {
      // Hide quiz container
      document.getElementById('quiz-container').style.display = 'none';
      
      // Show results
      const resultsDiv = document.getElementById('quiz-results');
      resultsDiv.style.display = 'block';

      // Update score display
      document.getElementById('final-score').textContent = correct;
      document.getElementById('correct-count').textContent = correct;
      document.getElementById('incorrect-count').textContent = total - correct;
      
      const percentage = Math.round((correct / total) * 100);
      document.getElementById('percentage-score').textContent = percentage + '%';

      // Update results based on performance
      const resultsIcon = document.getElementById('results-icon');
      const resultsTitle = document.getElementById('results-title');
      const performanceMessage = document.getElementById('performance-message');

      if (timeUp) {
        resultsIcon.textContent = '⏰';
        resultsTitle.textContent = 'Hết giờ!';
        performanceMessage.innerHTML = '⏰ Thời gian đã hết, nhưng bạn vẫn làm được ' + correct + '/' + total + ' câu đúng!';
      } else if (percentage >= 90) {
        resultsIcon.textContent = '🏆';
        resultsTitle.textContent = 'Xuất sắc!';
        performanceMessage.innerHTML = '🏆 Tuyệt vời! Bạn đã thành thạo ngữ pháp này!';
      } else if (percentage >= 70) {
        resultsIcon.textContent = '🎉';
        resultsTitle.textContent = 'Tốt!';
        performanceMessage.innerHTML = '👍 Khá tốt! Bạn hiểu phần lớn nội dung.';
      } else if (percentage >= 50) {
        resultsIcon.textContent = '📚';
        resultsTitle.textContent = 'Cần cải thiện';
        performanceMessage.innerHTML = '📚 Bạn cần ôn luyện thêm để nắm vững ngữ pháp này.';
      } else {
        resultsIcon.textContent = '💪';
        resultsTitle.textContent = 'Tiếp tục cố gắng!';
        performanceMessage.innerHTML = '💪 Đừng nản chí! Hãy ôn lại bài học và thử lại.';
      }

      // Save results to localStorage
      saveQuizResults(correct, total, percentage, timeSpent);

      // Generate study suggestions
      generateStudySuggestions(percentage);
    }

    function saveQuizResults(correct, total, percentage, timeSpent) {
      const results = {
        grammarId: '{grammarId}',
        score: correct,
        total: total,
        percentage: percentage,
        timeSpent: timeSpent,
        date: new Date().toISOString(),
        difficulty: '{difficulty}',
        quizType: '{quizType}'
      };

      // Save to quiz history
      const quizHistory = JSON.parse(localStorage.getItem('quizHistory') || '[]');
      quizHistory.push(results);
      localStorage.setItem('quizHistory', JSON.stringify(quizHistory));

      // Update grammar progress
      if (percentage >= 70) {
        const completedGrammars = JSON.parse(localStorage.getItem('completedGrammars') || '[]');
        if (!completedGrammars.includes('{grammarId}')) {
          completedGrammars.push('{grammarId}');
          localStorage.setItem('completedGrammars', JSON.stringify(completedGrammars));
          
          // Trigger progress update
          window.dispatchEvent(new StorageEvent('storage', {
            key: 'completedGrammars',
            newValue: JSON.stringify(completedGrammars)
          }));
        }
      }
    }

    function generateStudySuggestions(percentage) {
      const suggestionsDiv = document.getElementById('study-suggestions');
      let suggestions = '<h4>💡 Gợi ý học tập:</h4><ul>';

      if (percentage < 50) {
        suggestions += '<li>📖 Ôn lại phần lý thuyết cơ bản</li>';
        suggestions += '<li>📝 Làm bài tập đơn giản trước</li>';
        suggestions += '<li>🔄 Xem lại các ví dụ mẫu</li>';
      } else if (percentage < 70) {
        suggestions += '<li>💪 Luyện tập thêm các dạng bài khó</li>';
        suggestions += '<li>📚 Đọc thêm ví dụ trong ngữ cảnh</li>';
        suggestions += '<li>🎯 Tập trung vào các câu bạn làm sai</li>';
      } else if (percentage < 90) {
        suggestions += '<li>🚀 Thử mức độ nâng cao</li>';
        suggestions += '<li>📖 Học thêm ngữ pháp liên quan</li>';
        suggestions += '<li>💬 Thực hành trong hội thoại</li>';
      } else {
        suggestions += '<li>🏆 Bạn đã thành thạo! Hãy học ngữ pháp tiếp theo</li>';
        suggestions += '<li>🎯 Thử các bài kiểm tra tổng hợp</li>';
        suggestions += '<li>💬 Sử dụng trong giao tiếp thực tế</li>';
      }

      suggestions += '</ul>';
      suggestionsDiv.innerHTML = suggestions;
    }

    // Word selection for sentence building
    window.selectWord = function(element, questionIndex) {
      const word = element.dataset.word;
      const sentenceArea = document.getElementById(`sentence-${questionIndex}`);
      
      // Add word to sentence
      const wordSpan = document.createElement('span');
      wordSpan.className = 'sentence-word';
      wordSpan.textContent = word;
      wordSpan.onclick = () => removeWordFromSentence(wordSpan, element, questionIndex);
      
      sentenceArea.appendChild(wordSpan);
      
      // Mark word as selected
      element.classList.add('selected');
      
      // Update answer
      updateSentenceAnswer(questionIndex);
      
      // Add class to sentence area
      sentenceArea.classList.add('has-words');
    };

    function removeWordFromSentence(wordSpan, originalElement, questionIndex) {
      wordSpan.remove();
      originalElement.classList.remove('selected');
      updateSentenceAnswer(questionIndex);
      
      const sentenceArea = document.getElementById(`sentence-${questionIndex}`);
      if (sentenceArea.children.length === 0) {
        sentenceArea.classList.remove('has-words');
      }
    }

    window.clearSentence = function(questionIndex) {
      const sentenceArea = document.getElementById(`sentence-${questionIndex}`);
      const wordBank = document.getElementById(`word-bank-${questionIndex}`);
      
      // Remove all words from sentence
      sentenceArea.innerHTML = '';
      sentenceArea.classList.remove('has-words');
      
      // Unselect all words in bank
      wordBank.querySelectorAll('.word-item').forEach(word => {
        word.classList.remove('selected');
      });
      
      // Clear answer
      answers[questionIndex] = '';
    };

    function updateSentenceAnswer(questionIndex) {
      const sentenceArea = document.getElementById(`sentence-${questionIndex}`);
      const words = Array.from(sentenceArea.children).map(span => span.textContent);
      answers[questionIndex] = words.join(' ');
    }

    // Result actions
    window.reviewAnswers = function() {
      // Hide results and show questions with answers
      document.getElementById('quiz-results').style.display = 'none';
      document.getElementById('quiz-container').style.display = 'block';
      
      // Show explanations for all questions
      questions.forEach((question, index) => {
        const explanationPanel = document.getElementById(`explanation-${index}`);
        if (explanationPanel) {
          explanationPanel.style.display = 'block';
        }
        
        // Show correct/incorrect indicators
        const questionDiv = document.getElementById(`question-${index}`);
        const userAnswer = answers[index];
        
        // Add result indicator
        let isCorrect = false;
        switch (question.type) {
          case 'multiple-choice':
            isCorrect = userAnswer === question.correct;
            break;
          case 'fill-blanks':
            isCorrect = userAnswer && userAnswer.toLowerCase() === question.answer.toLowerCase();
            break;
          // Add other question types...
        }
        
        const indicator = document.createElement('div');
        indicator.className = `result-indicator ${isCorrect ? 'correct' : 'incorrect'}`;
        indicator.innerHTML = isCorrect ? '✅ Đúng' : '❌ Sai';
        questionDiv.insertBefore(indicator, questionDiv.firstChild);
      });
      
      // Show all questions
      document.querySelectorAll('.quiz-question').forEach(q => {
        q.classList.add('active');
        q.style.display = 'block';
      });
      
      // Hide navigation buttons
      document.querySelectorAll('.question-actions').forEach(actions => {
        actions.style.display = 'none';
      });
      
      // Add close review button
      const closeReviewBtn = document.createElement('button');
      closeReviewBtn.className = 'action-button primary';
      closeReviewBtn.innerHTML = '✓ Hoàn thành xem đáp án';
      closeReviewBtn.onclick = () => location.reload();
      
      const firstQuestion = document.getElementById('question-0');
      firstQuestion.appendChild(closeReviewBtn);
    };

    window.retakeQuiz = function() {
      location.reload();
    };

    window.continueStudying = function() {
      window.location.href = '/ngu-phap';
    };
  });
</script>
