---
// Component: GrammarDashboard
// Description: Comprehensive dashboard for grammar learning progress and navigation
// Used in: main grammar page, student profile, progress tracking
// Purpose: Central hub for all grammar learning activities and progress monitoring

export interface Props {
  showWelcome?: boolean;
  compact?: boolean;
  grammarList?: Array<{
    id: string;
    title: string;
    korean: string;
    level: 'beginner' | 'intermediate' | 'advanced';
    difficulty: number;
    estimatedTime: number;
    completed: boolean;
    lastReview?: string;
    accuracy?: number;
  }>;
}

const { 
  showWelcome = true,
  compact = false,
  grammarList = [
    {
      id: 'particles-e-wa',
      title: 'Trợ từ 은/는 và 이/가',
      korean: '조사 은/는, 이/가',
      level: 'beginner',
      difficulty: 1,
      estimatedTime: 15,
      completed: false,
      accuracy: 0
    },
    {
      id: 'present-tense',
      title: 'Thì hiện tại',
      korean: '현재시제',
      level: 'beginner',
      difficulty: 2,
      estimatedTime: 20,
      completed: false,
      accuracy: 0
    },
    {
      id: 'past-tense',
      title: 'Thì quá khứ',
      korean: '과거시제',
      level: 'beginner',
      difficulty: 3,
      estimatedTime: 25,
      completed: false,
      accuracy: 0
    },
    {
      id: 'future-tense',
      title: 'Thì tương lai',
      korean: '미래시제',
      level: 'intermediate',
      difficulty: 4,
      estimatedTime: 20,
      completed: false,
      accuracy: 0
    },
    {
      id: 'honorific-system',
      title: 'Hệ thống kính ngữ',
      korean: '존댓말',
      level: 'intermediate',
      difficulty: 5,
      estimatedTime: 30,
      completed: false,
      accuracy: 0
    },
    {
      id: 'conditional-forms',
      title: 'Câu điều kiện',
      korean: '조건문',
      level: 'intermediate',
      difficulty: 6,
      estimatedTime: 25,
      completed: false,
      accuracy: 0
    },
    {
      id: 'passive-causative',
      title: 'Thể bị động và sai khiến',
      korean: '피동, 사동',
      level: 'advanced',
      difficulty: 7,
      estimatedTime: 35,
      completed: false,
      accuracy: 0
    },
    {
      id: 'complex-endings',
      title: 'Các vĩ tố phức tạp',
      korean: '복잡한 어미',
      level: 'advanced',
      difficulty: 8,
      estimatedTime: 40,
      completed: false,
      accuracy: 0
    }
  ]
} = Astro.props;

// Get current date for greeting
const currentHour = new Date().getHours();
const getGreeting = () => {
  if (currentHour < 12) return { text: 'Chào buổi sáng', icon: '🌅' };
  if (currentHour < 18) return { text: 'Chào buổi chiều', icon: '☀️' };
  return { text: 'Chào buổi tối', icon: '🌙' };
};

const greeting = getGreeting();
---

<div class={`grammar-dashboard ${compact ? 'compact' : ''}`}>
  <!-- Welcome Section -->
  {showWelcome && (
    <div class="welcome-section">
      <div class="welcome-content">
        <div class="greeting">
          <span class="greeting-icon">{greeting.icon}</span>
          <span class="greeting-text">{greeting.text}!</span>
        </div>
        <h2 class="welcome-title">Sẵn sàng học ngữ pháp tiếng Hàn?</h2>
        <p class="welcome-subtitle">
          Theo dõi tiến độ của bạn và tiếp tục hành trình chinh phục tiếng Hàn
        </p>
      </div>
      
      <div class="quick-actions">
        <button class="quick-action primary" onclick="continueStudying()">
          <span class="action-icon">📚</span>
          <span class="action-text">Tiếp tục học</span>
        </button>
        <button class="quick-action secondary" onclick="takeQuiz()">
          <span class="action-icon">📝</span>
          <span class="action-text">Làm bài kiểm tra</span>
        </button>
        <button class="quick-action tertiary" onclick="reviewProgress()">
          <span class="action-icon">📊</span>
          <span class="action-text">Xem tiến độ</span>
        </button>
      </div>
    </div>
  )}

  <!-- Progress Overview -->
  <div class="progress-overview">
    <div class="overview-card overall-progress">
      <div class="card-header">
        <h3 class="card-title">📈 Tiến độ tổng quan</h3>
        <div class="progress-percentage" id="overall-percentage">0%</div>
      </div>
      <div class="progress-visual">
        <div class="progress-circle" id="progress-circle">
          <svg viewBox="0 0 100 100">
            <circle cx="50" cy="50" r="45" class="progress-background"></circle>
            <circle cx="50" cy="50" r="45" class="progress-bar" id="progress-bar"></circle>
          </svg>
          <div class="progress-text">
            <span class="completed-count" id="completed-count">0</span>
            <span class="total-count">/ {grammarList.length}</span>
          </div>
        </div>
        <div class="progress-stats">
          <div class="stat-item">
            <div class="stat-icon">🎯</div>
            <div class="stat-content">
              <div class="stat-value" id="accuracy-average">0%</div>
              <div class="stat-label">Độ chính xác</div>
            </div>
          </div>
          <div class="stat-item">
            <div class="stat-icon">⏱️</div>
            <div class="stat-content">
              <div class="stat-value" id="study-time">0h</div>
              <div class="stat-label">Thời gian học</div>
            </div>
          </div>
          <div class="stat-item">
            <div class="stat-icon">🔥</div>
            <div class="stat-content">
              <div class="stat-value" id="current-streak">0</div>
              <div class="stat-label">Ngày liên tiếp</div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="overview-card level-breakdown">
      <div class="card-header">
        <h3 class="card-title">🎚️ Tiến độ theo cấp độ</h3>
      </div>
      <div class="level-progress">
        <div class="level-item beginner">
          <div class="level-info">
            <div class="level-icon">🟢</div>
            <div class="level-details">
              <div class="level-name">Cơ bản</div>
              <div class="level-description">Nền tảng ngữ pháp</div>
            </div>
          </div>
          <div class="level-stats">
            <div class="level-progress-bar">
              <div class="level-progress-fill" id="beginner-progress"></div>
            </div>
            <div class="level-count" id="beginner-count">0/0</div>
          </div>
        </div>

        <div class="level-item intermediate">
          <div class="level-info">
            <div class="level-icon">🟡</div>
            <div class="level-details">
              <div class="level-name">Trung cấp</div>
              <div class="level-description">Mở rộng kiến thức</div>
            </div>
          </div>
          <div class="level-stats">
            <div class="level-progress-bar">
              <div class="level-progress-fill" id="intermediate-progress"></div>
            </div>
            <div class="level-count" id="intermediate-count">0/0</div>
          </div>
        </div>

        <div class="level-item advanced">
          <div class="level-info">
            <div class="level-icon">🔴</div>
            <div class="level-details">
              <div class="level-name">Nâng cao</div>
              <div class="level-description">Thành thạo ngữ pháp</div>
            </div>
          </div>
          <div class="level-stats">
            <div class="level-progress-bar">
              <div class="level-progress-fill" id="advanced-progress"></div>
            </div>
            <div class="level-count" id="advanced-count">0/0</div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Study Tools -->
  <div class="study-tools">
    <div class="tools-header">
      <h3 class="tools-title">🛠️ Công cụ học tập</h3>
      <div class="tools-subtitle">Tùy chọn học tập phù hợp với bạn</div>
    </div>

    <div class="tools-grid">
      <div class="tool-card guided-study">
        <div class="tool-icon">🎯</div>
        <div class="tool-content">
          <h4 class="tool-title">Học có hướng dẫn</h4>
          <p class="tool-description">Theo dõi lộ trình học từng bước một cách có hệ thống</p>
          <button class="tool-button" onclick="startGuidedStudy()">
            <span>Bắt đầu học</span>
            <span class="button-arrow">→</span>
          </button>
        </div>
      </div>

      <div class="tool-card quick-review">
        <div class="tool-icon">⚡</div>
        <div class="tool-content">
          <h4 class="tool-title">Ôn tập nhanh</h4>
          <p class="tool-description">Ôn lại kiến thức đã học trong thời gian ngắn</p>
          <button class="tool-button" onclick="startQuickReview()">
            <span>Ôn tập ngay</span>
            <span class="button-arrow">→</span>
          </button>
        </div>
      </div>

      <div class="tool-card practice-mode">
        <div class="tool-icon">💪</div>
        <div class="tool-content">
          <h4 class="tool-title">Chế độ luyện tập</h4>
          <p class="tool-description">Luyện tập tập trung vào điểm yếu của bạn</p>
          <button class="tool-button" onclick="startPracticeMode()">
            <span>Luyện tập</span>
            <span class="button-arrow">→</span>
          </button>
        </div>
      </div>

      <div class="tool-card assessment">
        <div class="tool-icon">📊</div>
        <div class="tool-content">
          <h4 class="tool-title">Kiểm tra đánh giá</h4>
          <p class="tool-description">Đánh giá năng lực và xác định mức độ hiện tại</p>
          <button class="tool-button" onclick="startAssessment()">
            <span>Kiểm tra</span>
            <span class="button-arrow">→</span>
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Grammar List -->
  <div class="grammar-list-section">
    <div class="list-header">
      <div class="header-content">
        <h3 class="list-title">📋 Danh sách ngữ pháp</h3>
        <div class="list-subtitle">Tất cả các bài ngữ pháp từ cơ bản đến nâng cao</div>
      </div>
      
      <div class="list-controls">
        <div class="filter-controls">
          <select class="level-filter" id="level-filter" onchange="filterGrammar()">
            <option value="all">Tất cả cấp độ</option>
            <option value="beginner">🟢 Cơ bản</option>
            <option value="intermediate">🟡 Trung cấp</option>
            <option value="advanced">🔴 Nâng cao</option>
          </select>
          
          <select class="status-filter" id="status-filter" onchange="filterGrammar()">
            <option value="all">Tất cả trạng thái</option>
            <option value="completed">✅ Đã hoàn thành</option>
            <option value="in-progress">📚 Đang học</option>
            <option value="not-started">⭕ Chưa học</option>
          </select>
        </div>

        <div class="sort-controls">
          <select class="sort-option" id="sort-option" onchange="sortGrammar()">
            <option value="difficulty">Sắp xếp theo độ khó</option>
            <option value="progress">Sắp xếp theo tiến độ</option>
            <option value="accuracy">Sắp xếp theo độ chính xác</option>
            <option value="time">Sắp xếp theo thời gian học</option>
          </select>
        </div>
      </div>
    </div>

    <div class="grammar-grid" id="grammar-grid">
      {grammarList.map((grammar, index) => (
        <div 
          class={`grammar-card level-${grammar.level} ${grammar.completed ? 'completed' : ''}`}
          data-level={grammar.level}
          data-difficulty={grammar.difficulty}
          data-completed={grammar.completed}
          data-accuracy={grammar.accuracy}
        >
          <!-- Card Header -->
          <div class="grammar-header">
            <div class="grammar-status">
              {grammar.completed ? (
                <div class="status-badge completed">
                  <span class="status-icon">✅</span>
                  <span class="status-text">Hoàn thành</span>
                </div>
              ) : (
                <div class="status-badge pending">
                  <span class="status-icon">📚</span>
                  <span class="status-text">Chưa học</span>
                </div>
              )}
            </div>
            
            <div class="grammar-difficulty">
              <div class="difficulty-stars">
                {Array.from({ length: 5 }, (_, i) => (
                  <span class={`star ${i < grammar.difficulty ? 'filled' : ''}`}>⭐</span>
                ))}
              </div>
            </div>
          </div>

          <!-- Card Content -->
          <div class="grammar-content">
            <h4 class="grammar-title">{grammar.title}</h4>
            <div class="grammar-korean">{grammar.korean}</div>
            
            <div class="grammar-meta">
              <div class="meta-item">
                <span class="meta-icon">🎚️</span>
                <span class="meta-text">
                  {grammar.level === 'beginner' ? 'Cơ bản' :
                   grammar.level === 'intermediate' ? 'Trung cấp' : 'Nâng cao'}
                </span>
              </div>
              
              <div class="meta-item">
                <span class="meta-icon">⏱️</span>
                <span class="meta-text">{grammar.estimatedTime} phút</span>
              </div>
              
              {grammar.completed && grammar.accuracy && (
                <div class="meta-item">
                  <span class="meta-icon">🎯</span>
                  <span class="meta-text">{grammar.accuracy}% chính xác</span>
                </div>
              )}
            </div>

            {grammar.lastReview && (
              <div class="last-review">
                <span class="review-icon">🕐</span>
                <span class="review-text">Ôn lại: {grammar.lastReview}</span>
              </div>
            )}
          </div>

          <!-- Card Actions -->
          <div class="grammar-actions">
            {grammar.completed ? (
              <>
                <button class="action-btn review" onclick={`reviewGrammar('${grammar.id}')`}>
                  <span class="btn-icon">🔄</span>
                  <span class="btn-text">Ôn tập</span>
                </button>
                <button class="action-btn quiz" onclick={`takeQuizFor('${grammar.id}')`}>
                  <span class="btn-icon">📝</span>
                  <span class="btn-text">Kiểm tra</span>
                </button>
              </>
            ) : (
              <>
                <button class="action-btn study primary" onclick={`studyGrammar('${grammar.id}')`}>
                  <span class="btn-icon">📚</span>
                  <span class="btn-text">Học ngay</span>
                </button>
                <button class="action-btn preview" onclick={`previewGrammar('${grammar.id}')`}>
                  <span class="btn-icon">👁️</span>
                  <span class="btn-text">Xem trước</span>
                </button>
              </>
            )}
          </div>

          <!-- Progress Indicator -->
          {!grammar.completed && (
            <div class="progress-indicator">
              <div class="progress-track">
                <div class="progress-thumb" style={`left: ${(grammar.difficulty - 1) * 14.28}%`}></div>
              </div>
              <div class="progress-label">Bước {grammar.difficulty}/8</div>
            </div>
          )}
        </div>
      ))}
    </div>

    <!-- Empty State -->
    <div class="empty-state" id="empty-state" style="display: none;">
      <div class="empty-icon">🔍</div>
      <h4 class="empty-title">Không tìm thấy kết quả</h4>
      <p class="empty-description">Thử thay đổi bộ lọc để xem thêm nội dung.</p>
      <button class="empty-action" onclick="clearFilters()">Xóa bộ lọc</button>
    </div>
  </div>

  <!-- Recent Activity -->
  {!compact && (
    <div class="recent-activity">
      <div class="activity-header">
        <h3 class="activity-title">📈 Hoạt động gần đây</h3>
        <button class="view-all-btn" onclick="viewAllActivity()">Xem tất cả</button>
      </div>
      
      <div class="activity-list" id="activity-list">
        <!-- Will be populated by JavaScript -->
        <div class="activity-placeholder">
          <div class="placeholder-icon">⏳</div>
          <div class="placeholder-text">Bắt đầu học để xem hoạt động của bạn!</div>
        </div>
      </div>
    </div>
  )}

  <!-- Study Recommendations -->
  <div class="recommendations">
    <div class="recommendations-header">
      <h3 class="recommendations-title">💡 Gợi ý cho bạn</h3>
    </div>
    
    <div class="recommendations-grid" id="recommendations-grid">
      <!-- Will be populated by JavaScript -->
    </div>
  </div>
</div>

<style>
  .grammar-dashboard {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
    background: #f8fafc;
    min-height: 100vh;
  }

  .grammar-dashboard.compact {
    padding: 1rem;
    background: transparent;
  }

  /* Welcome Section */
  .welcome-section {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border-radius: 20px;
    padding: 3rem;
    margin-bottom: 3rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    position: relative;
    overflow: hidden;
  }

  .welcome-section::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="20" cy="20" r="2" fill="white" opacity="0.1"/><circle cx="80" cy="40" r="1" fill="white" opacity="0.1"/><circle cx="40" cy="80" r="1.5" fill="white" opacity="0.1"/></svg>');
    pointer-events: none;
  }

  .welcome-content {
    flex: 1;
    position: relative;
    z-index: 1;
  }

  .greeting {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 1rem;
    font-size: 1.1rem;
    opacity: 0.9;
  }

  .greeting-icon {
    font-size: 1.5rem;
  }

  .welcome-title {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
    line-height: 1.2;
  }

  .welcome-subtitle {
    font-size: 1.1rem;
    opacity: 0.9;
    line-height: 1.6;
  }

  .quick-actions {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    position: relative;
    z-index: 1;
  }

  .quick-action {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 1rem 1.5rem;
    border: none;
    border-radius: 12px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    min-width: 200px;
  }

  .quick-action.primary {
    background: rgba(255, 255, 255, 0.2);
    color: white;
    border: 2px solid rgba(255, 255, 255, 0.3);
  }

  .quick-action.primary:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: translateY(-2px);
  }

  .quick-action.secondary, .quick-action.tertiary {
    background: rgba(255, 255, 255, 0.1);
    color: white;
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .quick-action.secondary:hover, .quick-action.tertiary:hover {
    background: rgba(255, 255, 255, 0.2);
  }

  .action-icon {
    font-size: 1.2rem;
  }

  /* Progress Overview */
  .progress-overview {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
    margin-bottom: 3rem;
  }

  .overview-card {
    background: white;
    border-radius: 16px;
    padding: 2rem;
    border: 1px solid #e2e8f0;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.05);
  }

  .card-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
  }

  .card-title {
    color: #1f2937;
    font-size: 1.2rem;
    font-weight: 700;
  }

  .progress-percentage {
    font-size: 2rem;
    font-weight: 700;
    color: #3b82f6;
  }

  /* Progress Circle */
  .progress-visual {
    display: flex;
    align-items: center;
    gap: 2rem;
  }

  .progress-circle {
    position: relative;
    width: 120px;
    height: 120px;
  }

  .progress-circle svg {
    width: 100%;
    height: 100%;
    transform: rotate(-90deg);
  }

  .progress-background {
    fill: none;
    stroke: #e2e8f0;
    stroke-width: 8;
  }

  .progress-bar {
    fill: none;
    stroke: #3b82f6;
    stroke-width: 8;
    stroke-linecap: round;
    stroke-dasharray: 283;
    stroke-dashoffset: 283;
    transition: stroke-dashoffset 1s ease;
  }

  .progress-text {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
  }

  .completed-count {
    font-size: 1.5rem;
    font-weight: 700;
    color: #1f2937;
  }

  .total-count {
    font-size: 1rem;
    color: #6b7280;
  }

  .progress-stats {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .stat-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .stat-icon {
    font-size: 1.5rem;
    width: 40px;
    text-align: center;
  }

  .stat-value {
    font-size: 1.2rem;
    font-weight: 700;
    color: #1f2937;
  }

  .stat-label {
    font-size: 0.8rem;
    color: #6b7280;
  }

  /* Level Breakdown */
  .level-progress {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .level-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    background: #f8fafc;
    border-radius: 10px;
    border: 1px solid #e2e8f0;
  }

  .level-info {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .level-icon {
    font-size: 1.5rem;
  }

  .level-name {
    font-weight: 600;
    color: #1f2937;
  }

  .level-description {
    font-size: 0.8rem;
    color: #6b7280;
  }

  .level-stats {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .level-progress-bar {
    width: 100px;
    height: 6px;
    background: #e2e8f0;
    border-radius: 3px;
    overflow: hidden;
  }

  .level-progress-fill {
    height: 100%;
    background: #3b82f6;
    border-radius: 3px;
    transition: width 0.5s ease;
    width: 0%;
  }

  .level-count {
    font-size: 0.9rem;
    font-weight: 600;
    color: #6b7280;
    min-width: 40px;
  }

  /* Study Tools */
  .study-tools {
    margin-bottom: 3rem;
  }

  .tools-header {
    text-align: center;
    margin-bottom: 2rem;
  }

  .tools-title {
    color: #1f2937;
    font-size: 1.5rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
  }

  .tools-subtitle {
    color: #6b7280;
    font-size: 1rem;
  }

  .tools-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 1.5rem;
  }

  .tool-card {
    background: white;
    border-radius: 16px;
    padding: 2rem;
    border: 1px solid #e2e8f0;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.05);
    text-align: center;
    transition: all 0.3s ease;
  }

  .tool-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
  }

  .tool-icon {
    font-size: 3rem;
    margin-bottom: 1rem;
  }

  .tool-title {
    color: #1f2937;
    font-size: 1.2rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
  }

  .tool-description {
    color: #6b7280;
    margin-bottom: 1.5rem;
    line-height: 1.6;
  }

  .tool-button {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    width: 100%;
    padding: 0.75rem 1.5rem;
    background: #3b82f6;
    color: white;
    border: none;
    border-radius: 10px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .tool-button:hover {
    background: #2563eb;
  }

  .button-arrow {
    transition: transform 0.3s ease;
  }

  .tool-button:hover .button-arrow {
    transform: translateX(4px);
  }

  /* Grammar List */
  .grammar-list-section {
    margin-bottom: 3rem;
  }

  .list-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    flex-wrap: wrap;
    gap: 1rem;
  }

  .list-title {
    color: #1f2937;
    font-size: 1.5rem;
    font-weight: 700;
    margin-bottom: 0.25rem;
  }

  .list-subtitle {
    color: #6b7280;
    font-size: 0.9rem;
  }

  .list-controls {
    display: flex;
    gap: 1rem;
    align-items: center;
    flex-wrap: wrap;
  }

  .filter-controls, .sort-controls {
    display: flex;
    gap: 0.5rem;
  }

  .level-filter, .status-filter, .sort-option {
    padding: 0.5rem 1rem;
    border: 1px solid #d1d5db;
    border-radius: 8px;
    background: white;
    font-size: 0.9rem;
    cursor: pointer;
  }

  .level-filter:focus, .status-filter:focus, .sort-option:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  /* Grammar Grid */
  .grammar-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 1.5rem;
  }

  .grammar-card {
    background: white;
    border-radius: 16px;
    padding: 1.5rem;
    border: 1px solid #e2e8f0;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.05);
    transition: all 0.3s ease;
    position: relative;
  }

  .grammar-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
  }

  .grammar-card.completed {
    border-left: 4px solid #22c55e;
  }

  .grammar-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
  }

  .status-badge {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 600;
  }

  .status-badge.completed {
    background: #d1fae5;
    color: #065f46;
  }

  .status-badge.pending {
    background: #dbeafe;
    color: #1e40af;
  }

  .difficulty-stars {
    display: flex;
    gap: 0.1rem;
  }

  .star {
    font-size: 0.8rem;
    opacity: 0.3;
  }

  .star.filled {
    opacity: 1;
  }

  .grammar-title {
    color: #1f2937;
    font-size: 1.1rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
  }

  .grammar-korean {
    color: #6b7280;
    font-size: 0.9rem;
    margin-bottom: 1rem;
    font-style: italic;
  }

  .grammar-meta {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    margin-bottom: 1rem;
  }

  .meta-item {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    font-size: 0.8rem;
    color: #6b7280;
  }

  .last-review {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.8rem;
    color: #9ca3af;
    margin-bottom: 1rem;
  }

  .grammar-actions {
    display: flex;
    gap: 0.75rem;
    margin-bottom: 1rem;
  }

  .action-btn {
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    padding: 0.75rem;
    border: none;
    border-radius: 8px;
    font-size: 0.9rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .action-btn.primary {
    background: #3b82f6;
    color: white;
  }

  .action-btn.primary:hover {
    background: #2563eb;
  }

  .action-btn.review {
    background: #f59e0b;
    color: white;
  }

  .action-btn.review:hover {
    background: #d97706;
  }

  .action-btn.quiz {
    background: #10b981;
    color: white;
  }

  .action-btn.quiz:hover {
    background: #059669;
  }

  .action-btn.preview {
    background: #f3f4f6;
    color: #374151;
    border: 1px solid #d1d5db;
  }

  .action-btn.preview:hover {
    background: #e5e7eb;
  }

  .progress-indicator {
    border-top: 1px solid #e2e8f0;
    padding-top: 1rem;
  }

  .progress-track {
    width: 100%;
    height: 4px;
    background: #e2e8f0;
    border-radius: 2px;
    position: relative;
    margin-bottom: 0.5rem;
  }

  .progress-thumb {
    position: absolute;
    top: -2px;
    width: 8px;
    height: 8px;
    background: #3b82f6;
    border-radius: 50%;
    transition: left 0.3s ease;
  }

  .progress-label {
    text-align: center;
    font-size: 0.8rem;
    color: #6b7280;
    font-weight: 600;
  }

  /* Empty State */
  .empty-state {
    text-align: center;
    padding: 3rem;
    color: #6b7280;
  }

  .empty-icon {
    font-size: 4rem;
    margin-bottom: 1rem;
  }

  .empty-title {
    color: #374151;
    margin-bottom: 0.5rem;
  }

  .empty-description {
    margin-bottom: 1.5rem;
  }

  .empty-action {
    background: #3b82f6;
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    font-weight: 600;
    cursor: pointer;
  }

  /* Recent Activity */
  .recent-activity {
    margin-bottom: 3rem;
  }

  .activity-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
  }

  .activity-title {
    color: #1f2937;
    font-size: 1.2rem;
    font-weight: 700;
  }

  .view-all-btn {
    color: #3b82f6;
    background: none;
    border: none;
    font-weight: 600;
    cursor: pointer;
    text-decoration: underline;
  }

  .activity-placeholder {
    text-align: center;
    padding: 2rem;
    background: white;
    border-radius: 12px;
    border: 1px solid #e2e8f0;
  }

  .placeholder-icon {
    font-size: 2rem;
    margin-bottom: 0.5rem;
  }

  .placeholder-text {
    color: #6b7280;
  }

  /* Recommendations */
  .recommendations {
    margin-bottom: 2rem;
  }

  .recommendations-title {
    color: #1f2937;
    font-size: 1.2rem;
    font-weight: 700;
    margin-bottom: 1rem;
  }

  .recommendations-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1rem;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .grammar-dashboard {
      padding: 1rem;
    }

    .welcome-section {
      flex-direction: column;
      text-align: center;
      gap: 2rem;
      padding: 2rem;
    }

    .welcome-title {
      font-size: 2rem;
    }

    .quick-actions {
      flex-direction: row;
      flex-wrap: wrap;
      justify-content: center;
    }

    .progress-overview {
      grid-template-columns: 1fr;
    }

    .progress-visual {
      flex-direction: column;
      align-items: center;
    }

    .tools-grid {
      grid-template-columns: 1fr;
    }

    .list-header {
      flex-direction: column;
      align-items: stretch;
    }

    .list-controls {
      justify-content: center;
    }

    .filter-controls, .sort-controls {
      flex-direction: column;
      width: 100%;
    }

    .grammar-grid {
      grid-template-columns: 1fr;
    }

    .grammar-actions {
      flex-direction: column;
    }

    .level-progress-bar {
      width: 60px;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const dashboard = document.querySelector('.grammar-dashboard');
    if (!dashboard) return;

    // Initialize dashboard
    initializeDashboard();
    loadProgressData();
    generateRecommendations();
    loadRecentActivity();

    function initializeDashboard() {
      // Set up event listeners
      setupEventListeners();
      
      // Load user progress from localStorage
      updateProgressDisplay();
      
      // Update level breakdown
      updateLevelBreakdown();
    }

    function setupEventListeners() {
      // Filter and sort listeners are already set up via onchange attributes
      
      // Listen for progress updates
      window.addEventListener('storage', function(e) {
        if (e.key === 'completedGrammars' || e.key === 'grammarProgress') {
          updateProgressDisplay();
          updateLevelBreakdown();
        }
      });
    }

    function loadProgressData() {
      const progress = JSON.parse(localStorage.getItem('grammarProgress') || '{}');
      const completedGrammars = JSON.parse(localStorage.getItem('completedGrammars') || '[]');
      
      // Update UI elements
      const completedCount = completedGrammars.length;
      const totalCount = {grammarList.length};
      const percentage = Math.round((completedCount / totalCount) * 100);
      
      // Update progress circle
      updateProgressCircle(percentage);
      
      // Update stats
      updateStats(progress, completedCount);
    }

    function updateProgressCircle(percentage) {
      const progressBar = document.getElementById('progress-bar');
      const progressText = document.getElementById('overall-percentage');
      const completedCountEl = document.getElementById('completed-count');
      
      if (progressBar) {
        const circumference = 2 * Math.PI * 45; // radius = 45
        const offset = circumference - (percentage / 100) * circumference;
        progressBar.style.strokeDashoffset = offset;
      }
      
      if (progressText) {
        progressText.textContent = percentage + '%';
      }
      
      if (completedCountEl) {
        const completedGrammars = JSON.parse(localStorage.getItem('completedGrammars') || '[]');
        completedCountEl.textContent = completedGrammars.length;
      }
    }

    function updateStats(progress, completedCount) {
      // Update accuracy average
      const accuracyEl = document.getElementById('accuracy-average');
      if (accuracyEl) {
        const quizHistory = JSON.parse(localStorage.getItem('quizHistory') || '[]');
        const averageAccuracy = quizHistory.length > 0 ? 
          Math.round(quizHistory.reduce((sum, quiz) => sum + quiz.percentage, 0) / quizHistory.length) : 0;
        accuracyEl.textContent = averageAccuracy + '%';
      }
      
      // Update study time
      const studyTimeEl = document.getElementById('study-time');
      if (studyTimeEl && progress.totalStudyTime) {
        const hours = Math.floor(progress.totalStudyTime / 60);
        const minutes = progress.totalStudyTime % 60;
        studyTimeEl.textContent = hours > 0 ? `${hours}h ${minutes}m` : `${minutes}m`;
      }
      
      // Update streak
      const streakEl = document.getElementById('current-streak');
      if (streakEl) {
        streakEl.textContent = progress.currentStreak || 0;
      }
    }

    function updateLevelBreakdown() {
      const completedGrammars = JSON.parse(localStorage.getItem('completedGrammars') || '[]');
      const grammarList = {JSON.stringify(grammarList)};
      
      const levels = ['beginner', 'intermediate', 'advanced'];
      
      levels.forEach(level => {
        const levelGrammars = grammarList.filter(g => g.level === level);
        const completedInLevel = levelGrammars.filter(g => completedGrammars.includes(g.id));
        
        const progressEl = document.getElementById(`${level}-progress`);
        const countEl = document.getElementById(`${level}-count`);
        
        if (progressEl) {
          const percentage = levelGrammars.length > 0 ? 
            (completedInLevel.length / levelGrammars.length) * 100 : 0;
          progressEl.style.width = percentage + '%';
        }
        
        if (countEl) {
          countEl.textContent = `${completedInLevel.length}/${levelGrammars.length}`;
        }
      });
    }

    function generateRecommendations() {
      const recommendationsGrid = document.getElementById('recommendations-grid');
      if (!recommendationsGrid) return;
      
      const progress = JSON.parse(localStorage.getItem('grammarProgress') || '{}');
      const completedGrammars = JSON.parse(localStorage.getItem('completedGrammars') || '[]');
      const quizHistory = JSON.parse(localStorage.getItem('quizHistory') || '[]');
      
      let recommendations = [];
      
      // Recommendation 1: Next lesson to study
      const grammarList = {JSON.stringify(grammarList)};
      const nextGrammar = grammarList.find(g => !completedGrammars.includes(g.id));
      
      if (nextGrammar) {
        recommendations.push({
          type: 'next-lesson',
          title: '📚 Bài học tiếp theo',
          description: `Tiếp tục với "${nextGrammar.title}"`,
          action: 'Học ngay',
          onclick: `studyGrammar('${nextGrammar.id}')`
        });
      }
      
      // Recommendation 2: Review weak areas
      const weakQuizzes = quizHistory.filter(q => q.percentage < 70);
      if (weakQuizzes.length > 0) {
        const weakGrammar = weakQuizzes[weakQuizzes.length - 1];
        recommendations.push({
          type: 'review',
          title: '🔄 Ôn tập cần thiết',
          description: `Cải thiện điểm số cho "${weakGrammar.grammarId}"`,
          action: 'Ôn tập',
          onclick: `reviewGrammar('${weakGrammar.grammarId}')`
        });
      }
      
      // Recommendation 3: Take assessment
      if (completedGrammars.length >= 3 && completedGrammars.length % 3 === 0) {
        recommendations.push({
          type: 'assessment',
          title: '📊 Kiểm tra tổng hợp',
          description: 'Đánh giá kiến thức đã học',
          action: 'Kiểm tra',
          onclick: 'startAssessment()'
        });
      }
      
      // Recommendation 4: Daily goal
      if (!progress.lastStudyDate || progress.lastStudyDate !== new Date().toISOString().split('T')[0]) {
        recommendations.push({
          type: 'daily-goal',
          title: '🎯 Mục tiêu hằng ngày',
          description: 'Duy trì chuỗi học tập của bạn',
          action: 'Học ngay',
          onclick: 'continueStudying()'
        });
      }
      
      // Render recommendations
      recommendationsGrid.innerHTML = recommendations.map(rec => `
        <div class="recommendation-card ${rec.type}">
          <div class="rec-content">
            <h4 class="rec-title">${rec.title}</h4>
            <p class="rec-description">${rec.description}</p>
          </div>
          <button class="rec-action" onclick="${rec.onclick}">
            ${rec.action}
          </button>
        </div>
      `).join('');
    }

    function loadRecentActivity() {
      const activityList = document.getElementById('activity-list');
      if (!activityList) return;
      
      const quizHistory = JSON.parse(localStorage.getItem('quizHistory') || '[]');
      const recentQuizzes = quizHistory.slice(-5).reverse();
      
      if (recentQuizzes.length === 0) return;
      
      const activities = recentQuizzes.map(quiz => {
        const date = new Date(quiz.date).toLocaleDateString('vi-VN');
        const time = new Date(quiz.date).toLocaleTimeString('vi-VN', { 
          hour: '2-digit', 
          minute: '2-digit' 
        });
        
        return `
          <div class="activity-item">
            <div class="activity-icon">
              ${quiz.percentage >= 90 ? '🏆' : 
                quiz.percentage >= 70 ? '✅' : '📚'}
            </div>
            <div class="activity-content">
              <div class="activity-text">
                ${quiz.quizType === 'mixed' ? 'Kiểm tra tổng hợp' : 'Bài kiểm tra'} 
                "${quiz.grammarId}" - ${quiz.percentage}%
              </div>
              <div class="activity-time">${date} ${time}</div>
            </div>
          </div>
        `;
      }).join('');
      
      activityList.innerHTML = activities;
    }

    // Global functions for button actions
    window.continueStudying = function() {
      const completedGrammars = JSON.parse(localStorage.getItem('completedGrammars') || '[]');
      const grammarList = {JSON.stringify(grammarList)};
      const nextGrammar = grammarList.find(g => !completedGrammars.includes(g.id));
      
      if (nextGrammar) {
        window.location.href = `/documents/${nextGrammar.id}`;
      } else {
        window.location.href = '/ngu-phap';
      }
    };

    window.takeQuiz = function() {
      window.location.href = '/ngu-phap?tab=quiz';
    };

    window.reviewProgress = function() {
      window.location.href = '/ngu-phap?tab=progress';
    };

    window.startGuidedStudy = function() {
      localStorage.setItem('studyMode', 'guided');
      continueStudying();
    };

    window.startQuickReview = function() {
      const completedGrammars = JSON.parse(localStorage.getItem('completedGrammars') || '[]');
      if (completedGrammars.length > 0) {
        const randomGrammar = completedGrammars[Math.floor(Math.random() * completedGrammars.length)];
        window.location.href = `/documents/${randomGrammar}?mode=review`;
      } else {
        alert('Bạn chưa hoàn thành bài nào để ôn tập!');
      }
    };

    window.startPracticeMode = function() {
      localStorage.setItem('studyMode', 'practice');
      window.location.href = '/ngu-phap?tab=practice';
    };

    window.startAssessment = function() {
      window.location.href = '/ngu-phap?tab=assessment';
    };

    window.studyGrammar = function(grammarId) {
      window.location.href = `/documents/${grammarId}`;
    };

    window.reviewGrammar = function(grammarId) {
      window.location.href = `/documents/${grammarId}?mode=review`;
    };

    window.takeQuizFor = function(grammarId) {
      window.location.href = `/documents/${grammarId}?tab=quiz`;
    };

    window.previewGrammar = function(grammarId) {
      window.location.href = `/documents/${grammarId}?mode=preview`;
    };

    window.filterGrammar = function() {
      const levelFilter = document.getElementById('level-filter').value;
      const statusFilter = document.getElementById('status-filter').value;
      const grammarCards = document.querySelectorAll('.grammar-card');
      const emptyState = document.getElementById('empty-state');
      
      let visibleCount = 0;
      
      grammarCards.forEach(card => {
        let visible = true;
        
        // Level filter
        if (levelFilter !== 'all' && !card.classList.contains(`level-${levelFilter}`)) {
          visible = false;
        }
        
        // Status filter
        if (statusFilter !== 'all') {
          const isCompleted = card.dataset.completed === 'true';
          if (statusFilter === 'completed' && !isCompleted) visible = false;
          if (statusFilter === 'not-started' && isCompleted) visible = false;
        }
        
        if (visible) {
          card.style.display = 'block';
          visibleCount++;
        } else {
          card.style.display = 'none';
        }
      });
      
      // Show/hide empty state
      if (emptyState) {
        emptyState.style.display = visibleCount === 0 ? 'block' : 'none';
      }
    };

    window.sortGrammar = function() {
      const sortOption = document.getElementById('sort-option').value;
      const grammarGrid = document.getElementById('grammar-grid');
      const cards = Array.from(grammarGrid.children).filter(el => el.classList.contains('grammar-card'));
      
      cards.sort((a, b) => {
        switch (sortOption) {
          case 'difficulty':
            return parseInt(a.dataset.difficulty) - parseInt(b.dataset.difficulty);
          case 'progress':
            const aCompleted = a.dataset.completed === 'true' ? 1 : 0;
            const bCompleted = b.dataset.completed === 'true' ? 1 : 0;
            return bCompleted - aCompleted;
          case 'accuracy':
            return (parseFloat(b.dataset.accuracy) || 0) - (parseFloat(a.dataset.accuracy) || 0);
          default:
            return 0;
        }
      });
      
      // Re-append sorted cards
      cards.forEach(card => grammarGrid.appendChild(card));
    };

    window.clearFilters = function() {
      document.getElementById('level-filter').value = 'all';
      document.getElementById('status-filter').value = 'all';
      filterGrammar();
    };

    window.viewAllActivity = function() {
      window.location.href = '/ngu-phap?tab=activity';
    };
  });
</script>
