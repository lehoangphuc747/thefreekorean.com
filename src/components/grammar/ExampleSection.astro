---
export interface Props {
  examples: {
    dialogue?: {
      title: string;
      items: Array<{
        korean: string;
        vietnamese: string;
        context?: string;
        audio?: string;
      }>;
    };
    sentences?: {
      title: string;
      items: Array<{
        korean: string;
        vietnamese: string;
        note?: string;
        audio?: string;
        highlighted?: string; // Grammar pattern to highlight
      }>;
    };
  };
  grammarPattern?: string;
  showVietnamese?: boolean;
}

const { examples, grammarPattern, showVietnamese = true } = Astro.props;

// Determine which tabs to show
const hasDialogue = examples.dialogue && examples.dialogue.items.length > 0;
const hasSentences = examples.sentences && examples.sentences.items.length > 0;

// Default to dialogue if both exist, sentences if only sentences
const defaultTab = hasDialogue ? 'dialogue' : 'sentences';

// Function to highlight grammar patterns in text - server side
function highlightPattern(text: string, pattern?: string): string {
  if (!pattern) return text;
  
  try {
    // Escape special regex characters
    const escapedPattern = pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    const regex = new RegExp(escapedPattern, 'gi');
    return text.replace(regex, '<mark class="bg-yellow-200 text-yellow-800 px-1 rounded font-semibold">$&</mark>');
  } catch (error) {
    // If regex fails, return original text
    return text;
  }
}
---

<section class="example-section bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
  <!-- Section Header -->
  <div class="bg-gradient-to-r from-blue-50 to-indigo-50 px-6 py-4 border-b border-gray-200">
    <h3 class="text-xl font-semibold text-gray-800 flex items-center">
      üí¨ V√≠ d·ª• v√† ·ª®ng d·ª•ng
      {grammarPattern && (
        <span class="ml-3 px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm font-mono">
          {grammarPattern}
        </span>
      )}
    </h3>
  </div>

  {(hasDialogue || hasSentences) ? (
    <div class="p-6">
      <!-- Tab Navigation -->
      {(hasDialogue && hasSentences) && (
        <div class="flex space-x-1 mb-6 bg-gray-100 p-1 rounded-lg">
          <button 
            class="tab-btn flex-1 py-2 px-4 text-sm font-medium rounded-md transition-all duration-200 data-[active=true]:bg-white data-[active=true]:text-blue-600 data-[active=true]:shadow-sm text-gray-600 hover:text-gray-800"
            data-tab="dialogue"
            data-active={defaultTab === 'dialogue'}
          >
            üó£Ô∏è ƒê·ªëi tho·∫°i
          </button>
          <button 
            class="tab-btn flex-1 py-2 px-4 text-sm font-medium rounded-md transition-all duration-200 data-[active=true]:bg-white data-[active=true]:text-blue-600 data-[active=true]:shadow-sm text-gray-600 hover:text-gray-800"
            data-tab="sentences"
            data-active={defaultTab === 'sentences'}
          >
            üìù C√¢u v√≠ d·ª•
          </button>
        </div>
      )}

      <!-- Dialogue Tab Content -->
      {hasDialogue && (
        <div 
          class="tab-content" 
          data-tab="dialogue"
          style={defaultTab !== 'dialogue' ? 'display: none;' : ''}
        >
          <div class="space-y-4">
            {examples.dialogue!.items.map((item, index) => (
              <div class="dialogue-item bg-gradient-to-r from-green-50 to-emerald-50 rounded-lg p-4 border-l-4 border-green-400">
                <div class="flex items-start space-x-3">
                  <div class="flex-shrink-0 w-8 h-8 bg-green-500 text-white rounded-full flex items-center justify-center text-sm font-bold">
                    {index + 1}
                  </div>
                  <div class="flex-1 space-y-2">
                    <!-- Korean Text -->
                    <div class="korean-text text-lg font-medium text-gray-800 leading-relaxed">
                      <span set:html={highlightPattern(item.korean, grammarPattern)} />
                    </div>
                    
                    <!-- Vietnamese Translation -->
                    <div class="vietnamese-text text-gray-600 italic" style={!showVietnamese ? 'display: none;' : ''}>
                      {item.vietnamese}
                    </div>
                    
                    <!-- Context -->
                    {item.context && (
                      <div class="context text-sm text-gray-500 bg-white bg-opacity-50 rounded px-2 py-1">
                        üí° {item.context}
                      </div>
                    )}
                    
                    <!-- Audio Button -->
                    {item.audio && (
                      <div class="audio-control">
                        <button class="audio-btn inline-flex items-center space-x-1 text-blue-600 hover:text-blue-700 text-sm font-medium">
                          <span class="audio-icon">üîä</span>
                          <span>Nghe ph√°t √¢m</span>
                        </button>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      <!-- Sentences Tab Content -->
      {hasSentences && (
        <div 
          class="tab-content" 
          data-tab="sentences"
          style={defaultTab !== 'sentences' ? 'display: none;' : ''}
        >
          <div class="grid gap-4">
            {examples.sentences!.items.map((item, index) => (
              <div class="sentence-item bg-gradient-to-r from-blue-50 to-cyan-50 rounded-lg p-4 border-l-4 border-blue-400">
                <div class="space-y-2">
                  <div class="flex items-start space-x-3">
                    <div class="flex-shrink-0 w-6 h-6 bg-blue-500 text-white rounded-full flex items-center justify-center text-xs font-bold">
                      {index + 1}
                    </div>
                    
                    <div class="flex-1 space-y-2">
                      <!-- Korean Sentence -->
                      <div class="korean-text text-lg font-medium text-gray-800 leading-relaxed">
                        <span set:html={highlightPattern(item.korean, grammarPattern)} />
                      </div>
                      
                      <!-- Vietnamese Translation -->
                      <div class="vietnamese-text text-gray-600 italic" style={!showVietnamese ? 'display: none;' : ''}>
                        {item.vietnamese}
                      </div>
                      
                      <!-- Grammar Note -->
                      {item.note && (
                        <div class="note text-sm text-purple-700 bg-purple-50 rounded px-2 py-1">
                          üìù <strong>L∆∞u √Ω:</strong> {item.note}
                        </div>
                      )}
                      
                      <!-- Audio Button -->
                      {item.audio && (
                        <div class="audio-control">
                          <button class="audio-btn inline-flex items-center space-x-1 text-blue-600 hover:text-blue-700 text-sm font-medium">
                            <span class="audio-icon">üîä</span>
                            <span>Nghe ph√°t √¢m</span>
                          </button>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  ) : (
    <!-- Empty State -->
    <div class="p-8 text-center text-gray-500">
      <div class="text-4xl mb-2">üìù</div>
      <p class="text-lg font-medium">Ch∆∞a c√≥ v√≠ d·ª•</p>
      <p class="text-sm">V√≠ d·ª• s·∫Ω ƒë∆∞·ª£c th√™m v√†o s·ªõm</p>
    </div>
  )}
</section>

<style>
  /* Korean text styling */
  .korean-text {
    font-family: 'Noto Sans KR', 'Malgun Gothic', 'ÎßëÏùÄ Í≥†Îîï', 'Apple SD Gothic Neo', sans-serif;
    word-break: keep-all;
    line-height: 1.6;
  }

  /* Highlighted grammar patterns */
  .korean-text mark {
    font-weight: 600;
    border-radius: 0.25rem;
    padding: 0.125rem 0.25rem;
  }

  /* Tab transitions */
  .tab-content {
    animation: fadeIn 0.3s ease-in-out;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Audio button hover effect */
  .audio-btn:hover .audio-icon {
    transform: scale(1.1);
    transition: transform 0.2s ease;
  }

  /* Tab button active state */
  .tab-btn[data-active="true"] {
    background-color: white;
    color: #2563eb;
    box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1);
  }

  /* Language toggle active state */
  .lang-toggle[data-active="true"] {
    background-color: white;
    color: #1f2937;
    box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1);
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .tab-btn {
      font-size: 0.875rem;
      padding: 0.5rem 0.75rem;
    }
    
    .lang-toggle {
      font-size: 0.75rem;
      padding: 0.5rem 0.75rem;
    }

    .dialogue-item,
    .sentence-item {
      padding: 1rem;
    }
  }
</style>

<script>
  // Tab switching functionality
  function initializeTabs() {
    const tabButtons = document.querySelectorAll('.tab-btn');
    const tabContents = document.querySelectorAll('.tab-content');

    tabButtons.forEach(button => {
      button.addEventListener('click', () => {
        const targetTab = button.getAttribute('data-tab');
        
        // Update button states
        tabButtons.forEach(btn => {
          btn.setAttribute('data-active', 'false');
        });
        button.setAttribute('data-active', 'true');
        
        // Show/hide tab contents
        tabContents.forEach(content => {
          if (content.getAttribute('data-tab') === targetTab) {
            content.style.display = 'block';
          } else {
            content.style.display = 'none';
          }
        });
      });
    });
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    initializeTabs();
  });

  // Re-initialize on navigation (for SPA-like behavior)
  document.addEventListener('astro:page-load', () => {
    initializeTabs();
  });
</script>
