---
export interface Props {
  grammarList: Array<{
    slug: string;
    title: string;
    date: string;
    category: string;
    level: string;
    grammarPattern: string;
    meaning: string;
    description: string;
    type: string;
    tags: string[];
    difficulty: number;
  }>;
  class?: string;
}

const { grammarList, class: className = '' } = Astro.props;

// Tính tổng số ngữ pháp và danh sách cấp độ duy nhất
const totalCount = grammarList.length;
const levels = [...new Set(grammarList.map((item) => item.level))];

// Map cấp độ sang tiếng Việt
const levelMapping = {
  Beginner: 'Sơ cấp',
  Intermediate: 'Trung cấp',
  Advanced: 'Cao cấp',
};

const getGrammarCount = (level?: string) => {
  if (!level) return totalCount;
  return grammarList.filter((g) => g.level === level).length;
};
---

<div class={`grammar-filter-section ${className}`}>
  <div class="rounded-3xl border border-slate-200 bg-gradient-to-br from-white to-slate-50/50 p-5 shadow-md shadow-slate-900/5 md:p-7">
    <div class="flex flex-col gap-6">
      <!-- Stats Badge -->
      <div class="flex items-center justify-center">
        <div class="inline-flex items-center gap-2 rounded-full border border-slate-200 bg-white px-4 py-2 text-sm font-semibold text-slate-600 shadow-sm">
          <span class="inline-flex h-7 w-7 items-center justify-center rounded-full bg-slate-100 text-slate-600">
            <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
          </span>
          <span>
            <span id="visible-count" class="text-base font-bold text-slate-900">{totalCount}</span> / {totalCount} ngữ pháp
          </span>
        </div>
      </div>

      <!-- Main Filter Content -->
      <div class="flex flex-col items-center gap-5">
        <!-- Level Buttons - First -->
        <div class="flex flex-col items-center gap-3 w-full">
          <p class="text-xs font-semibold uppercase tracking-[0.35em] text-slate-400">Lọc theo cấp độ</p>
          <div class="flex flex-wrap justify-center gap-2">
            <button
              type="button"
              class="filter-btn level-filter rounded-full border-2 border-slate-200 bg-white px-5 py-2.5 text-sm font-bold text-slate-600 shadow-sm transition-all duration-200 hover:border-slate-400 hover:bg-slate-50 hover:text-slate-800 hover:shadow-md hover:-translate-y-0.5 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-slate-300 active:scale-95"
              data-level=""
              aria-pressed="true"
            >
              Tất cả ({getGrammarCount()})
            </button>
            {levels.map((level) => (
              <button
                type="button"
                class="filter-btn level-filter rounded-full border-2 border-slate-200 bg-white px-5 py-2.5 text-sm font-bold text-slate-600 shadow-sm transition-all duration-200 hover:border-slate-400 hover:bg-slate-50 hover:text-slate-800 hover:shadow-md hover:-translate-y-0.5 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-slate-300 active:scale-95"
                data-level={level}
                aria-pressed="false"
              >
                {levelMapping[level] || level} ({getGrammarCount(level)})
              </button>
            ))}
          </div>
        </div>

        <!-- Search Box - Below -->
        <div class="w-full max-w-2xl">
          <label for="grammar-search" class="mb-2 block text-center text-xs font-semibold uppercase tracking-[0.35em] text-slate-400">
            Tìm kiếm nhanh
          </label>
          <div class="relative group">
            <input
              type="text"
              id="grammar-search"
              placeholder="Nhập cấu trúc, ý nghĩa hoặc tên bài... (Nhấn / để tìm nhanh)"
              class="w-full rounded-2xl border-2 border-slate-200 bg-white px-6 py-4 pl-14 pr-12 text-base font-medium text-slate-700 placeholder:text-slate-400 shadow-lg transition-all duration-200 focus:border-slate-400 focus:shadow-xl focus:ring-4 focus:ring-slate-200/50"
              aria-label="Tìm kiếm ngữ pháp"
              autocomplete="off"
            />
            <div class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-5 text-slate-400 transition-colors group-focus-within:text-slate-600">
              <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </div>
            <button
              type="button"
              id="clear-search"
              class="absolute inset-y-0 right-0 hidden items-center justify-center pr-4 text-slate-400 transition-colors hover:text-slate-600"
              aria-label="Xóa tìm kiếm"
            >
              <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        </div>

        <!-- Clear All Filters Button -->
        <button
          type="button"
          id="clear-filters"
          class="clear-filters-btn inline-flex items-center gap-2 rounded-full border-2 border-red-200 bg-gradient-to-r from-red-50 to-orange-50 px-5 py-2.5 text-sm font-bold text-red-600 shadow-sm transition-all duration-200 hover:border-red-300 hover:from-red-100 hover:to-orange-100 hover:shadow-md hover:scale-105 active:scale-95"
          style="opacity: 0; transform: translateY(-10px); pointer-events: none; display: none;"
          aria-label="Xóa tất cả bộ lọc"
        >
          <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
          </svg>
          Xóa bộ lọc
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const levelFilters = document.querySelectorAll('.level-filter');
    const searchInput = document.getElementById('grammar-search') as HTMLInputElement;
    const clearSearchBtn = document.getElementById('clear-search') as HTMLButtonElement;
    const visibleCount = document.getElementById('visible-count');
    const clearFiltersBtn = document.getElementById('clear-filters');

    let activeLevel = '';
    let searchTerm = '';
    let debounceTimer: number;

    // Get cards from currently visible view only
    function getVisibleCards() {
      const gridView = document.getElementById('grammar-grid-view');
      const listView = document.getElementById('grammar-list-view');
      
      if (listView && !listView.classList.contains('hidden')) {
        return listView.querySelectorAll('.grammar-card');
      } else if (gridView) {
        return gridView.querySelectorAll('.grammar-card');
      }
      
      return document.querySelectorAll('.grammar-card');
    }

    // Debounce function for search optimization
    function debounce(func: () => void, delay: number) {
      return function() {
        clearTimeout(debounceTimer);
        debounceTimer = window.setTimeout(func, delay);
      };
    }

    function updateLevelButtons() {
      // Batch DOM updates for better performance
      requestAnimationFrame(() => {
        levelFilters.forEach((btn) => {
          const level = btn.getAttribute('data-level') || '';
          const isActive = level === activeLevel;

          btn.setAttribute('aria-pressed', isActive ? 'true' : 'false');

          if (isActive) {
            btn.classList.add('bg-slate-900', 'text-white', 'border-slate-900', 'shadow-md');
            btn.classList.remove('bg-white', 'text-slate-600', 'border-slate-200', 'shadow-sm');
          } else {
            btn.classList.remove('bg-slate-900', 'text-white', 'border-slate-900', 'shadow-md');
            btn.classList.add('bg-white', 'text-slate-600', 'border-slate-200', 'shadow-sm');
          }
        });
      });
    }


    function filterGrammar() {
      let visible = 0;
      const grammarCards = getVisibleCards();
      
      // Batch DOM updates with requestAnimationFrame for better performance
      requestAnimationFrame(() => {
        grammarCards.forEach((card) => {
          const cardElement = card as HTMLElement;
          const cardLevel = cardElement.getAttribute('data-level') || '';
          const cardPattern = cardElement.getAttribute('data-pattern') || '';
          const cardMeaning = cardElement.getAttribute('data-meaning') || '';
          const cardTitle = cardElement.getAttribute('data-title') || '';

          let show = true;

          if (activeLevel && cardLevel !== activeLevel) {
            show = false;
          }

          if (searchTerm) {
            const searchLower = searchTerm.toLowerCase();
            const matchPattern = cardPattern.toLowerCase().includes(searchLower);
            const matchMeaning = cardMeaning.toLowerCase().includes(searchLower);
            const matchTitle = cardTitle.toLowerCase().includes(searchLower);

            if (!matchPattern && !matchMeaning && !matchTitle) {
              show = false;
            }
          }

          // Fast show/hide without animation delay
          if (show) {
            cardElement.style.display = 'block';
            cardElement.style.opacity = '1';
            cardElement.style.transform = 'translateY(0)';
            visible++;
          } else {
            cardElement.style.display = 'none';
            cardElement.style.opacity = '0';
          }
        });

        // Update count
        if (visibleCount) {
          visibleCount.textContent = visible.toString();
        }

        // Show/hide clear button with animation
        const hasActiveFilters = activeLevel || searchTerm;
        if (clearFiltersBtn) {
          const btnElement = clearFiltersBtn as HTMLElement;
          
          if (hasActiveFilters) {
            // Show button with animation
            btnElement.style.display = 'inline-flex';
            requestAnimationFrame(() => {
              btnElement.style.opacity = '1';
              btnElement.style.transform = 'translateY(0)';
              btnElement.style.pointerEvents = 'auto';
            });
          } else {
            // Hide button with animation
            btnElement.style.opacity = '0';
            btnElement.style.transform = 'translateY(-10px)';
            btnElement.style.pointerEvents = 'none';
            setTimeout(() => {
              btnElement.style.display = 'none';
            }, 200);
          }
        }

        // Show empty state if needed
        const emptyState = document.getElementById('empty-state');
        if (emptyState) {
          emptyState.style.display = visible === 0 ? 'block' : 'none';
        }
      });
    }

    // Keyboard shortcut: Press "/" to focus search
    document.addEventListener('keydown', (e) => {
      if (e.key === '/' && document.activeElement !== searchInput) {
        e.preventDefault();
        searchInput?.focus();
      }
      // Press Escape to blur search and clear if it has content
      if (e.key === 'Escape' && document.activeElement === searchInput) {
        if (searchInput.value) {
          searchInput.value = '';
          searchTerm = '';
          filterGrammar();
        }
        searchInput.blur();
      }
    });

    // Level filter buttons
    levelFilters.forEach((btn) => {
      btn.addEventListener('click', function () {
        const newLevel = this.getAttribute('data-level') || '';
        
        // Toggle off if clicking active button
        if (activeLevel === newLevel && newLevel !== '') {
          activeLevel = '';
        } else {
          activeLevel = newLevel;
        }
        
        updateLevelButtons();
        filterGrammar();
      });
    });

    // Search input with debounce
    if (searchInput) {
      // Show/hide clear button
      const updateClearButton = () => {
        if (clearSearchBtn) {
          clearSearchBtn.classList.toggle('hidden', !searchInput.value);
        }
      };

      searchInput.addEventListener('input', function () {
        searchTerm = this.value;
        updateClearButton();
        debounce(filterGrammar, 150)();
      });

      // Clear search button
      if (clearSearchBtn) {
        clearSearchBtn.addEventListener('click', () => {
          searchInput.value = '';
          searchTerm = '';
          updateClearButton();
          filterGrammar();
          searchInput.focus();
        });
      }

      updateClearButton();
    }

    // Clear all filters button
    if (clearFiltersBtn) {
      clearFiltersBtn.addEventListener('click', function () {
        // Add pulse animation on click
        const btnElement = this as HTMLElement;
        btnElement.style.transform = 'scale(0.95)';
        
        setTimeout(() => {
          activeLevel = '';
          searchTerm = '';
          if (searchInput) {
            searchInput.value = '';
            if (clearSearchBtn) {
              clearSearchBtn.classList.add('hidden');
            }
          }
          updateLevelButtons();
          filterGrammar();
          
          btnElement.style.transform = 'translateY(0)';
        }, 100);
      });
    }

    // Add fast transition styles to cards
    function initCardTransitions() {
      const grammarCards = getVisibleCards();
      grammarCards.forEach((card) => {
        const cardElement = card as HTMLElement;
        cardElement.style.transition = 'opacity 0.15s ease, transform 0.15s ease';
      });
    }

    // Add transition to clear filters button
    if (clearFiltersBtn) {
      (clearFiltersBtn as HTMLElement).style.transition = 'opacity 0.2s ease, transform 0.2s ease';
    }

    // Listen for view changes
    const viewButtons = document.querySelectorAll('.view-toggle-btn');
    viewButtons.forEach((btn) => {
      btn.addEventListener('click', () => {
        // Use requestAnimationFrame for immediate update
        requestAnimationFrame(() => {
          initCardTransitions();
          filterGrammar();
        });
      });
    });

    initCardTransitions();
    updateLevelButtons();
    filterGrammar();
  });
</script>

<style>
  /* Hover effects for active level buttons */
  .level-filter[aria-pressed="true"]:hover {
    background-color: #1e293b !important; /* slate-800 */
    border-color: #1e293b !important;
    color: #ffffff !important;
    transform: translateY(-2px) !important;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15) !important;
  }
  
  /* Hover effects for inactive level buttons */
  .level-filter[aria-pressed="false"]:hover {
    background-color: #f8fafc !important; /* slate-50 */
    border-color: #94a3b8 !important; /* slate-400 */
    color: #1e293b !important; /* slate-800 */
    transform: translateY(-2px) !important;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1) !important;
  }
</style>

