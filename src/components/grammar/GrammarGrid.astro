---
export interface Props {
  grammarList: Array<{
    slug: string;
    title: string;
    date: string;
    category: string;
    subcategory: string;
    level: string;
    grammarPattern: string;
    meaning: string;
    description: string;
    type: string;
    tags: string[];
    examples: number;
    exercises: number;
    difficulty: number;
    cover?: string;
  }>;
  class?: string;
}

const { grammarList, class: className = '' } = Astro.props;

// Convert levels to Vietnamese
const levelMapping = {
  'Beginner': 'S∆° c·∫•p',
  'Intermediate': 'Trung c·∫•p', 
  'Advanced': 'Cao c·∫•p'
};
---

<div class={`grammar-grid ${className}`}>
  {grammarList.length === 0 ? (
    <!-- Empty State -->
    <div class="no-results-message col-span-full text-center py-16">
      <div class="max-w-md mx-auto">
        <div class="w-24 h-24 mx-auto mb-6 rounded-full bg-gray-100 flex items-center justify-center">
          <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
          </svg>
        </div>
        <h3 class="text-xl font-semibold text-gray-900 mb-2">Kh√¥ng t√¨m th·∫•y ng·ªØ ph√°p n√†o</h3>
        <p class="text-gray-600">
          Kh√¥ng c√≥ ng·ªØ ph√°p n√†o ph√π h·ª£p v·ªõi b·ªô l·ªçc hi·ªán t·∫°i. H√£y th·ª≠ ch·ªçn c·∫•p ƒë·ªô kh√°c ho·∫∑c t√¨m ki·∫øm v·ªõi t·ª´ kh√≥a kh√°c.
        </p>
      </div>
    </div>
  ) : (
    <!-- Grammar Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {grammarList.map(grammar => (
        <a 
          href={`/ngu-phap/${grammar.slug}`}
          class="grammar-card bg-white rounded-xl shadow-md hover:shadow-lg transition-all duration-300 hover:-translate-y-1 cursor-pointer border border-gray-100 block"
          data-level={grammar.level}
          data-subcategory={grammar.subcategory}
          data-tags={grammar.tags.join(',')}
          data-pattern={grammar.grammarPattern}
          data-meaning={grammar.meaning}
          data-title={grammar.title}
        >
          <!-- Card Content -->
          <div class="p-6">
            <div class="flex justify-between items-start mb-3">
              <div class="flex-1">
                <h3 class="text-xl font-bold text-purple-600 mb-1">
                  {grammar.grammarPattern}
                </h3>
                <p class="text-gray-600 font-medium">
                  {grammar.meaning}
                </p>
              </div>
              <div class="flex flex-col gap-1 items-end">
                <span class={`px-2 py-1 text-xs rounded-full font-medium ${
                  grammar.level === 'Beginner' ? 'bg-green-100 text-green-600' :
                  grammar.level === 'Intermediate' ? 'bg-yellow-100 text-yellow-600' :
                  'bg-red-100 text-red-600'
                }`}>
                  {levelMapping[grammar.level] || grammar.level}
                </span>
                <div class="flex gap-1">
                  {Array.from({length: grammar.difficulty}, (_, i) => (
                    <span class="text-yellow-400 text-sm">‚òÖ</span>
                  ))}
                </div>
              </div>
            </div>

            <p class="text-gray-600 text-sm mb-4 line-clamp-2">
              {grammar.description}
            </p>

            <!-- Stats -->
            <div class="flex gap-4 text-sm text-gray-500 mb-4">
              <span class="flex items-center gap-1">
                üí° {grammar.examples} v√≠ d·ª•
              </span>
              <span class="flex items-center gap-1">
                üìù {grammar.exercises} b√†i t·∫≠p
              </span>
            </div>

            <!-- Tags -->
            <div class="flex flex-wrap gap-1">
              {grammar.tags.slice(0, 3).map(tag => (
                <span class="px-2 py-1 text-xs bg-blue-100 text-blue-600 rounded-full">
                  #{tag}
                </span>
              ))}
              {grammar.tags.length > 3 && (
                <span class="px-2 py-1 text-xs bg-gray-100 text-gray-600 rounded-full">
                  +{grammar.tags.length - 3}
                </span>
              )}
            </div>
          </div>
        </a>
      ))}
    </div>
    
    <!-- Empty State for filtered results -->
    <div id="empty-state" class="hidden text-center py-12">
      <div class="text-6xl mb-4">üîç</div>
      <h3 class="text-xl font-medium text-gray-600 mb-2">Kh√¥ng t√¨m th·∫•y ng·ªØ ph√°p n√†o</h3>
      <p class="text-gray-500">H√£y th·ª≠ t√¨m ki·∫øm v·ªõi t·ª´ kh√≥a kh√°c ho·∫∑c b·ªè b·ªõt b·ªô l·ªçc.</p>
    </div>
  )}
</div>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .grammar-grid {
    animation: fadeIn 0.5s ease-in-out;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>
