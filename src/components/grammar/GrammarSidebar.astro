---
import { getCollection } from 'astro:content';

const allGrammar = await getCollection('grammar');
const sortedGrammar = allGrammar.sort((a, b) => {
  const levelOrder = { beginner: 1, intermediate: 2, advanced: 3 };
  if (levelOrder[a.data.level] !== levelOrder[b.data.level]) {
    return levelOrder[a.data.level] - levelOrder[b.data.level];
  }
  return a.data.order - b.data.order;
});

const levelMap = {
  beginner: 'Sơ cấp',
  intermediate: 'Trung cấp',
  advanced: 'Cao cấp'
};

type GrammarEntry = (typeof sortedGrammar)[number];
type LevelKey = keyof typeof levelMap;

const levelKeys: LevelKey[] = ['beginner', 'intermediate', 'advanced'];

const groupedGrammar: Record<LevelKey, GrammarEntry[]> = {
  beginner: [],
  intermediate: [],
  advanced: []
};

sortedGrammar.forEach((entry) => {
  groupedGrammar[entry.data.level as LevelKey].push(entry);
});

const totalCount = sortedGrammar.length;
---

<aside class="grammar-sidebar" id="grammar-sidebar">
  <div class="sidebar-header">
    <div class="sidebar-heading">
      <h2 class="sidebar-title">Ngữ pháp</h2>
      <span class="sidebar-count">{totalCount} mẫu</span>
    </div>

    <a href="/grammar" class="sidebar-back" aria-label="Quay lại">Quay lại</a>

    <button class="sidebar-toggle" id="sidebar-toggle" aria-label="Đóng sidebar">
      <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <line x1="18" y1="6" x2="6" y2="18"/>
        <line x1="6" y1="6" x2="18" y2="18"/>
      </svg>
    </button>
  </div>

  <div class="sidebar-search">
    <label for="sidebar-search-input" class="sr-only">Tìm kiếm ngữ pháp</label>
    <div class="sidebar-search-wrapper">
      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <circle cx="11" cy="11" r="7" />
        <line x1="21" y1="21" x2="16.65" y2="16.65" />
      </svg>
      <input id="sidebar-search-input" type="text" placeholder="Tìm nhanh trong sidebar..." class="flex-1" />
      <button id="sidebar-search-clear" aria-label="Xoá tìm kiếm">
        <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <line x1="18" y1="6" x2="6" y2="18" />
          <line x1="6" y1="6" x2="18" y2="18" />
        </svg>
      </button>
    </div>
  </div>

  <div class="sidebar-content" data-sidebar-list>
    {levelKeys.map((level) => (
      <div class={['level-section', `level-${level}`].join(' ')} data-level-section={level}>
        <div class="level-header">
          <div class="level-heading">
            <div class="level-pill" data-level={level}>{levelMap[level]}</div>
            <span class="level-count">{groupedGrammar[level].length} mẫu</span>
          </div>

          <button class="level-toggle" type="button" data-level-toggle={level} aria-expanded="true">
            <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <polyline points="6 9 12 15 18 9" />
            </svg>
          </button>
        </div>

        <ul class="grammar-list" data-level-list={level}>
          {groupedGrammar[level].map((grammar) => (
            <li>
              <a
                href={`/grammar/${grammar.data.level}/${grammar.slug}`}
                class="grammar-item"
                data-level={grammar.data.level}
                data-slug={grammar.slug}
              >
                <span class="item-title">{grammar.data.title}</span>
                <span class="item-meta">
                  <span class="item-meaning">{grammar.data.meaning}</span>
                  {grammar.data.tags && grammar.data.tags.length > 0 && (
                    <span class="item-tags">
                      {grammar.data.tags.map((tag) => (
                        <span class="item-tag">{tag}</span>
                      ))}
                    </span>
                  )}
                </span>
              </a>
            </li>
          ))}
        </ul>
      </div>
    ))}
  </div>

  <div class="sidebar-empty" data-empty-state hidden>
    <svg width="72" height="72" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
      <path d="M3 7V6a2 2 0 012-2h3.5l1 2H21a2 2 0 012 2v1H3z" />
      <path d="M3 7h20v11a2 2 0 01-2 2H5a2 2 0 01-2-2V7z" />
      <path d="M12 12h5" />
      <path d="M12 16h5" />
      <path d="M7 12h.01" />
      <path d="M7 16h.01" />
    </svg>
    <p data-empty-text>Không tìm thấy ngữ pháp nào phù hợp.</p>
  </div>
</aside>

<style>
  .grammar-sidebar {
    width: 280px;
    background: #ffffff;
    border: 1px solid #e2e8f0;
    border-radius: 16px;
    padding: 1.5rem;
    height: fit-content;
    overflow: hidden;
    position: sticky;
    top: 100px;
    max-height: calc(100vh - 120px);
    z-index: 35;
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    box-shadow: 0 20px 40px rgba(15, 23, 42, 0.05);
  }

  .sidebar-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 0.75rem;
  }

  .sidebar-heading {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .sidebar-title {
    font-size: 1.35rem;
    font-weight: 700;
    color: #0f172a;
    margin: 0;
  }

  .sidebar-count {
    font-size: 0.875rem;
    color: #64748b;
    font-weight: 500;
  }

  .sidebar-toggle {
    display: none;
    background: #eff6ff;
    border: none;
    color: #1d4ed8;
    cursor: pointer;
    padding: 0.4rem;
    border-radius: 10px;
    transition: background-color 0.2s ease, transform 0.2s ease;
  }

  .sidebar-toggle svg {
    display: block;
  }

  .sidebar-toggle:hover {
    background: #dbeafe;
    transform: translateY(-1px);
  }

  .sidebar-back {
    display: none;
    margin-left: auto;
    padding: 0.4rem 0.75rem;
    border: 1px solid #e2e8f0;
    border-radius: 10px;
    color: #1d4ed8;
    text-decoration: none;
    font-size: 0.85rem;
    font-weight: 600;
    background: #ffffff;
    transition: color 0.2s ease, border-color 0.2s ease, background-color 0.2s ease;
  }

  .sidebar-back[hidden] {
    display: none !important;
  }

  .sidebar-back:hover {
    color: #1e40af;
    border-color: #bfdbfe;
    background: #eff6ff;
  }

  .sidebar-search {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .sidebar-search-wrapper {
    position: relative;
    display: flex;
    align-items: center;
    border: 1px solid #e2e8f0;
    border-radius: 12px;
    padding: 0.65rem 0.75rem;
    gap: 0.5rem;
    transition: border-color 0.2s ease, box-shadow 0.2s ease;
    background: #ffffff;
  }

  #sidebar-search-clear {
    position: absolute;
    right: 8px;
    top: 50%;
    transform: translateY(-50%);
    height: 32px;
    width: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #94a3b8;
    opacity: 0.5;
    pointer-events: none;
  }

  #sidebar-search-clear.active {
    color: #dc2626;
    opacity: 1;
    pointer-events: auto;
  }

  #sidebar-search-clear.active:hover {
    color: #b91c1c;
  }

  .sidebar-search-wrapper:focus-within {
    border-color: #3b82f6;
    box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.15);
  }

  .sidebar-search-wrapper svg {
    color: #94a3b8;
  }

  .sidebar-search-wrapper input {
    border: none;
    flex: 1;
    font-size: 0.875rem;
    color: #0f172a;
    outline: none;
  }

  .sidebar-search-wrapper input::placeholder {
    color: #94a3b8;
  }

  .sidebar-search-wrapper button {
    border: none;
    background: transparent;
    color: #94a3b8;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 8px;
    padding: 0.25rem;
    transition: color 0.2s ease, background-color 0.2s ease;
  }

  .sidebar-search-wrapper button:hover {
    color: #1d4ed8;
    background: #eff6ff;
  }

  .sidebar-content {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    overflow-y: auto;
    padding-right: 0.25rem;
    scrollbar-width: thin;
    scrollbar-color: rgba(148, 163, 184, 0.6) transparent;
  }

  .sidebar-content::-webkit-scrollbar {
    width: 6px;
  }

  .sidebar-content::-webkit-scrollbar-thumb {
    background-color: rgba(148, 163, 184, 0.6);
    border-radius: 8px;
  }

  .sidebar-content::-webkit-scrollbar-track {
    background: transparent;
  }

  .level-section {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .level-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 0.75rem;
  }

  .level-heading {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .level-pill {
    display: inline-flex;
    align-items: center;
    gap: 0.4rem;
    border-radius: 999px;
    padding: 0.35rem 0.85rem;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .level-pill[data-level="beginner"] {
    background: rgba(16, 185, 129, 0.12);
    color: #047857;
  }

  .level-pill[data-level="intermediate"] {
    background: rgba(59, 130, 246, 0.12);
    color: #1d4ed8;
  }

  .level-pill[data-level="advanced"] {
    background: rgba(249, 115, 22, 0.12);
    color: #c2410c;
  }

  .level-count {
    font-size: 0.75rem;
    color: #94a3b8;
    font-weight: 600;
  }

  .level-toggle {
    border: none;
    background: #f1f5f9;
    color: #475569;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    border-radius: 10px;
    padding: 0.35rem;
    cursor: pointer;
    transition: transform 0.2s ease, background-color 0.2s ease;
  }

  .level-toggle[aria-expanded="false"] {
    transform: rotate(-90deg);
  }

  .level-toggle:hover {
    background: #e2e8f0;
  }

  .grammar-list {
    list-style: none;
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    gap: 0.35rem;
  }

  .grammar-item {
    display: flex;
    flex-direction: column;
    gap: 0.35rem;
    padding: 0.75rem 1rem;
    color: #1e293b;
    text-decoration: none;
    transition: all 0.25s ease;
    border-radius: 12px;
    border: 1px solid transparent;
    background: rgba(248, 250, 252, 0.7);
  }

  .grammar-item:hover {
    background: #e0f2fe;
    color: #0f172a;
    border-color: rgba(59, 130, 246, 0.3);
    box-shadow: 0 10px 20px rgba(59, 130, 246, 0.08);
    transform: translateX(4px);
  }

  .grammar-item.active {
    background: linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%);
    color: #1e3a8a;
    border-color: rgba(59, 130, 246, 0.6);
    box-shadow: 0 12px 24px rgba(59, 130, 246, 0.18);
  }

  .item-title {
    font-weight: 600;
    font-size: 0.95rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .item-meta {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 0.75rem;
  }

  .item-meaning {
    font-size: 0.8rem;
    color: #64748b;
    font-weight: 500;
  }

  .item-tags {
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
  }

  .item-tag {
    display: inline-flex;
    align-items: center;
    padding: 0.125rem 0.5rem;
    border-radius: 5px;
    font-size: 0.7rem;
    font-weight: 600;
    background: rgba(148, 163, 184, 0.18);
    color: #475569;
  }

  .sidebar-empty {
    border-radius: 16px;
    border: 1px dashed #cbd5f5;
    background: #f8fafc;
    padding: 2rem 1rem;
    text-align: center;
    color: #64748b;
    font-size: 0.9rem;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.75rem;
  }

  .sidebar-empty svg {
    color: #94a3b8;
  }

  @media (max-width: 1024px) {
    .grammar-sidebar {
      position: fixed;
      top: 70px;
      left: -320px;
      width: 320px;
      height: calc(100vh - 70px);
      border-radius: 0;
      padding: 1.5rem;
      transition: left 0.35s ease;
      z-index: 150;
      box-shadow: 0 24px 48px rgba(15, 23, 42, 0.2);
      background: #ffffff;
      backdrop-filter: blur(6px);
    }

    .grammar-sidebar.open {
      left: 0;
    }

    .sidebar-toggle {
      display: inline-flex;
    }

    .sidebar-content {
      overflow-y: auto;
    }
  }

  @media (max-width: 768px) {
    .grammar-sidebar {
      width: 100%;
      left: -100%;
      padding: 1.25rem;
      background: rgba(255, 255, 255, 0.95);
    }

    .grammar-sidebar.open {
      left: 0;
    }
  }

  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  /* Mobile responsive */
  @media (max-width: 1024px) {
    .grammar-sidebar {
      position: fixed;
      top: 70px;
      left: -280px;
      width: 280px;
      height: calc(100vh - 70px);
      border-radius: 0;
      padding: 0;
      transition: left 0.3s ease;
      z-index: 90;
    }

    .grammar-sidebar.open {
      left: 0;
    }

    .sidebar-toggle {
      display: block;
    }

    .sidebar-header {
      padding: 1.5rem 1.5rem 1rem;
      position: sticky;
      top: 0;
      background: white;
      z-index: 10;
    }

    .sidebar-content {
      padding: 1rem 0;
    }

    .level-title {
      margin-left: 1.5rem;
    }

    .grammar-item {
      padding: 0.75rem 1.5rem;
    }
  }

  @media (max-width: 768px) {
    .grammar-sidebar {
      width: 100%;
      left: -100%;
    }

    .grammar-sidebar.open {
      left: 0;
    }
  }

  @media (min-width: 1024px) {
    .sidebar-back {
      display: inline-flex;
      align-items: center;
      gap: 0.375rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const sidebar = document.getElementById('grammar-sidebar');
    if (!sidebar) return;

    const backLink = sidebar.querySelector('.sidebar-back') as HTMLAnchorElement | null;
    if (backLink) {
      const isGrammarList = window.location.pathname === '/grammar';
      backLink.toggleAttribute('hidden', isGrammarList);
    }

    const toggle = document.getElementById('sidebar-toggle');
    const searchInput = document.getElementById('sidebar-search-input') as HTMLInputElement | null;
    const clearButton = document.getElementById('sidebar-search-clear');
    const emptyState = sidebar.querySelector('[data-empty-state]') as HTMLElement | null;
    const emptyText = sidebar.querySelector('[data-empty-text]') as HTMLElement | null;
    const levelSections = Array.from(sidebar.querySelectorAll('[data-level-section]')) as HTMLElement[];
    const actionButtons = Array.from(sidebar.querySelectorAll<HTMLButtonElement>('.sidebar-action'));
    const collapseButtons = Array.from(sidebar.querySelectorAll<HTMLButtonElement>('[data-level-toggle]'));
    const levelReadMoreState = new Map<string, boolean>();

    const highlightActiveItem = () => {
      const currentPath = window.location.pathname;
      const items = Array.from(sidebar.querySelectorAll<HTMLAnchorElement>('.grammar-item'));

      items.forEach((item) => {
        if (item.getAttribute('href') === currentPath) {
          item.classList.add('active');
          item.scrollIntoView({ block: 'nearest' });
        } else {
          item.classList.remove('active');
        }
      });
    };

    const setEmptyState = (hasResult: boolean, text?: string) => {
      if (!emptyState) return;
      emptyState.hidden = hasResult;
      if (!hasResult && emptyText) {
        emptyText.textContent = text || 'Không tìm thấy ngữ pháp nào phù hợp.';
      }
    };

    const filterItems = () => {
      if (!searchInput) return;
      const keyword = searchInput.value.trim().toLowerCase();
      let visibleCount = 0;

      if (clearButton) {
        if (keyword.length > 0) {
          clearButton.classList.add('active');
        } else {
          clearButton.classList.remove('active');
        }
      }

      levelSections.forEach((section) => {
        const level = section.dataset.levelSection || '';
        const list = section.querySelector('[data-level-list]');
        if (!list) return;

        const items = Array.from(list.querySelectorAll<HTMLAnchorElement>('.grammar-item'));
        let levelVisible = 0;

        items.forEach((item) => {
          const title = item.querySelector('.item-title')?.textContent?.toLowerCase() || '';
          const meaning = item.querySelector('.item-meaning')?.textContent?.toLowerCase() || '';
          const tags = Array.from(item.querySelectorAll('.item-tag')).map(tag => tag.textContent?.toLowerCase() || '').join(' ');

          const match = keyword.length === 0 ||
            title.includes(keyword) ||
            meaning.includes(keyword) ||
            tags.includes(keyword);

          item.parentElement?.toggleAttribute('hidden', !match);

          if (match) {
            levelVisible++;
            visibleCount++;
          }
        });

        section.toggleAttribute('hidden', levelVisible === 0);
        const countBadge = section.querySelector('.level-count');
        if (countBadge) {
          countBadge.textContent = `${levelVisible} mẫu`;
        }

        if (keyword.length === 0 && levelReadMoreState.has(level)) {
          section.dataset.collapsed = 'false';
          levelReadMoreState.set(level, false);
        }
      });

      setEmptyState(visibleCount > 0, keyword ? `Không tìm thấy kết quả với từ khóa "${keyword}"` : undefined);
    };

    const collapseLevel = (level: string, collapse: boolean) => {
      const section = sidebar.querySelector<HTMLElement>(`[data-level-section="${level}"]`);
      if (!section) return;
      const list = section.querySelector<HTMLElement>('[data-level-list]');
      const button = section.querySelector<HTMLButtonElement>(`[data-level-toggle="${level}"]`);

      if (collapse) {
        list?.setAttribute('hidden', 'true');
        button?.setAttribute('aria-expanded', 'false');
      } else {
        list?.removeAttribute('hidden');
        button?.setAttribute('aria-expanded', 'true');
      }

      levelReadMoreState.set(level, collapse);
    };

    highlightActiveItem();

    if (toggle) {
      toggle.addEventListener('click', () => {
        sidebar.classList.toggle('open');
      });
    }

    document.addEventListener('click', (event) => {
      if (sidebar.classList.contains('open') && event.target instanceof Node && !sidebar.contains(event.target) && event.target !== toggle) {
        sidebar.classList.remove('open');
      }
    });

    collapseButtons.forEach((button) => {
      button.addEventListener('click', () => {
        const level = button.dataset.levelToggle;
        if (!level) return;
        const currentlyCollapsed = levelReadMoreState.get(level) ?? false;
        collapseLevel(level, !currentlyCollapsed);
      });
    });

    actionButtons.forEach((button) => {
      button.addEventListener('click', () => {
        actionButtons.forEach((btn) => btn.classList.remove('active'));
        button.classList.add('active');

        const action = button.dataset.action;
        switch (action) {
          case 'list':
            setEmptyState(true);
            filterItems();
            break;
          case 'bookmark':
            setEmptyState(false, 'Chức năng bookmark đang được phát triển.');
            break;
          case 'recent':
            setEmptyState(false, 'Chức năng bài học gần đây đang được phát triển.');
            break;
          default:
            break;
        }
      });
    });

    if (searchInput) {
      searchInput.addEventListener('input', filterItems);
      searchInput.addEventListener('keydown', (event) => {
        if (event.key === 'Escape') {
          searchInput.value = '';
          filterItems();
        }
      });
    }

    if (clearButton) {
      clearButton.addEventListener('click', () => {
        if (searchInput) {
          searchInput.value = '';
          searchInput.focus();
        }
        clearButton.classList.remove('active');
        filterItems();
      });
    }

    window.addEventListener('astro:after-swap', highlightActiveItem);
  });
</script>
