---
import { getCollection } from 'astro:content';
import './GrammarSidebar.css';

const allGrammar = await getCollection('grammar');
const sortedGrammar = allGrammar.sort((a, b) => {
  const levelOrder = { beginner: 1, intermediate: 2, advanced: 3 };
  if (levelOrder[a.data.level] !== levelOrder[b.data.level]) {
    return levelOrder[a.data.level] - levelOrder[b.data.level];
  }
  return a.data.order - b.data.order;
});

const levelMap = {
  beginner: 'Sơ cấp',
  intermediate: 'Trung cấp',
  advanced: 'Cao cấp'
};

type GrammarEntry = (typeof sortedGrammar)[number];
type LevelKey = keyof typeof levelMap;

const levelKeys: LevelKey[] = ['beginner', 'intermediate', 'advanced'];

const groupedGrammar: Record<LevelKey, GrammarEntry[]> = {
  beginner: [],
  intermediate: [],
  advanced: []
};

sortedGrammar.forEach((entry) => {
  groupedGrammar[entry.data.level as LevelKey].push(entry);
});

const totalCount = sortedGrammar.length;
---

<aside class="grammar-sidebar" id="grammar-sidebar">
  <div class="sidebar-header">
    <div class="sidebar-heading">
      <h2 class="sidebar-title">Ngữ pháp</h2>
      <span class="sidebar-count">{totalCount} mẫu</span>
    </div>

    <!-- Toggle hide/show sidebar -->
    <button class="sidebar-toggle" id="sidebar-toggle" aria-label="Ẩn sidebar" aria-expanded="true" title="Ẩn sidebar (Ctrl+B)">
      <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <polyline points="6 9 12 15 18 9" />
      </svg>
    </button>
  </div>

  <div class="sidebar-search">
    <label for="sidebar-search-input" class="sr-only">Tìm kiếm ngữ pháp</label>
    <div class="sidebar-search-wrapper">
      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <circle cx="11" cy="11" r="7" />
        <line x1="21" y1="21" x2="16.65" y2="16.65" />
      </svg>
      <input id="sidebar-search-input" type="text" placeholder="Tìm nhanh trong sidebar..." class="flex-1" />
      <button id="sidebar-search-clear" aria-label="Xoá tìm kiếm">
        <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <line x1="18" y1="6" x2="6" y2="18" />
          <line x1="6" y1="6" x2="18" y2="18" />
        </svg>
      </button>
    </div>
  </div>

  <div class="sidebar-content" data-sidebar-list>
    {levelKeys.map((level) => (
      <div class={['level-section', `level-${level}`].join(' ')} data-level-section={level}>
        <div class="level-header">
          <div class="level-heading">
            <div class="level-pill" data-level={level}>{levelMap[level]}</div>
            <span class="level-count">{groupedGrammar[level].length} mẫu</span>
          </div>

          <button class="level-toggle" type="button" data-level-toggle={level} aria-expanded="true">
            <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <polyline points="6 9 12 15 18 9" />
            </svg>
          </button>
        </div>

        <ul class="grammar-list" data-level-list={level}>
          {groupedGrammar[level].map((grammar) => (
            <li>
              <a
                href={`/grammar/${grammar.data.level}/${grammar.slug}`}
                class="grammar-item"
                data-level={grammar.data.level}
                data-slug={grammar.slug}
              >
                <span class="item-title">{grammar.data.title}</span>
                <span class="item-meta">
                  <span class="item-meaning">{grammar.data.meaning}</span>
                  {grammar.data.tags && grammar.data.tags.length > 0 && (
                    <span class="item-tags">
                      {grammar.data.tags.map((tag) => (
                        <span class="item-tag">{tag}</span>
                      ))}
                    </span>
                  )}
                </span>
              </a>
            </li>
          ))}
        </ul>
      </div>
    ))}
  </div>

  <div class="sidebar-empty" data-empty-state hidden>
    <svg width="72" height="72" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
      <path d="M3 7V6a2 2 0 012-2h3.5l1 2H21a2 2 0 012 2v1H3z" />
      <path d="M3 7h20v11a2 2 0 01-2 2H5a2 2 0 01-2-2V7z" />
      <path d="M12 12h5" />
      <path d="M12 16h5" />
      <path d="M7 12h.01" />
      <path d="M7 16h.01" />
    </svg>
    <p data-empty-text>Không tìm thấy ngữ pháp nào phù hợp.</p>
  </div>
</aside>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const sidebar = document.getElementById('grammar-sidebar');
    if (!sidebar) return;

    const backLink = sidebar.querySelector('.sidebar-back') as HTMLAnchorElement | null;
    if (backLink) {
      const isGrammarList = window.location.pathname === '/grammar';
      backLink.toggleAttribute('hidden', isGrammarList);
    }

    const toggle = document.getElementById('sidebar-toggle');
    const searchInput = document.getElementById('sidebar-search-input') as HTMLInputElement | null;
    const clearButton = document.getElementById('sidebar-search-clear');
    const emptyState = sidebar.querySelector('[data-empty-state]') as HTMLElement | null;
    const emptyText = sidebar.querySelector('[data-empty-text]') as HTMLElement | null;
    const levelSections = Array.from(sidebar.querySelectorAll('[data-level-section]')) as HTMLElement[];
    const actionButtons = Array.from(sidebar.querySelectorAll<HTMLButtonElement>('.sidebar-action'));
    const collapseButtons = Array.from(sidebar.querySelectorAll<HTMLButtonElement>('[data-level-toggle]'));
    const levelReadMoreState = new Map<string, boolean>();

    const highlightActiveItem = () => {
      const currentPath = window.location.pathname;
      const items = Array.from(sidebar.querySelectorAll<HTMLAnchorElement>('.grammar-item'));

      items.forEach((item) => {
        if (item.getAttribute('href') === currentPath) {
          item.classList.add('active');
          item.scrollIntoView({ block: 'nearest' });
        } else {
          item.classList.remove('active');
        }
      });
    };

    const setEmptyState = (hasResult: boolean, text?: string) => {
      if (!emptyState) return;
      emptyState.hidden = hasResult;
      if (!hasResult && emptyText) {
        emptyText.textContent = text || 'Không tìm thấy ngữ pháp nào phù hợp.';
      }
    };

    const filterItems = () => {
      if (!searchInput) return;
      const keyword = searchInput.value.trim().toLowerCase();
      let visibleCount = 0;

      if (clearButton) {
        if (keyword.length > 0) {
          clearButton.classList.add('active');
        } else {
          clearButton.classList.remove('active');
        }
      }

      levelSections.forEach((section) => {
        const level = section.dataset.levelSection || '';
        const list = section.querySelector('[data-level-list]');
        if (!list) return;

        const items = Array.from(list.querySelectorAll<HTMLAnchorElement>('.grammar-item'));
        let levelVisible = 0;

        items.forEach((item) => {
          const title = item.querySelector('.item-title')?.textContent?.toLowerCase() || '';
          const meaning = item.querySelector('.item-meaning')?.textContent?.toLowerCase() || '';
          const tags = Array.from(item.querySelectorAll('.item-tag')).map(tag => tag.textContent?.toLowerCase() || '').join(' ');

          const match = keyword.length === 0 ||
            title.includes(keyword) ||
            meaning.includes(keyword) ||
            tags.includes(keyword);

          item.parentElement?.toggleAttribute('hidden', !match);

          if (match) {
            levelVisible++;
            visibleCount++;
          }
        });

        section.toggleAttribute('hidden', levelVisible === 0);
        const countBadge = section.querySelector('.level-count');
        if (countBadge) {
          countBadge.textContent = `${levelVisible} mẫu`;
        }

        if (keyword.length === 0 && levelReadMoreState.has(level)) {
          section.dataset.collapsed = 'false';
          levelReadMoreState.set(level, false);
        }
      });

      setEmptyState(visibleCount > 0, keyword ? `Không tìm thấy kết quả với từ khóa "${keyword}"` : undefined);
    };

    const collapseLevel = (level: string, collapse: boolean) => {
      const section = sidebar.querySelector<HTMLElement>(`[data-level-section="${level}"]`);
      if (!section) return;
      const list = section.querySelector<HTMLElement>('[data-level-list]');
      const button = section.querySelector<HTMLButtonElement>(`[data-level-toggle="${level}"]`);

      if (collapse) {
        list?.setAttribute('hidden', 'true');
        button?.setAttribute('aria-expanded', 'false');
      } else {
        list?.removeAttribute('hidden');
        button?.setAttribute('aria-expanded', 'true');
      }

      levelReadMoreState.set(level, collapse);
    };

    highlightActiveItem();

    const updateToggleA11y = () => {
      const collapsed = sidebar.classList.contains('collapsed');
      toggle?.setAttribute('aria-expanded', String(!collapsed));
      toggle?.setAttribute('aria-label', collapsed ? 'Hiện sidebar' : 'Ẩn sidebar');
      toggle?.setAttribute('title', collapsed ? 'Hiện sidebar (Ctrl+B)' : 'Ẩn sidebar (Ctrl+B)');
    };

    // Toggle hide/show sidebar (desktop + mobile)
    if (toggle) {
      toggle.addEventListener('click', () => {
        if (window.matchMedia('(max-width: 1024px)').matches) {
          if (!sidebar.classList.contains('open') && !sidebar.classList.contains('collapsed')) {
            sidebar.classList.add('open');
            updateToggleA11y();
            return;
          }
        }
        sidebar.classList.toggle('collapsed');
        updateToggleA11y();
      });

      // Keyboard shortcut Ctrl+B
      document.addEventListener('keydown', (e) => {
        if ((e.ctrlKey || e.metaKey) && e.key.toLowerCase() === 'b') {
          e.preventDefault();
          sidebar.classList.toggle('collapsed');
          updateToggleA11y();
        }
      });
      updateToggleA11y();
    }

    document.addEventListener('click', (event) => {
      if (sidebar.classList.contains('open') && event.target instanceof Node && !sidebar.contains(event.target) && event.target !== toggle) {
        sidebar.classList.remove('open');
      }
    });

    collapseButtons.forEach((button) => {
      button.addEventListener('click', () => {
        const level = button.dataset.levelToggle;
        if (!level) return;
        const currentlyCollapsed = levelReadMoreState.get(level) ?? false;
        collapseLevel(level, !currentlyCollapsed);
      });
    });

    actionButtons.forEach((button) => {
      button.addEventListener('click', () => {
        actionButtons.forEach((btn) => btn.classList.remove('active'));
        button.classList.add('active');

        const action = button.dataset.action;
        switch (action) {
          case 'list':
            setEmptyState(true);
            filterItems();
            break;
          case 'bookmark':
            setEmptyState(false, 'Chức năng bookmark đang được phát triển.');
            break;
          case 'recent':
            setEmptyState(false, 'Chức năng bài học gần đây đang được phát triển.');
            break;
          default:
            break;
        }
      });
    });

    if (searchInput) {
      searchInput.addEventListener('input', filterItems);
      searchInput.addEventListener('keydown', (event) => {
        if (event.key === 'Escape') {
          searchInput.value = '';
          filterItems();
        }
      });
    }

    if (clearButton) {
      clearButton.addEventListener('click', () => {
        if (searchInput) {
          searchInput.value = '';
          searchInput.focus();
        }
        clearButton.classList.remove('active');
        filterItems();
      });
    }

    window.addEventListener('astro:after-swap', highlightActiveItem);
  });
</script>
