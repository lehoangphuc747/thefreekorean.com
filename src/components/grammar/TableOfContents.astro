---
export interface Props {
  headings: Array<{
    id: string;
    text: string;
    level: number;
  }>;
}

import './TableOfContents.css';

const { headings } = Astro.props;
---

<aside class="toc-container" id="toc-container">
  <div class="toc-header">
    <h3 class="toc-title">Mục lục</h3>
    <button class="toc-toggle" id="toc-toggle" aria-label="Ẩn/hiện mục lục">
      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <line x1="18" y1="6" x2="6" y2="18"/>
        <line x1="6" y1="6" x2="18" y2="18"/>
      </svg>
    </button>
  </div>
  
  <nav class="toc-nav" id="toc-nav">
    <ul class="toc-list">
      {headings.map(heading => (
        <li class={`toc-item toc-level-${heading.level}`}>
          <a 
            href={`#${heading.id}`}
            class="toc-link"
            data-heading={heading.id}
          >
            {heading.text}
          </a>
        </li>
      ))}
    </ul>
  </nav>
</aside>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const tocContainer = document.getElementById('toc-container');
    const tocToggle = document.getElementById('toc-toggle');
    const tocNav = document.getElementById('toc-nav');

    function setToggleIcon(collapsed) {
      if (!tocToggle) return;
      const xIcon = `
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <line x1="18" y1="6" x2="6" y2="18"/>
          <line x1="6" y1="6" x2="18" y2="18"/>
        </svg>`;
      const menuIcon = `
        <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <line x1="3" y1="6" x2="21" y2="6"/>
          <line x1="3" y1="12" x2="21" y2="12"/>
          <line x1="3" y1="18" x2="21" y2="18"/>
        </svg>`;
      const isCollapsed = tocContainer?.classList.contains('collapsed');
      tocToggle.innerHTML = isCollapsed ? menuIcon : xIcon;
    }

    function updateToggleA11y() {
      if (!tocContainer || !tocToggle) return;
      const collapsed = tocContainer.classList.contains('collapsed');
      tocToggle.setAttribute('aria-expanded', String(!collapsed));
      tocToggle.setAttribute('aria-label', collapsed ? 'Hiện mục lục' : 'Ẩn mục lục');
      tocToggle.setAttribute('title', collapsed ? 'Hiện mục lục (T)' : 'Ẩn mục lục (T)');
      setToggleIcon(collapsed);
    }

    // Toggle ẩn/hiện TOC (luôn dùng collapsed để chừa lại button)
    if (tocToggle && tocContainer) {
      tocToggle.addEventListener('click', function(e) {
        e.stopPropagation();
        // Nếu đang ở mobile và panel đang ở trạng thái open slide-in thì đóng panel, sau đó chuyển collapsed
        if (window.matchMedia('(max-width: 1024px)').matches && tocContainer.classList.contains('open')) {
          tocContainer.classList.remove('open');
        }
        tocContainer.classList.toggle('collapsed');
        updateToggleA11y();
      });

      // Phím tắt T
      document.addEventListener('keydown', (e) => {
        if ((e.target instanceof HTMLInputElement) || (e.target instanceof HTMLTextAreaElement) || (e.target)?.isContentEditable) return;
        if (e.key.toLowerCase() === 't') {
          if (window.matchMedia('(max-width: 1024px)').matches && tocContainer.classList.contains('open')) {
            tocContainer.classList.remove('open');
          }
          tocContainer.classList.toggle('collapsed');
          updateToggleA11y();
        }
      });

      updateToggleA11y();
    }

    // Active heading detection
    const tocLinks = document.querySelectorAll('.toc-link');
    const headings = document.querySelectorAll('h2, h3, h4, h5, h6');

    function updateActiveHeading() {
      let currentHeading = '';
      headings.forEach(heading => {
        const rect = heading.getBoundingClientRect();
        if (rect.top <= 100) {
          currentHeading = heading.id;
        }
      });
      tocLinks.forEach(link => {
        link.classList.remove('active');
        if (link.getAttribute('data-heading') === currentHeading) {
          link.classList.add('active');
        }
      });
    }
    window.addEventListener('scroll', updateActiveHeading);
    updateActiveHeading();
  });
</script>
