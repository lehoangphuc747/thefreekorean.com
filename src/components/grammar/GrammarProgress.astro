---
// Component: GrammarProgress
// Description: Progress tracking component for grammar learning
// Used in: grammar pages, dashboard, profile pages
// Purpose: Displays learning progress, streaks, achievements, and statistics

export interface Props {
  userProgress?: {
    totalGrammar: number;
    completedGrammar: number;
    currentStreak: number;
    longestStreak: number;
    totalStudyTime: number; // in minutes
    lastStudyDate?: string;
    weeklyGoal: number;
    achievements: string[];
  };
  showDetailed?: boolean;
  variant?: 'compact' | 'full' | 'dashboard';
}

const { 
  userProgress = {
    totalGrammar: 0,
    completedGrammar: 0,
    currentStreak: 0,
    longestStreak: 0,
    totalStudyTime: 0,
    weeklyGoal: 5,
    achievements: []
  },
  showDetailed = true,
  variant = 'full'
} = Astro.props;

// Calculate percentages and stats
const completionPercentage = userProgress.totalGrammar > 0 ? 
  Math.round((userProgress.completedGrammar / userProgress.totalGrammar) * 100) : 0;

const weeklyProgress = userProgress.weeklyGoal > 0 ? 
  Math.min((userProgress.completedGrammar / userProgress.weeklyGoal) * 100, 100) : 0;

const studyHours = Math.floor(userProgress.totalStudyTime / 60);
const studyMinutes = userProgress.totalStudyTime % 60;

// Achievement definitions
const achievementDefinitions: Record<string, { icon: string; title: string; description: string; color: string }> = {
  'first_lesson': { 
    icon: '🎯', 
    title: 'Bước đầu tiên', 
    description: 'Hoàn thành bài học đầu tiên',
    color: 'text-blue-600'
  },
  'streak_7': { 
    icon: '🔥', 
    title: 'Tuần liên tiếp', 
    description: 'Học 7 ngày liên tiếp',
    color: 'text-orange-600'
  },
  'streak_30': { 
    icon: '💎', 
    title: 'Tháng kiên trì', 
    description: 'Học 30 ngày liên tiếp',
    color: 'text-purple-600'
  },
  'master_10': { 
    icon: '📚', 
    title: 'Chuyên gia sơ cấp', 
    description: 'Hoàn thành 10 bài ngữ pháp',
    color: 'text-green-600'
  },
  'master_25': { 
    icon: '🚀', 
    title: 'Chuyên gia trung cấp', 
    description: 'Hoàn thành 25 bài ngữ pháp',
    color: 'text-yellow-600'
  },
  'master_50': { 
    icon: '🏆', 
    title: 'Chuyên gia cao cấp', 
    description: 'Hoàn thành 50 bài ngữ pháp',
    color: 'text-red-600'
  },
  'speed_learner': { 
    icon: '⚡', 
    title: 'Học tốc độ', 
    description: 'Hoàn thành 5 bài trong 1 ngày',
    color: 'text-cyan-600'
  },
  'perfect_week': { 
    icon: '⭐', 
    title: 'Tuần hoàn hảo', 
    description: 'Đạt mục tiêu tuần',
    color: 'text-indigo-600'
  }
};

// Get level based on completed grammar
const getLevel = (completed: number) => {
  if (completed < 5) return { name: 'Người mới', icon: '🌱', color: 'text-green-600' };
  if (completed < 15) return { name: 'Học viên', icon: '📖', color: 'text-blue-600' };
  if (completed < 30) return { name: 'Thành thạo', icon: '🚀', color: 'text-purple-600' };
  if (completed < 50) return { name: 'Chuyên gia', icon: '🏅', color: 'text-orange-600' };
  return { name: 'Bậc thầy', icon: '🏆', color: 'text-red-600' };
};

const currentLevel = getLevel(userProgress.completedGrammar);

// Calculate next level requirements
const getNextLevelRequirement = (completed: number) => {
  if (completed < 5) return 5;
  if (completed < 15) return 15;
  if (completed < 30) return 30;
  if (completed < 50) return 50;
  return completed; // Max level
};

const nextLevelRequirement = getNextLevelRequirement(userProgress.completedGrammar);
const progressToNextLevel = nextLevelRequirement > userProgress.completedGrammar ? 
  ((userProgress.completedGrammar % nextLevelRequirement) / nextLevelRequirement) * 100 : 100;
---

<div class={`grammar-progress ${variant}`}>
  <!-- Progress Header -->
  <div class="progress-header">
    <div class="level-info">
      <div class="level-badge">
        <span class={`level-icon ${currentLevel.color}`}>{currentLevel.icon}</span>
        <div class="level-details">
          <div class="level-name">{currentLevel.name}</div>
          <div class="level-progress">
            {nextLevelRequirement > userProgress.completedGrammar ? 
              `${userProgress.completedGrammar}/${nextLevelRequirement} để lên cấp` : 
              'Cấp độ tối đa'
            }
          </div>
        </div>
      </div>
    </div>

    <div class="streak-info">
      <div class="streak-badge">
        <span class="streak-icon">🔥</span>
        <div class="streak-details">
          <div class="streak-count">{userProgress.currentStreak}</div>
          <div class="streak-label">Ngày liên tiếp</div>
        </div>
      </div>
    </div>
  </div>

  <!-- Main Progress -->
  <div class="main-progress">
    <div class="progress-section">
      <h4 class="section-title">📊 Tiến độ tổng quan</h4>
      
      <div class="progress-stats">
        <div class="stat-card primary">
          <div class="stat-icon">📚</div>
          <div class="stat-content">
            <div class="stat-number">{userProgress.completedGrammar}</div>
            <div class="stat-label">Bài đã hoàn thành</div>
            <div class="stat-total">/ {userProgress.totalGrammar} tổng</div>
          </div>
          <div class="stat-progress">
            <div class="progress-bar">
              <div class="progress-fill" style={`width: ${completionPercentage}%`}></div>
            </div>
            <div class="progress-text">{completionPercentage}%</div>
          </div>
        </div>

        <div class="stat-card secondary">
          <div class="stat-icon">⏱️</div>
          <div class="stat-content">
            <div class="stat-number">
              {studyHours > 0 ? `${studyHours}h ` : ''}{studyMinutes}m
            </div>
            <div class="stat-label">Thời gian học</div>
            <div class="stat-total">Tổng cộng</div>
          </div>
        </div>

        <div class="stat-card accent">
          <div class="stat-icon">🎯</div>
          <div class="stat-content">
            <div class="stat-number">{userProgress.longestStreak}</div>
            <div class="stat-label">Chuỗi dài nhất</div>
            <div class="stat-total">Ngày</div>
          </div>
        </div>
      </div>
    </div>

    <!-- Weekly Goal -->
    {variant !== 'compact' && (
      <div class="weekly-goal">
        <h5 class="goal-title">🎯 Mục tiêu tuần này</h5>
        <div class="goal-progress">
          <div class="goal-bar">
            <div class="goal-fill" style={`width: ${weeklyProgress}%`}></div>
          </div>
          <div class="goal-text">
            {Math.min(userProgress.completedGrammar, userProgress.weeklyGoal)}/{userProgress.weeklyGoal} bài ({Math.round(weeklyProgress)}%)
          </div>
        </div>
        
        {weeklyProgress >= 100 ? (
          <div class="goal-achieved">
            🎉 Chúc mừng! Bạn đã đạt mục tiêu tuần này!
          </div>
        ) : (
          <div class="goal-remaining">
            Còn {userProgress.weeklyGoal - userProgress.completedGrammar} bài để đạt mục tiêu
          </div>
        )}
      </div>
    )}
  </div>

  <!-- Achievements -->
  {showDetailed && userProgress.achievements.length > 0 && (
    <div class="achievements-section">
      <h4 class="section-title">🏆 Thành tích</h4>
      <div class="achievements-grid">
        {userProgress.achievements.map(achievementId => {
          const achievement = achievementDefinitions[achievementId];
          if (!achievement) return null;
          
          return (
            <div class="achievement-card">
              <div class={`achievement-icon ${achievement.color}`}>
                {achievement.icon}
              </div>
              <div class="achievement-content">
                <div class="achievement-title">{achievement.title}</div>
                <div class="achievement-description">{achievement.description}</div>
              </div>
            </div>
          );
        })}
      </div>

      <!-- Recent Achievement Animation -->
      <div class="recent-achievement" id="recent-achievement" style="display: none;">
        <div class="achievement-popup">
          <div class="popup-icon">🎉</div>
          <div class="popup-content">
            <div class="popup-title">Thành tích mới!</div>
            <div class="popup-description" id="popup-description"></div>
          </div>
        </div>
      </div>
    </div>
  )}

  <!-- Daily Calendar (for full variant) -->
  {variant === 'full' && (
    <div class="calendar-section">
      <h4 class="section-title">📅 Lịch học tập</h4>
      <div class="study-calendar">
        <!-- Calendar will be generated by JavaScript -->
        <div class="calendar-grid" id="study-calendar">
          <!-- Days will be populated by JS -->
        </div>
        
        <div class="calendar-legend">
          <div class="legend-item">
            <div class="calendar-day completed"></div>
            <span>Đã học</span>
          </div>
          <div class="legend-item">
            <div class="calendar-day today"></div>
            <span>Hôm nay</span>
          </div>
          <div class="legend-item">
            <div class="calendar-day future"></div>
            <span>Chưa học</span>
          </div>
        </div>
      </div>
    </div>
  )}

  <!-- Progress Actions -->
  <div class="progress-actions">
    <button class="action-button primary" onclick="continueStudying()">
      <span class="button-icon">📚</span>
      <span>Tiếp tục học</span>
    </button>
    
    {variant === 'full' && (
      <>
        <button class="action-button secondary" onclick="viewStats()">
          <span class="button-icon">📊</span>
          <span>Thống kê chi tiết</span>
        </button>
        
        <button class="action-button tertiary" onclick="setGoal()">
          <span class="button-icon">🎯</span>
          <span>Đặt mục tiêu</span>
        </button>
      </>
    )}
  </div>
</div>

<style>
  .grammar-progress {
    background: linear-gradient(135deg, #fff 0%, #f8fafc 100%);
    border-radius: 16px;
    padding: 2rem;
    margin: 2rem 0;
    border: 1px solid #e2e8f0;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.05);
  }

  .grammar-progress.compact {
    padding: 1rem;
    margin: 1rem 0;
  }

  .grammar-progress.dashboard {
    margin: 0;
    border-radius: 12px;
  }

  /* Progress Header */
  .progress-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid #e2e8f0;
  }

  .level-badge, .streak-badge {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    background: white;
    padding: 1rem;
    border-radius: 12px;
    border: 1px solid #e2e8f0;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  }

  .level-icon, .streak-icon {
    font-size: 2rem;
  }

  .level-name, .streak-count {
    font-size: 1.1rem;
    font-weight: 700;
    color: #1f2937;
  }

  .level-progress, .streak-label {
    font-size: 0.8rem;
    color: #6b7280;
  }

  /* Main Progress */
  .section-title {
    color: #1f2937;
    font-size: 1.2rem;
    font-weight: 700;
    margin-bottom: 1rem;
  }

  .progress-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    margin-bottom: 2rem;
  }

  .stat-card {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    border: 1px solid #e2e8f0;
    display: flex;
    align-items: center;
    gap: 1rem;
    transition: all 0.3s ease;
  }

  .stat-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
  }

  .stat-card.primary {
    border-left: 4px solid #3b82f6;
  }

  .stat-card.secondary {
    border-left: 4px solid #10b981;
  }

  .stat-card.accent {
    border-left: 4px solid #f59e0b;
  }

  .stat-icon {
    font-size: 2rem;
    flex-shrink: 0;
  }

  .stat-content {
    flex: 1;
  }

  .stat-number {
    font-size: 1.5rem;
    font-weight: 700;
    color: #1f2937;
  }

  .stat-label {
    font-size: 0.9rem;
    color: #6b7280;
    font-weight: 600;
  }

  .stat-total {
    font-size: 0.8rem;
    color: #9ca3af;
  }

  .stat-progress {
    min-width: 80px;
  }

  .progress-bar, .goal-bar {
    width: 100%;
    height: 8px;
    background: #e2e8f0;
    border-radius: 4px;
    overflow: hidden;
    margin-bottom: 0.5rem;
  }

  .progress-fill, .goal-fill {
    height: 100%;
    background: linear-gradient(90deg, #3b82f6 0%, #2563eb 100%);
    border-radius: 4px;
    transition: width 0.5s ease;
  }

  .progress-text, .goal-text {
    text-align: center;
    font-size: 0.8rem;
    font-weight: 600;
    color: #374151;
  }

  /* Weekly Goal */
  .weekly-goal {
    background: #f0f9ff;
    border: 1px solid #bae6fd;
    border-radius: 12px;
    padding: 1.5rem;
    margin-bottom: 2rem;
  }

  .goal-title {
    color: #0c4a6e;
    font-size: 1rem;
    font-weight: 700;
    margin-bottom: 1rem;
  }

  .goal-achieved {
    background: #d1fae5;
    color: #065f46;
    padding: 0.75rem;
    border-radius: 6px;
    text-align: center;
    font-weight: 600;
    margin-top: 0.5rem;
  }

  .goal-remaining {
    color: #0369a1;
    text-align: center;
    font-size: 0.9rem;
    margin-top: 0.5rem;
  }

  /* Achievements */
  .achievements-section {
    position: relative;
    margin-bottom: 2rem;
  }

  .achievements-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1rem;
  }

  .achievement-card {
    background: white;
    border: 1px solid #e2e8f0;
    border-radius: 10px;
    padding: 1rem;
    display: flex;
    align-items: center;
    gap: 0.75rem;
    transition: all 0.3s ease;
  }

  .achievement-card:hover {
    background: #f8fafc;
    border-color: #cbd5e1;
  }

  .achievement-icon {
    font-size: 2rem;
    flex-shrink: 0;
  }

  .achievement-title {
    font-weight: 600;
    color: #1f2937;
    margin-bottom: 0.25rem;
  }

  .achievement-description {
    font-size: 0.8rem;
    color: #6b7280;
  }

  /* Recent Achievement Animation */
  .recent-achievement {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 1000;
    animation: slideInAchievement 0.5s ease;
  }

  .achievement-popup {
    background: linear-gradient(135deg, #fbbf24 0%, #f59e0b 100%);
    color: white;
    padding: 1rem 1.5rem;
    border-radius: 12px;
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
    display: flex;
    align-items: center;
    gap: 1rem;
    max-width: 300px;
  }

  .popup-icon {
    font-size: 2rem;
  }

  .popup-title {
    font-weight: 700;
    margin-bottom: 0.25rem;
  }

  .popup-description {
    font-size: 0.9rem;
    opacity: 0.9;
  }

  /* Study Calendar */
  .calendar-section {
    margin-bottom: 2rem;
  }

  .study-calendar {
    background: white;
    border: 1px solid #e2e8f0;
    border-radius: 12px;
    padding: 1.5rem;
  }

  .calendar-grid {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 0.5rem;
    margin-bottom: 1rem;
  }

  .calendar-day {
    aspect-ratio: 1;
    border-radius: 6px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.8rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .calendar-day.completed {
    background: #10b981;
    color: white;
  }

  .calendar-day.today {
    background: #3b82f6;
    color: white;
    ring: 2px solid #bfdbfe;
  }

  .calendar-day.future {
    background: #f3f4f6;
    color: #9ca3af;
  }

  .calendar-day:hover {
    transform: scale(1.1);
  }

  .calendar-legend {
    display: flex;
    justify-content: center;
    gap: 2rem;
    flex-wrap: wrap;
  }

  .legend-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.8rem;
    color: #6b7280;
  }

  .legend-item .calendar-day {
    width: 16px;
    height: 16px;
    font-size: 0;
  }

  /* Progress Actions */
  .progress-actions {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
    justify-content: center;
  }

  .action-button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    border-radius: 10px;
    font-weight: 600;
    text-decoration: none;
    transition: all 0.3s ease;
    border: none;
    cursor: pointer;
  }

  .action-button.primary {
    background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
    color: white;
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
  }

  .action-button.primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 16px rgba(59, 130, 246, 0.4);
  }

  .action-button.secondary {
    background: #f3f4f6;
    color: #374151;
    border: 1px solid #d1d5db;
  }

  .action-button.secondary:hover {
    background: #e5e7eb;
  }

  .action-button.tertiary {
    background: transparent;
    color: #6b7280;
    border: 1px solid #e5e7eb;
  }

  .action-button.tertiary:hover {
    background: #f9fafb;
    color: #374151;
  }

  /* Animations */
  @keyframes slideInAchievement {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .grammar-progress {
      padding: 1.5rem;
      margin: 1rem 0;
    }

    .progress-header {
      flex-direction: column;
      gap: 1rem;
      align-items: stretch;
    }

    .progress-stats {
      grid-template-columns: 1fr;
    }

    .achievements-grid {
      grid-template-columns: 1fr;
    }

    .calendar-grid {
      gap: 0.25rem;
    }

    .calendar-legend {
      gap: 1rem;
    }

    .progress-actions {
      flex-direction: column;
    }

    .recent-achievement {
      top: 10px;
      right: 10px;
      left: 10px;
    }

    .achievement-popup {
      max-width: none;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize progress tracking
    initializeProgress();
    generateStudyCalendar();
    loadUserProgress();
    
    // Functions for button actions
    window.continueStudying = function() {
      window.location.href = '/ngu-phap';
    };
    
    window.viewStats = function() {
      // Could open a detailed stats modal or navigate to stats page
      alert('Tính năng thống kê chi tiết sẽ được phát triển!');
    };
    
    window.setGoal = function() {
      const newGoal = prompt('Đặt mục tiêu số bài học mỗi tuần:', '5');
      if (newGoal && !isNaN(newGoal) && parseInt(newGoal) > 0) {
        localStorage.setItem('weeklyGoal', newGoal);
        location.reload();
      }
    };

    function initializeProgress() {
      // Load progress from localStorage or initialize
      const savedProgress = localStorage.getItem('grammarProgress');
      if (!savedProgress) {
        const initialProgress = {
          totalGrammar: 8, // Based on current grammar files
          completedGrammar: 0,
          currentStreak: 0,
          longestStreak: 0,
          totalStudyTime: 0,
          lastStudyDate: null,
          weeklyGoal: 5,
          achievements: [],
          studyDates: []
        };
        localStorage.setItem('grammarProgress', JSON.stringify(initialProgress));
      }
    }

    function loadUserProgress() {
      const progress = JSON.parse(localStorage.getItem('grammarProgress') || '{}');
      const completedGrammars = JSON.parse(localStorage.getItem('completedGrammars') || '[]');
      
      // Update progress based on completed grammars
      progress.completedGrammar = completedGrammars.length;
      
      // Check for new achievements
      checkAchievements(progress);
      
      // Update UI
      updateProgressUI(progress);
      
      // Save updated progress
      localStorage.setItem('grammarProgress', JSON.stringify(progress));
    }

    function checkAchievements(progress) {
      const newAchievements = [];
      
      // First lesson achievement
      if (progress.completedGrammar >= 1 && !progress.achievements.includes('first_lesson')) {
        newAchievements.push('first_lesson');
      }
      
      // Grammar mastery achievements
      if (progress.completedGrammar >= 10 && !progress.achievements.includes('master_10')) {
        newAchievements.push('master_10');
      }
      
      if (progress.completedGrammar >= 25 && !progress.achievements.includes('master_25')) {
        newAchievements.push('master_25');
      }
      
      if (progress.completedGrammar >= 50 && !progress.achievements.includes('master_50')) {
        newAchievements.push('master_50');
      }
      
      // Streak achievements
      if (progress.currentStreak >= 7 && !progress.achievements.includes('streak_7')) {
        newAchievements.push('streak_7');
      }
      
      if (progress.currentStreak >= 30 && !progress.achievements.includes('streak_30')) {
        newAchievements.push('streak_30');
      }
      
      // Add new achievements
      newAchievements.forEach(achievement => {
        if (!progress.achievements.includes(achievement)) {
          progress.achievements.push(achievement);
          showAchievementPopup(achievement);
        }
      });
    }

    function showAchievementPopup(achievementId) {
      const definitions = {
        'first_lesson': { icon: '🎯', title: 'Bước đầu tiên', description: 'Hoàn thành bài học đầu tiên' },
        'master_10': { icon: '📚', title: 'Chuyên gia sơ cấp', description: 'Hoàn thành 10 bài ngữ pháp' },
        'master_25': { icon: '🚀', title: 'Chuyên gia trung cấp', description: 'Hoàn thành 25 bài ngữ pháp' },
        'master_50': { icon: '🏆', title: 'Chuyên gia cao cấp', description: 'Hoàn thành 50 bài ngữ pháp' },
        'streak_7': { icon: '🔥', title: 'Tuần liên tiếp', description: 'Học 7 ngày liên tiếp' },
        'streak_30': { icon: '💎', title: 'Tháng kiên trì', description: 'Học 30 ngày liên tiếp' }
      };
      
      const achievement = definitions[achievementId];
      if (!achievement) return;
      
      const popup = document.getElementById('recent-achievement');
      const description = document.getElementById('popup-description');
      
      if (popup && description) {
        description.textContent = achievement.description;
        popup.style.display = 'block';
        
        setTimeout(() => {
          popup.style.animation = 'slideInAchievement 0.5s ease reverse';
          setTimeout(() => {
            popup.style.display = 'none';
            popup.style.animation = 'slideInAchievement 0.5s ease';
          }, 500);
        }, 3000);
      }
    }

    function updateProgressUI(progress) {
      // Update progress bars
      const progressFills = document.querySelectorAll('.progress-fill, .goal-fill');
      progressFills.forEach(fill => {
        const percentage = fill.classList.contains('goal-fill') ? 
          Math.min((progress.completedGrammar / progress.weeklyGoal) * 100, 100) :
          (progress.completedGrammar / progress.totalGrammar) * 100;
        fill.style.width = percentage + '%';
      });
      
      // Update numbers
      const completedElements = document.querySelectorAll('[data-completed]');
      completedElements.forEach(el => {
        el.textContent = progress.completedGrammar;
      });
    }

    function generateStudyCalendar() {
      const calendar = document.getElementById('study-calendar');
      if (!calendar) return;
      
      const today = new Date();
      const startDate = new Date(today.getFullYear(), today.getMonth(), 1);
      const endDate = new Date(today.getFullYear(), today.getMonth() + 1, 0);
      
      const progress = JSON.parse(localStorage.getItem('grammarProgress') || '{}');
      const studyDates = progress.studyDates || [];
      
      // Clear calendar
      calendar.innerHTML = '';
      
      // Generate days
      for (let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {
        const dayElement = document.createElement('div');
        dayElement.className = 'calendar-day';
        dayElement.textContent = d.getDate();
        
        const dateString = d.toISOString().split('T')[0];
        
        if (dateString === today.toISOString().split('T')[0]) {
          dayElement.classList.add('today');
        } else if (studyDates.includes(dateString)) {
          dayElement.classList.add('completed');
        } else if (d < today) {
          dayElement.classList.add('future');
        } else {
          dayElement.classList.add('future');
        }
        
        calendar.appendChild(dayElement);
      }
    }

    // Update study date when completing a lesson
    function updateStudyDate() {
      const today = new Date().toISOString().split('T')[0];
      const progress = JSON.parse(localStorage.getItem('grammarProgress') || '{}');
      
      if (!progress.studyDates) progress.studyDates = [];
      
      if (!progress.studyDates.includes(today)) {
        progress.studyDates.push(today);
        
        // Update streak
        const yesterday = new Date();
        yesterday.setDate(yesterday.getDate() - 1);
        const yesterdayString = yesterday.toISOString().split('T')[0];
        
        if (progress.lastStudyDate === yesterdayString || !progress.lastStudyDate) {
          progress.currentStreak = (progress.currentStreak || 0) + 1;
        } else {
          progress.currentStreak = 1;
        }
        
        progress.longestStreak = Math.max(progress.longestStreak || 0, progress.currentStreak);
        progress.lastStudyDate = today;
        
        localStorage.setItem('grammarProgress', JSON.stringify(progress));
        generateStudyCalendar();
      }
    }

    // Listen for completed grammars
    window.addEventListener('storage', function(e) {
      if (e.key === 'completedGrammars') {
        updateStudyDate();
        loadUserProgress();
      }
    });

    // Track study time
    let studyStartTime = Date.now();
    
    window.addEventListener('beforeunload', function() {
      const studyTime = Math.floor((Date.now() - studyStartTime) / 1000 / 60); // minutes
      const progress = JSON.parse(localStorage.getItem('grammarProgress') || '{}');
      progress.totalStudyTime = (progress.totalStudyTime || 0) + studyTime;
      localStorage.setItem('grammarProgress', JSON.stringify(progress));
    });
  });
</script>
