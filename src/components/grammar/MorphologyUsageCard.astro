---
export interface Rule {
  condition: string;
  rule: string;
  examples: string[];
}

export interface Props {
  title: string;
  rules: Rule[];
}

const { title, rules } = Astro.props;

// Hàm để highlight ngữ pháp
const highlightGrammar = (text: string, customPatterns: string[] = []) => {
  const defaultPatterns = ['으면서', '면서', '으며', '고', '걸으면서', '부드러우면서', '지으면서', '하야면서'];
  const allPatterns = [...defaultPatterns, ...customPatterns];
  const regex = new RegExp(`(${allPatterns.join('|')})`, 'g');
  
  if (!text) return text;
  
  return text.replace(regex, '<strong class="text-purple-600 font-bold">$1</strong>');
};
---

<div class="bg-white rounded-3xl shadow-lg p-8 max-w-sm md:max-w-3xl w-full">
  <h2 class="text-2xl font-bold text-slate-800 mb-6">{title}</h2>
  <div class="space-y-1">
    {rules.map((rule) => (
      <div class="flex flex-col md:flex-row md:items-center text-sm p-3 rounded-lg transition-colors hover:bg-slate-100">
        <div class="font-bold text-slate-800 w-full md:w-32 flex-shrink-0 mb-1 md:mb-0">
          {rule.condition} <span class="font-normal text-slate-400">+</span> <span class="text-purple-600">{rule.rule}</span>
        </div>
        <div class="text-slate-600 font-medium break-words">
          {rule.examples.map((ex, i) => (
            <Fragment>
              <Fragment set:html={highlightGrammar(ex)} />
              {i < rule.examples.length - 1 && ', '}
            </Fragment>
          ))}
        </div>
      </div>
    ))}
  </div>
</div>
