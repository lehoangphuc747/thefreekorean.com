---
export interface Props {
  stats: {
    documents: number;
    categories: number;
    downloads: string;
    users: string;
  };
}

const { stats } = Astro.props;
---

<section class="py-16 bg-white">
  <div class="max-w-7xl mx-auto px-4">
    <div class="text-center mb-12">
      <h2 class="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
        Con số ấn tượng
      </h2>
      <p class="text-lg text-gray-600 max-w-2xl mx-auto">
        Cộng đồng học tiếng Hàn đang phát triển mạnh mẽ với những con số đáng kinh ngạc
      </p>
    </div>
    
    <div class="grid grid-cols-2 md:grid-cols-4 gap-8">
      <!-- Documents -->
      <div class="text-center group">
        <div class="bg-gradient-to-br from-blue-500 to-blue-600 w-16 h-16 rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-300">
          <span class="text-2xl text-white">📚</span>
        </div>
        <div class="text-3xl md:text-4xl font-bold text-gray-900 mb-2 counter" data-target={stats.documents}>
          {stats.documents}+
        </div>
        <div class="text-gray-600 font-medium">Tài liệu</div>
        <div class="text-sm text-gray-500 mt-1">Chất lượng cao</div>
      </div>
      
      <!-- Categories -->
      <div class="text-center group">
        <div class="bg-gradient-to-br from-purple-500 to-purple-600 w-16 h-16 rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-300">
          <span class="text-2xl text-white">🗂️</span>
        </div>
        <div class="text-3xl md:text-4xl font-bold text-gray-900 mb-2 counter" data-target={stats.categories}>
          {stats.categories}+
        </div>
        <div class="text-gray-600 font-medium">Danh mục</div>
        <div class="text-sm text-gray-500 mt-1">Đa dạng chủ đề</div>
      </div>
      
      <!-- Downloads -->
      <div class="text-center group">
        <div class="bg-gradient-to-br from-green-500 to-green-600 w-16 h-16 rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-300">
          <span class="text-2xl text-white">⬇️</span>
        </div>
        <div class="text-3xl md:text-4xl font-bold text-gray-900 mb-2">
          {stats.downloads}
        </div>
        <div class="text-gray-600 font-medium">Lượt tải</div>
        <div class="text-sm text-gray-500 mt-1">Hàng tháng</div>
      </div>
      
      <!-- Users -->
      <div class="text-center group">
        <div class="bg-gradient-to-br from-pink-500 to-pink-600 w-16 h-16 rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-300">
          <span class="text-2xl text-white">👥</span>
        </div>
        <div class="text-3xl md:text-4xl font-bold text-gray-900 mb-2">
          {stats.users}
        </div>
        <div class="text-gray-600 font-medium">Người dùng</div>
        <div class="text-sm text-gray-500 mt-1">Tin tưởng</div>
      </div>
    </div>
    
    <!-- Achievement badges -->
    <div class="mt-16 flex flex-wrap justify-center gap-4">
      <div class="bg-blue-50 text-blue-700 px-4 py-2 rounded-full text-sm font-medium flex items-center gap-2">
        <span>🏆</span>
        Top 1 tài liệu tiếng Hàn miễn phí
      </div>
      <div class="bg-green-50 text-green-700 px-4 py-2 rounded-full text-sm font-medium flex items-center gap-2">
        <span>✅</span>
        Được kiểm duyệt chất lượng
      </div>
      <div class="bg-purple-50 text-purple-700 px-4 py-2 rounded-full text-sm font-medium flex items-center gap-2">
        <span>🚀</span>
        Cập nhật thường xuyên
      </div>
    </div>
  </div>
</section>

<script>
  // Counter animation
  function animateCounters() {
    const counters = document.querySelectorAll('.counter');
    
    counters.forEach(counter => {
      const target = parseInt(counter.getAttribute('data-target') || '0');
      const duration = 2000; // 2 seconds
      const step = target / (duration / 16); // 60 FPS
      let current = 0;
      
      const timer = setInterval(() => {
        current += step;
        if (current >= target) {
          current = target;
          clearInterval(timer);
        }
        counter.textContent = Math.floor(current) + '+';
      }, 16);
    });
  }
  
  // Intersection Observer for scroll-triggered animation
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        animateCounters();
        observer.unobserve(entry.target);
      }
    });
  });
  
  // Start observing when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    const statsSection = document.querySelector('section');
    if (statsSection) {
      observer.observe(statsSection);
    }
  });
</script>
