---
// TOPIK Card component - chỉ dành cho tài liệu TOPIK
export interface Props {
  document: {
    slug: string;
    title: string;
    description: string;
    category: string;
    type: string;
    level?: string; // TOPIK I hoặc TOPIK II
    difficulty?: string; // Beginner, Intermediate, Advanced
    cover?: string;
    date: string;
    downloadUrl?: string;
    practiceUrl?: string;
    duration?: string;
    questions?: number;
  };
  class?: string;
}

const { document, class: className = '' } = Astro.props;

// Xác định màu sắc theo level TOPIK
const getLevelColor = (level?: string) => {
  switch (level) {
    case 'TOPIK I':
      return 'from-green-500 to-emerald-600';
    case 'TOPIK II':
      return 'from-blue-500 to-indigo-600';
    default:
      return 'from-purple-500 to-pink-600';
  }
};

// Xác định icon theo type
const getTypeIcon = (type: string) => {
  switch (type) {
    case 'vocabulary':
      return '📖';
    case 'practice':
      return '📝';
    case 'test':
      return '🎯';
    case 'website':
      return '🌐';
    case 'listening':
      return '🎧';
    case 'reading':
      return '📄';
    case 'writing':
      return '✍️';
    default:
      return '📚';
  }
};
---

<div class={`topik-card group cursor-pointer ${className}`} data-slug={document.slug}>
  <div class="bg-white rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-300 overflow-hidden h-full flex flex-col transform hover:-translate-y-2">
    
    <!-- Header với level badge -->
    <div class={`h-2 bg-gradient-to-r ${getLevelColor(document.level)}`}></div>
    
    <!-- Cover Image hoặc Icon -->
    <div class="relative">
      {document.cover ? (
        <img 
          src={document.cover} 
          alt={document.title}
          class="w-full h-40 object-cover"
          loading="lazy"
        />
      ) : (
        <div class={`h-40 bg-gradient-to-br ${getLevelColor(document.level)} flex items-center justify-center`}>
          <span class="text-6xl opacity-80">{getTypeIcon(document.type)}</span>
        </div>
      )}
      
      <!-- Level Badge -->
      {document.level && (
        <div class="absolute top-3 left-3">
          <span class={`px-3 py-1 bg-gradient-to-r ${getLevelColor(document.level)} text-white text-xs font-bold rounded-full shadow-lg`}>
            {document.level}
          </span>
        </div>
      )}
      
      <!-- Type Badge -->
      <div class="absolute top-3 right-3">
        <span class="px-2 py-1 bg-white/90 backdrop-blur-sm text-gray-700 text-xs font-medium rounded-lg shadow">
          {getTypeIcon(document.type)} {document.type.toUpperCase()}
        </span>
      </div>
    </div>

    <!-- Content -->
    <div class="p-5 flex-grow flex flex-col">
      <!-- Title -->
      <h3 class="font-bold text-lg text-gray-900 mb-2 line-clamp-2 group-hover:text-blue-600 transition-colors">
        {document.title}
      </h3>
      
      <!-- Description -->
      <p class="text-gray-600 text-sm mb-4 line-clamp-3 flex-grow">
        {document.description}
      </p>
      
      <!-- Meta Info -->
      <div class="space-y-2 mt-auto">
        <!-- Duration & Questions -->
        {(document.duration || document.questions) && (
          <div class="flex items-center gap-3 text-xs text-gray-500">
            {document.duration && (
              <span class="flex items-center gap-1">
                <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"/>
                </svg>
                {document.duration}
              </span>
            )}
            {document.questions && (
              <span class="flex items-center gap-1">
                <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd"/>
                </svg>
                {document.questions} câu hỏi
              </span>
            )}
          </div>
        )}
        
        <!-- Difficulty Level -->
        {document.difficulty && (
          <div class="flex items-center justify-between">
            <span class="text-xs text-gray-500">Độ khó:</span>
            <div class="flex gap-1">
              {Array.from({ length: 3 }, (_, i) => (
                <div class={`w-2 h-2 rounded-full ${
                  document.difficulty === 'Beginner' && i === 0 ? 'bg-green-400' :
                  document.difficulty === 'Intermediate' && i <= 1 ? 'bg-yellow-400' :
                  document.difficulty === 'Advanced' ? 'bg-red-400' :
                  'bg-gray-200'
                }`}></div>
              ))}
            </div>
          </div>
        )}
        
        <!-- Action Buttons -->
        <div class="flex gap-2 pt-3 border-t border-gray-100">
          {document.practiceUrl && (
            <a 
              href={document.practiceUrl}
              class="flex-1 bg-gradient-to-r from-blue-500 to-indigo-600 text-white text-center py-2 px-3 rounded-lg text-xs font-medium hover:from-blue-600 hover:to-indigo-700 transition-all duration-200"
              onclick="event.stopPropagation()"
            >
              🎯 Luyện tập
            </a>
          )}
          {document.downloadUrl && (
            <a 
              href={document.downloadUrl}
              class="flex-1 bg-gradient-to-r from-gray-100 to-gray-200 text-gray-700 text-center py-2 px-3 rounded-lg text-xs font-medium hover:from-gray-200 hover:to-gray-300 transition-all duration-200"
              onclick="event.stopPropagation()"
            >
              📥 Tải về
            </a>
          )}
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .topik-card:hover .bg-gradient-to-r {
    background-size: 110% 110%;
  }
  
  /* Line clamp utilities */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const topikCards = document.querySelectorAll('.topik-card');
    
    topikCards.forEach(card => {
      card.addEventListener('click', function(this: HTMLElement, event: Event) {
        // Không navigate nếu click vào button hoặc link
        const target = event.target as HTMLElement;
        if (target?.tagName === 'A' || target?.closest('a') || 
            target?.tagName === 'BUTTON' || target?.closest('button')) {
          return;
        }
        
        const slug = this.getAttribute('data-slug');
        if (slug) {
          window.location.href = `/topik/${slug}`;
        }
      });
    });
  });
</script> 