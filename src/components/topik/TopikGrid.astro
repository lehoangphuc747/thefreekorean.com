---
import TopikCard from './TopikCard.astro';

export interface Props {
  documents: Array<{
    slug: string;
    title: string;
    description: string;
    category: string;
    type: string;
    level?: string;
    difficulty?: string;
    cover?: string;
    date: string;
    downloadUrl?: string;
    practiceUrl?: string;
    duration?: string;
    questions?: number;
  }>;
  class?: string;
  title?: string;
  showStats?: boolean;
}

const { 
  documents, 
  class: className = '', 
  title,
  showStats = true 
} = Astro.props;

// Th·ªëng k√™ TOPIK
const stats = {
  total: documents.length,
  topikI: documents.filter(doc => doc.level === 'TOPIK I').length,
  topikII: documents.filter(doc => doc.level === 'TOPIK II').length,
  vocabulary: documents.filter(doc => doc.type === 'vocabulary').length,
  practice: documents.filter(doc => doc.type === 'practice').length,
  tests: documents.filter(doc => doc.type === 'test').length,
};
---

<div class={`topik-grid-container ${className}`}>
  
  <!-- Header v·ªõi th·ªëng k√™ -->
  {(title || showStats) && (
    <div class="mb-8">
      {title && (
        <h2 class="text-3xl font-bold text-gray-900 mb-4 text-center">{title}</h2>
      )}
      
      {showStats && (
        <div class="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4 mb-6">
          <div class="bg-gradient-to-br from-blue-50 to-blue-100 p-4 rounded-xl text-center border border-blue-200">
            <div class="text-2xl font-bold text-blue-600">{stats.total}</div>
            <div class="text-xs text-blue-800 font-medium">T·ªïng t√†i li·ªáu</div>
          </div>
          <div class="bg-gradient-to-br from-green-50 to-green-100 p-4 rounded-xl text-center border border-green-200">
            <div class="text-2xl font-bold text-green-600">{stats.topikI}</div>
            <div class="text-xs text-green-800 font-medium">TOPIK I</div>
          </div>
          <div class="bg-gradient-to-br from-indigo-50 to-indigo-100 p-4 rounded-xl text-center border border-indigo-200">
            <div class="text-2xl font-bold text-indigo-600">{stats.topikII}</div>
            <div class="text-xs text-indigo-800 font-medium">TOPIK II</div>
          </div>
          <div class="bg-gradient-to-br from-purple-50 to-purple-100 p-4 rounded-xl text-center border border-purple-200">
            <div class="text-2xl font-bold text-purple-600">{stats.vocabulary}</div>
            <div class="text-xs text-purple-800 font-medium">T·ª´ v·ª±ng</div>
          </div>
          <div class="bg-gradient-to-br from-orange-50 to-orange-100 p-4 rounded-xl text-center border border-orange-200">
            <div class="text-2xl font-bold text-orange-600">{stats.practice}</div>
            <div class="text-xs text-orange-800 font-medium">Luy·ªán t·∫≠p</div>
          </div>
          <div class="bg-gradient-to-br from-red-50 to-red-100 p-4 rounded-xl text-center border border-red-200">
            <div class="text-2xl font-bold text-red-600">{stats.tests}</div>
            <div class="text-xs text-red-800 font-medium">ƒê·ªÅ thi</div>
          </div>
        </div>
      )}
    </div>
  )}

  <!-- Grid Layout -->
  <div class="topik-grid" id="topik-grid">
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6" id="topik-actual-grid">
      {documents.map(doc => (
        <TopikCard document={doc} />
      ))}
    </div>
  </div>

  <!-- Empty State -->
  <div class="topik-empty-state text-center py-16" id="topik-empty-state" style="display: none;">
    <div class="max-w-md mx-auto">
      <div class="w-24 h-24 mx-auto mb-6 bg-gradient-to-br from-gray-200 to-gray-300 rounded-full flex items-center justify-center">
        <span class="text-4xl">üéØ</span>
      </div>
      <h3 class="text-2xl font-bold text-gray-800 mb-3">Ch∆∞a c√≥ t√†i li·ªáu TOPIK</h3>
      <p class="text-gray-600 mb-6">
        Kh√¥ng t√¨m th·∫•y t√†i li·ªáu TOPIK n√†o ph√π h·ª£p v·ªõi b·ªô l·ªçc hi·ªán t·∫°i.
      </p>
      <button 
        class="px-6 py-3 bg-gradient-to-r from-blue-500 to-indigo-600 text-white rounded-lg font-medium hover:from-blue-600 hover:to-indigo-700 transition-all duration-200"
        onclick="window.TopikGrid?.resetFilters()"
      >
        üîÑ ƒê·∫∑t l·∫°i b·ªô l·ªçc
      </button>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const topikGrid = document.getElementById('topik-actual-grid');
    const emptyState = document.getElementById('topik-empty-state');
    
    // Global TOPIK Grid controller
    window.TopikGrid = {
      // Hi·ªÉn th·ªã/·∫©n grid
      showGrid() {
        if (topikGrid && emptyState) {
          topikGrid.style.display = 'grid';
          emptyState.style.display = 'none';
        }
      },
      
      showEmpty() {
        if (topikGrid && emptyState) {
          topikGrid.style.display = 'none';
          emptyState.style.display = 'block';
        }
      },
      
      // Filter functions
      filterByLevel(level: string) {
        const cards = document.querySelectorAll('.topik-card') as NodeListOf<HTMLElement>;
        let visibleCount = 0;
        
        cards.forEach(card => {
          const cardData = card.querySelector('[data-level]')?.getAttribute('data-level');
          
          if (level === 'all' || cardData === level) {
            card.style.display = 'block';
            visibleCount++;
          } else {
            card.style.display = 'none';
          }
        });
        
        if (visibleCount === 0) {
          this.showEmpty();
        } else {
          this.showGrid();
        }
        
        return visibleCount;
      },
      
      filterByType(type: string) {
        const cards = document.querySelectorAll('.topik-card') as NodeListOf<HTMLElement>;
        let visibleCount = 0;
        
        cards.forEach(card => {
          const cardData = card.querySelector('[data-type]')?.getAttribute('data-type');
          
          if (type === 'all' || cardData === type) {
            card.style.display = 'block';
            visibleCount++;
          } else {
            card.style.display = 'none';
          }
        });
        
        if (visibleCount === 0) {
          this.showEmpty();
        } else {
          this.showGrid();
        }
        
        return visibleCount;
      },
      
      // T√¨m ki·∫øm
      search(query: string) {
        const cards = document.querySelectorAll('.topik-card') as NodeListOf<HTMLElement>;
        let visibleCount = 0;
        const searchQuery = query.toLowerCase().trim();
        
        cards.forEach(card => {
          const title = card.querySelector('h3')?.textContent?.toLowerCase() || '';
          const description = card.querySelector('p')?.textContent?.toLowerCase() || '';
          
          if (searchQuery === '' || title.includes(searchQuery) || description.includes(searchQuery)) {
            card.style.display = 'block';
            visibleCount++;
          } else {
            card.style.display = 'none';
          }
        });
        
        if (visibleCount === 0) {
          this.showEmpty();
        } else {
          this.showGrid();
        }
        
        return visibleCount;
      },
      
      // Reset t·∫•t c·∫£ filters
      resetFilters() {
        const cards = document.querySelectorAll('.topik-card') as NodeListOf<HTMLElement>;
        cards.forEach(card => {
          card.style.display = 'block';
        });
        this.showGrid();
        
        // Reset filter buttons n·∫øu c√≥
        const filterButtons = document.querySelectorAll('.topik-filter-button') as NodeListOf<HTMLElement>;
        filterButtons.forEach(button => {
          button.classList.remove('active');
        });
        
        // Active "all" button
        const allButton = document.querySelector('[data-filter="all"]') as HTMLElement;
        if (allButton) {
          allButton.classList.add('active');
        }
      }
    };
    
    // Initialize
    window.TopikGrid.showGrid();
  });
</script> 