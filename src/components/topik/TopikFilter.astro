---
// TOPIK Filter component - ch·ªâ d√†nh cho TOPIK
export interface Props {
  class?: string;
  showTitle?: boolean;
  title?: string;
  defaultLevel?: string;
  defaultType?: string;
}

const { 
  class: className = '', 
  showTitle = true,
  title = 'B·ªô l·ªçc TOPIK',
  defaultLevel = 'all',
  defaultType = 'all'
} = Astro.props;

// ƒê·ªãnh nghƒ©a c√°c options filter cho TOPIK
const levelOptions = [
  { value: 'all', label: 'T·∫•t c·∫£ c·∫•p ƒë·ªô', icon: 'üéØ', color: 'gray' },
  { value: 'TOPIK I', label: 'TOPIK I', icon: 'üü¢', color: 'green' },
  { value: 'TOPIK II', label: 'TOPIK II', icon: 'üîµ', color: 'blue' }
];

const typeOptions = [
  { value: 'all', label: 'T·∫•t c·∫£ lo·∫°i', icon: 'üìö', color: 'gray' },
  { value: 'vocabulary', label: 'T·ª´ v·ª±ng', icon: 'üìñ', color: 'purple' },
  { value: 'practice', label: 'Luy·ªán t·∫≠p', icon: 'üìù', color: 'orange' },
  { value: 'test', label: 'ƒê·ªÅ thi', icon: 'üéØ', color: 'red' },
  { value: 'listening', label: 'Nghe', icon: 'üéß', color: 'blue' },
  { value: 'reading', label: 'ƒê·ªçc', icon: 'üìÑ', color: 'green' },
  { value: 'writing', label: 'Vi·∫øt', icon: '‚úçÔ∏è', color: 'indigo' },
  { value: 'website', label: 'Website', icon: 'üåê', color: 'cyan' }
];

const difficultyOptions = [
  { value: 'all', label: 'T·∫•t c·∫£ ƒë·ªô kh√≥', icon: '‚ö°', color: 'gray' },
  { value: 'Beginner', label: 'C∆° b·∫£n', icon: 'üü¢', color: 'green' },
  { value: 'Intermediate', label: 'Trung c·∫•p', icon: 'üü°', color: 'yellow' },
  { value: 'Advanced', label: 'N√¢ng cao', icon: 'üî¥', color: 'red' }
];

// Helper function ƒë·ªÉ t·∫°o class m√†u
const getButtonClass = (color: string, isActive = false) => {
  const baseClass = 'px-4 py-2 rounded-lg font-medium text-sm transition-all duration-200 flex items-center gap-2 ';
  
  if (isActive) {
    switch (color) {
      case 'green':
        return baseClass + 'bg-green-500 text-white shadow-lg transform scale-105';
      case 'blue':
        return baseClass + 'bg-blue-500 text-white shadow-lg transform scale-105';
      case 'purple':
        return baseClass + 'bg-purple-500 text-white shadow-lg transform scale-105';
      case 'orange':
        return baseClass + 'bg-orange-500 text-white shadow-lg transform scale-105';
      case 'red':
        return baseClass + 'bg-red-500 text-white shadow-lg transform scale-105';
      case 'indigo':
        return baseClass + 'bg-indigo-500 text-white shadow-lg transform scale-105';
      case 'cyan':
        return baseClass + 'bg-cyan-500 text-white shadow-lg transform scale-105';
      case 'yellow':
        return baseClass + 'bg-yellow-500 text-white shadow-lg transform scale-105';
      default:
        return baseClass + 'bg-gray-700 text-white shadow-lg transform scale-105';
    }
  } else {
    return baseClass + 'bg-white text-gray-700 border border-gray-200 hover:border-gray-300 hover:bg-gray-50 hover:shadow-md';
  }
};
---

<div class={`topik-filter ${className}`}>
  <!-- Title -->
  {showTitle && (
    <div class="text-center mb-6">
      <h3 class="text-xl font-bold text-gray-900 mb-2">{title}</h3>
      <div class="w-16 h-1 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full mx-auto"></div>
    </div>
  )}

  <!-- Search Box -->
  <div class="mb-6">
    <div class="relative max-w-md mx-auto">
      <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
        <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
        </svg>
      </div>
      <input
        type="text"
        id="topik-search"
        placeholder="T√¨m ki·∫øm t√†i li·ªáu TOPIK..."
        class="w-full pl-10 pr-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white shadow-sm"
      />
    </div>
  </div>

  <div class="space-y-6">
    
    <!-- Level Filter -->
    <div class="filter-section">
      <h4 class="text-sm font-semibold text-gray-700 mb-3 flex items-center gap-2">
        üéØ C·∫•p ƒë·ªô TOPIK
      </h4>
      <div class="flex flex-wrap gap-2 justify-center" id="level-filters">
        {levelOptions.map((option) => (
          <button
            class={`topik-filter-button level-filter ${getButtonClass(option.color, option.value === defaultLevel)}`}
            data-filter="level"
            data-value={option.value}
          >
            <span>{option.icon}</span>
            <span>{option.label}</span>
          </button>
        ))}
      </div>
    </div>

    <!-- Type Filter -->
    <div class="filter-section">
      <h4 class="text-sm font-semibold text-gray-700 mb-3 flex items-center gap-2">
        üìö Lo·∫°i t√†i li·ªáu
      </h4>
      <div class="flex flex-wrap gap-2 justify-center" id="type-filters">
        {typeOptions.map((option) => (
          <button
            class={`topik-filter-button type-filter ${getButtonClass(option.color, option.value === defaultType)}`}
            data-filter="type"
            data-value={option.value}
          >
            <span>{option.icon}</span>
            <span>{option.label}</span>
          </button>
        ))}
      </div>
    </div>

    <!-- Difficulty Filter -->
    <div class="filter-section">
      <h4 class="text-sm font-semibold text-gray-700 mb-3 flex items-center gap-2">
        ‚ö° ƒê·ªô kh√≥
      </h4>
      <div class="flex flex-wrap gap-2 justify-center" id="difficulty-filters">
        {difficultyOptions.map((option) => (
          <button
            class={`topik-filter-button difficulty-filter ${getButtonClass(option.color, option.value === 'all')}`}
            data-filter="difficulty"
            data-value={option.value}
          >
            <span>{option.icon}</span>
            <span>{option.label}</span>
          </button>
        ))}
      </div>
    </div>

    <!-- Reset Button -->
    <div class="text-center pt-4 border-t border-gray-200">
      <button
        id="reset-filters"
        class="px-6 py-2 bg-gradient-to-r from-gray-100 to-gray-200 text-gray-700 rounded-lg font-medium hover:from-gray-200 hover:to-gray-300 transition-all duration-200 flex items-center gap-2 mx-auto"
      >
        üîÑ ƒê·∫∑t l·∫°i b·ªô l·ªçc
      </button>
    </div>

    <!-- Results Count -->
    <div class="text-center">
      <div id="filter-results" class="text-sm text-gray-600 font-medium">
        <span id="results-count">0</span> t√†i li·ªáu ƒë∆∞·ª£c t√¨m th·∫•y
      </div>
    </div>
  </div>
</div>

<style>
  .filter-section {
    background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
    border: 1px solid #e2e8f0;
    border-radius: 12px;
    padding: 1.5rem;
  }

  .topik-filter-button {
    cursor: pointer;
    user-select: none;
  }

  .topik-filter-button:hover {
    transform: translateY(-1px);
  }

  .topik-filter-button.active {
    transform: translateY(-2px) scale(1.05);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('topik-search') as HTMLInputElement;
    const resetButton = document.getElementById('reset-filters');
    const resultsCount = document.getElementById('results-count');
    
    let currentFilters = {
      level: 'all',
      type: 'all',
      difficulty: 'all',
      search: ''
    };

    // Update results count
    function updateResultsCount() {
      const visibleCards = document.querySelectorAll('.topik-card:not([style*="display: none"])').length;
      if (resultsCount) {
        resultsCount.textContent = visibleCards.toString();
      }
    }

    // Apply all filters
    function applyFilters() {
      const cards = document.querySelectorAll('.topik-card') as NodeListOf<HTMLElement>;
      let visibleCount = 0;

      cards.forEach(card => {
        let shouldShow = true;

        // Level filter
        if (currentFilters.level !== 'all') {
          const cardLevel = card.querySelector('[data-level]')?.getAttribute('data-level');
          if (cardLevel !== currentFilters.level) {
            shouldShow = false;
          }
        }

        // Type filter
        if (currentFilters.type !== 'all') {
          const cardType = card.querySelector('[data-type]')?.getAttribute('data-type');
          if (cardType !== currentFilters.type) {
            shouldShow = false;
          }
        }

        // Difficulty filter
        if (currentFilters.difficulty !== 'all') {
          const cardDifficulty = card.querySelector('[data-difficulty]')?.getAttribute('data-difficulty');
          if (cardDifficulty !== currentFilters.difficulty) {
            shouldShow = false;
          }
        }

        // Search filter
        if (currentFilters.search) {
          const title = card.querySelector('h3')?.textContent?.toLowerCase() || '';
          const description = card.querySelector('p')?.textContent?.toLowerCase() || '';
          const searchQuery = currentFilters.search.toLowerCase();
          
          if (!title.includes(searchQuery) && !description.includes(searchQuery)) {
            shouldShow = false;
          }
        }

        // Show/hide card
        if (shouldShow) {
          card.style.display = 'block';
          visibleCount++;
        } else {
          card.style.display = 'none';
        }
      });

      // Update grid/empty state
      if (window.TopikGrid) {
        if (visibleCount === 0) {
          window.TopikGrid.showEmpty();
        } else {
          window.TopikGrid.showGrid();
        }
      }

      updateResultsCount();
    }

    // Update button states
    function updateButtonStates() {
      const allFilterButtons = document.querySelectorAll('.topik-filter-button') as NodeListOf<HTMLElement>;
      
      allFilterButtons.forEach(button => {
        const filterType = button.getAttribute('data-filter');
        const filterValue = button.getAttribute('data-value');
        
        if (filterType && filterValue) {
          const isActive = currentFilters[filterType as keyof typeof currentFilters] === filterValue;
          
          if (isActive) {
            button.classList.add('active');
          } else {
            button.classList.remove('active');
          }
        }
      });
    }

    // Filter button click handlers
    const filterButtons = document.querySelectorAll('.topik-filter-button') as NodeListOf<HTMLElement>;
    filterButtons.forEach(button => {
      button.addEventListener('click', function() {
        const filterType = this.getAttribute('data-filter');
        const filterValue = this.getAttribute('data-value');
        
        if (filterType && filterValue) {
          currentFilters[filterType as keyof typeof currentFilters] = filterValue;
          updateButtonStates();
          applyFilters();
        }
      });
    });

    // Search input handler
    if (searchInput) {
      searchInput.addEventListener('input', function() {
        currentFilters.search = this.value.trim();
        applyFilters();
      });
    }

    // Reset button handler
    if (resetButton) {
      resetButton.addEventListener('click', function() {
        currentFilters = {
          level: 'all',
          type: 'all',
          difficulty: 'all',
          search: ''
        };
        
        if (searchInput) {
          searchInput.value = '';
        }
        
        updateButtonStates();
        applyFilters();
      });
    }

    // Initialize
    updateButtonStates();
    applyFilters();

    // Global access
    window.TopikFilter = {
      setLevel: (level: string) => {
        currentFilters.level = level;
        updateButtonStates();
        applyFilters();
      },
      setType: (type: string) => {
        currentFilters.type = type;
        updateButtonStates();
        applyFilters();
      },
      setDifficulty: (difficulty: string) => {
        currentFilters.difficulty = difficulty;
        updateButtonStates();
        applyFilters();
      },
      search: (query: string) => {
        currentFilters.search = query;
        if (searchInput) {
          searchInput.value = query;
        }
        applyFilters();
      },
      reset: () => {
        if (resetButton) {
          resetButton.click();
        }
      }
    };
  });
</script> 