---
export interface Props {
  documents: Array<{
    title: string;
    category: string;
    subcategory?: string;
    type: string;
    description: string;
    pages?: number;
    cards?: number;
    fileSize?: string;
    url: string;
    slug: string;
    date: string;
  }>;
  class?: string;
}

const { documents, class: className = '' } = Astro.props;

// Get unique categories and subcategories
const categories = [...new Set(documents.map(doc => doc.category).filter(Boolean))];
const subcategoriesByCategory = categories.reduce((acc, category) => {
  acc[category] = [...new Set(documents
    .filter(doc => doc.category === category && doc.subcategory)
    .map(doc => doc.subcategory)
    .filter(Boolean)
  )];
  return acc;
}, {} as Record<string, string[]>);

// Count documents by category and subcategory
const getDocumentCount = (category?: string, subcategory?: string) => {
  if (!category) return documents.length;
  if (!subcategory) return documents.filter(doc => doc.category === category).length;
  return documents.filter(doc => doc.category === category && doc.subcategory === subcategory).length;
};
---

<div class={`document-filter ${className}`}>
  <div class="bg-white rounded-2xl shadow-lg border border-gray-100/50 p-6 mb-8 backdrop-blur-sm">
    <!-- Modern Header -->
    <div class="text-center mb-6">
      <h2 class="text-2xl font-bold text-gray-900 mb-2">Lọc tài liệu</h2>
      <p class="text-sm text-gray-500">Tìm kiếm và lọc tài liệu theo danh mục</p>
    </div>

    <!-- Active Filters Display -->
    <div class="mb-6" id="active-filters">
      <div class="flex flex-wrap gap-2" id="active-filter-chips">
        <!-- Active filter chips will be inserted here -->
      </div>
    </div>

    <!-- Main Categories - Large and Prominent -->
    <div class="mb-6">
      <h3 class="text-lg font-bold text-gray-800 mb-4 flex items-center">
        <svg class="w-5 h-5 mr-2 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"/>
        </svg>
        Danh mục chính
      </h3>
      <div class="flex flex-wrap gap-3">
        <!-- All Categories Button -->
        <button 
          type="button"
          class="filter-btn category-filter active px-6 py-3 rounded-xl text-base font-semibold transition-all duration-300 bg-gradient-to-r from-blue-600 to-blue-700 text-white hover:from-blue-700 hover:to-blue-800 hover:shadow-xl hover:-translate-y-1 transform"
          data-category=""
        >
          <span class="flex items-center gap-2">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"/>
            </svg>
            Tất cả ({getDocumentCount()})
          </span>
        </button>
        
        <!-- Individual Category Buttons -->
        {categories.map(category => (
          <button 
            type="button"
            class="filter-btn category-filter px-6 py-3 rounded-xl text-base font-semibold transition-all duration-300 bg-gray-100 text-gray-700 hover:bg-gray-200 hover:shadow-lg hover:-translate-y-0.5 transform border-2 border-transparent hover:border-gray-300"
            data-category={category}
          >
            <span class="flex items-center gap-2">
              <span>{category}</span>
              <span class="px-2 py-1 bg-gray-300 text-gray-600 text-xs rounded-full font-medium">
                {getDocumentCount(category)}
              </span>
            </span>
          </button>
        ))}
      </div>
    </div>

    <!-- Subcategories - Secondary -->
    <div class="mb-6">
      <h3 class="text-base font-semibold text-gray-700 mb-3 flex items-center">
        <svg class="w-4 h-4 mr-2 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"/>
        </svg>
        Danh mục phụ
      </h3>
      <div class="flex flex-wrap gap-2" id="subcategory-filters">
        <!-- All Subcategories Button -->
        <button 
          type="button"
          class="filter-btn subcategory-filter active px-4 py-2 rounded-lg text-sm font-medium transition-all duration-300 bg-gradient-to-r from-purple-600 to-purple-700 text-white hover:from-purple-700 hover:to-purple-800 hover:shadow-lg hover:-translate-y-0.5 transform"
          data-subcategory=""
        >
          Tất cả
        </button>
      </div>
    </div>

    <!-- Search Section - Bottom Position -->
    <div class="mb-6">
      <h3 class="text-base font-semibold text-gray-700 mb-3 flex items-center">
        <svg class="w-4 h-4 mr-2 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
        </svg>
        Tìm kiếm
      </h3>
      <div class="relative">
        <input
          type="text"
          id="document-search"
          placeholder="Tìm kiếm tài liệu..."
          class="w-full px-5 py-4 pl-12 pr-12 border-2 border-gray-200 rounded-2xl focus:ring-4 focus:ring-green-500/20 focus:border-green-500 text-base bg-gray-50/50 backdrop-blur-sm transition-all duration-300 hover:bg-white hover:border-gray-300"
        />
        <!-- Search Icon -->
        <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
          <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
          </svg>
        </div>
        <!-- Clear Search Button -->
        <button
          type="button"
          id="clear-search"
          class="absolute inset-y-0 right-0 pr-4 flex items-center text-gray-400 hover:text-gray-600 transition-all duration-200 hidden"
        >
          <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
          </svg>
        </button>
      </div>
    </div>

    <!-- Results and Actions -->
    <div class="flex items-center justify-between pt-4 border-t border-gray-100">
      <!-- Results Count -->
      <div class="text-sm text-gray-600" id="results-count">
        <span class="font-bold text-lg text-gray-900">{documents.length}</span> tài liệu
      </div>

      <!-- Clear All Filters Button -->
      <button
        type="button"
        id="clear-filters"
        class="hidden px-4 py-2 text-sm font-semibold text-red-600 bg-red-50 border-2 border-red-200 rounded-xl hover:bg-red-100 hover:border-red-300 hover:shadow-lg transition-all duration-300 hover:-translate-y-0.5 transform"
      >
        <svg class="w-4 h-4 mr-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
        </svg>
        Xóa tất cả
      </button>
    </div>
  </div>
</div>

<script define:vars={{ subcategoriesByCategory }}>
document.addEventListener('DOMContentLoaded', function() {
  const categoryButtons = document.querySelectorAll('.category-filter');
  const searchInput = document.getElementById('document-search');
  const resultsCount = document.getElementById('results-count');
  const subcategoryContainer = document.getElementById('subcategory-filters');
  const clearFiltersBtn = document.getElementById('clear-filters');
  const clearSearchBtn = document.getElementById('clear-search');
  const activeFilterChips = document.getElementById('active-filter-chips');
  
  let currentCategory = '';
  let currentSubcategory = '';
  let currentSearch = '';

  // Update subcategory buttons based on selected category
  function updateSubcategoryButtons(selectedCategory) {
    // Clear existing subcategory buttons except "Tất cả"
    const allButton = subcategoryContainer.querySelector('[data-subcategory=""]');
    subcategoryContainer.innerHTML = '';
    subcategoryContainer.appendChild(allButton);
    
    // Reset subcategory selection
    currentSubcategory = '';
    allButton.classList.add('active', 'bg-purple-600', 'text-white');
    allButton.classList.remove('bg-gray-100', 'text-gray-700');
    
    // Add subcategory buttons for selected category
    if (selectedCategory && subcategoriesByCategory[selectedCategory]) {
      subcategoriesByCategory[selectedCategory].forEach(subcategory => {
        const button = document.createElement('button');
        button.type = 'button';
        button.className = 'filter-btn subcategory-filter px-4 py-2 rounded-full text-sm font-medium transition-all duration-200 bg-gray-100 text-gray-700 hover:bg-gray-200';
        button.setAttribute('data-subcategory', subcategory);
        button.textContent = subcategory;
        
        button.addEventListener('click', function() {
          handleSubcategoryFilter(this);
        });
        
        subcategoryContainer.appendChild(button);
      });
    }
  }

  // Handle category filter
  function handleCategoryFilter(button) {
    // Remove active class from all category buttons
    categoryButtons.forEach(btn => {
      btn.classList.remove('active', 'bg-blue-600', 'text-white');
      btn.classList.add('bg-gray-100', 'text-gray-700');
    });
    
    // Add active class to clicked button
    button.classList.add('active', 'bg-blue-600', 'text-white');
    button.classList.remove('bg-gray-100', 'text-gray-700');
    
    currentCategory = button.getAttribute('data-category');
    updateSubcategoryButtons(currentCategory);
    filterDocuments();
  }

  // Handle subcategory filter
  function handleSubcategoryFilter(button) {
    // Remove active class from all subcategory buttons
    document.querySelectorAll('.subcategory-filter').forEach(btn => {
      btn.classList.remove('active', 'bg-purple-600', 'text-white');
      btn.classList.add('bg-gray-100', 'text-gray-700');
    });
    
    // Add active class to clicked button
    button.classList.add('active', 'bg-purple-600', 'text-white');
    button.classList.remove('bg-gray-100', 'text-gray-700');
    
    currentSubcategory = button.getAttribute('data-subcategory');
    filterDocuments();
  }

  // Update active filter chips
  function updateActiveFilterChips() {
    if (!activeFilterChips) return;
    
    activeFilterChips.innerHTML = '';
    
    // Add category chip
    if (currentCategory) {
      const categoryChip = document.createElement('div');
      categoryChip.className = 'inline-flex items-center gap-2 px-3 py-1.5 bg-blue-100 text-blue-800 text-sm font-medium rounded-full border border-blue-200';
      categoryChip.innerHTML = `
        <span>${currentCategory}</span>
        <button type="button" class="clear-chip-btn text-blue-600 hover:text-blue-800" data-type="category">
          <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
          </svg>
        </button>
      `;
      activeFilterChips.appendChild(categoryChip);
    }
    
    // Add subcategory chip
    if (currentSubcategory) {
      const subcategoryChip = document.createElement('div');
      subcategoryChip.className = 'inline-flex items-center gap-2 px-3 py-1.5 bg-purple-100 text-purple-800 text-sm font-medium rounded-full border border-purple-200';
      subcategoryChip.innerHTML = `
        <span>${currentSubcategory}</span>
        <button type="button" class="clear-chip-btn text-purple-600 hover:text-purple-800" data-type="subcategory">
          <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
          </svg>
        </button>
      `;
      activeFilterChips.appendChild(subcategoryChip);
    }
    
    // Add search chip
    if (currentSearch) {
      const searchChip = document.createElement('div');
      searchChip.className = 'inline-flex items-center gap-2 px-3 py-1.5 bg-green-100 text-green-800 text-sm font-medium rounded-full border border-green-200';
      searchChip.innerHTML = `
        <span>"${currentSearch}"</span>
        <button type="button" class="clear-chip-btn text-green-600 hover:text-green-800" data-type="search">
          <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
          </svg>
        </button>
      `;
      activeFilterChips.appendChild(searchChip);
    }
    
    // Add event listeners to chip clear buttons
    activeFilterChips.querySelectorAll('.clear-chip-btn').forEach(btn => {
      btn.addEventListener('click', function() {
        const type = this.getAttribute('data-type');
        if (type === 'category') {
          const allCategoryBtn = document.querySelector('[data-category=""]');
          if (allCategoryBtn) handleCategoryFilter(allCategoryBtn);
        } else if (type === 'subcategory') {
          const allSubcategoryBtn = document.querySelector('[data-subcategory=""]');
          if (allSubcategoryBtn) handleSubcategoryFilter(allSubcategoryBtn);
        } else if (type === 'search') {
          clearSearch();
        }
      });
    });
  }

  // Filter documents based on current filters
  function filterDocuments() {
    const documentCards = document.querySelectorAll('.document-card-wrapper');
    let visibleCount = 0;

    documentCards.forEach(card => {
      const cardCategory = card.getAttribute('data-category');
      const cardSubcategory = card.getAttribute('data-subcategory');
      const cardTitle = card.getAttribute('data-title')?.toLowerCase() || '';
      
      let isVisible = true;

      // Category filter
      if (currentCategory && cardCategory !== currentCategory) {
        isVisible = false;
      }

      // Subcategory filter
      if (currentSubcategory && cardSubcategory !== currentSubcategory) {
        isVisible = false;
      }

      // Search filter
      if (currentSearch && !cardTitle.includes(currentSearch.toLowerCase())) {
        isVisible = false;
      }

      // Show/hide card
      if (isVisible) {
        card.style.display = 'block';
        visibleCount++;
      } else {
        card.style.display = 'none';
      }
    });

    // Update results count
    if (resultsCount) {
      resultsCount.innerHTML = `<span class="font-bold text-lg text-gray-900">${visibleCount}</span> tài liệu`;
    }

    // Update active filter chips
    updateActiveFilterChips();

    // Show/hide clear filters button
    const hasActiveFilters = currentCategory || currentSubcategory || currentSearch;
    if (clearFiltersBtn) {
      if (hasActiveFilters) {
        clearFiltersBtn.classList.remove('hidden');
      } else {
        clearFiltersBtn.classList.add('hidden');
      }
    }
  }

  // Clear search only
  function clearSearch() {
    if (searchInput) {
      searchInput.value = '';
    }
    currentSearch = '';
    filterDocuments();
  }

  // Clear all filters
  function clearAllFilters() {
    // Reset category
    categoryButtons.forEach(btn => {
      btn.classList.remove('active', 'bg-blue-600', 'text-white');
      btn.classList.add('bg-gray-100', 'text-gray-700');
    });
    const allCategoryBtn = document.querySelector('[data-category=""]');
    if (allCategoryBtn) {
      allCategoryBtn.classList.add('active', 'bg-blue-600', 'text-white');
      allCategoryBtn.classList.remove('bg-gray-100', 'text-gray-700');
    }
    currentCategory = '';

    // Reset subcategory
    document.querySelectorAll('.subcategory-filter').forEach(btn => {
      btn.classList.remove('active', 'bg-purple-600', 'text-white');
      btn.classList.add('bg-gray-100', 'text-gray-700');
    });
    const allSubcategoryBtn = document.querySelector('[data-subcategory=""]');
    if (allSubcategoryBtn) {
      allSubcategoryBtn.classList.add('active', 'bg-purple-600', 'text-white');
      allSubcategoryBtn.classList.remove('bg-gray-100', 'text-gray-700');
    }
    currentSubcategory = '';

    // Reset search
    clearSearch();

    // Update subcategories
    updateSubcategoryButtons('');
    
    // Filter documents
    filterDocuments();
  }

  // Event listeners
  categoryButtons.forEach(button => {
    button.addEventListener('click', function() {
      handleCategoryFilter(this);
    });
  });


  if (clearFiltersBtn) {
    clearFiltersBtn.addEventListener('click', function() {
      clearAllFilters();
    });
  }

  if (clearSearchBtn) {
    clearSearchBtn.addEventListener('click', function() {
      clearSearch();
    });
  }

  // Show/hide clear search button based on input
  if (searchInput) {
    searchInput.addEventListener('input', function() {
      currentSearch = this.value;
      filterDocuments();
      
      // Show/hide clear search button
      if (clearSearchBtn) {
        if (this.value.trim()) {
          clearSearchBtn.style.display = 'flex';
        } else {
          clearSearchBtn.style.display = 'none';
        }
      }
    });
  }

  // Initialize subcategories for "All" category
  updateSubcategoryButtons('');
});
</script>

<style>
/* Performance-optimized animations */
* {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* Hardware acceleration for smooth animations */
.filter-btn, 
#document-search, 
#clear-search, 
#clear-filters,
.clear-chip-btn {
  will-change: transform, box-shadow, background-color;
  transform: translateZ(0);
  backface-visibility: hidden;
  perspective: 1000px;
}

/* Ultra-smooth filter buttons */
.filter-btn {
  white-space: nowrap;
  cursor: pointer;
  border: 2px solid transparent;
  transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  position: relative;
  overflow: hidden;
  transform: translateZ(0);
}

/* Optimized shimmer effect */
.filter-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
  transition: left 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  transform: translateZ(0);
}

.filter-btn:hover::before {
  left: 100%;
}

/* Enhanced hover effects with better visual feedback */
.filter-btn:hover {
  transform: translateY(-2px) translateZ(0);
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.12);
  border-color: rgba(59, 130, 246, 0.3);
}

.filter-btn:active {
  transform: translateY(-1px) translateZ(0);
  transition: transform 0.1s ease-out;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
}

.filter-btn.active {
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
}

/* Enhanced hover effects with color transitions */
.filter-btn:hover:not(.active) {
  background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%) !important;
  color: #0f172a !important;
  border-color: #cbd5e1 !important;
  box-shadow: 0 6px 20px rgba(0, 0, 0, 0.08);
}

/* Special hover for active buttons */
.filter-btn.active:hover {
  transform: translateY(-3px) translateZ(0);
  box-shadow: 0 12px 30px rgba(0, 0, 0, 0.15);
}

/* Category button specific hover */
.filter-btn.category-filter:hover:not(.active) {
  background: linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%) !important;
  color: #1e40af !important;
  border-color: #93c5fd !important;
}

/* Subcategory button specific hover */
.filter-btn.subcategory-filter:hover:not(.active) {
  background: linear-gradient(135deg, #f3e8ff 0%, #e9d5ff 100%) !important;
  color: #7c3aed !important;
  border-color: #c4b5fd !important;
}

/* Enhanced focus states with reduced motion */
.document-filter input:focus {
  outline: none;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

/* Enhanced search input */
#document-search {
  background: linear-gradient(135deg, #f8fafc 0%, #ffffff 100%);
  transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  transform: translateZ(0);
}

#document-search:hover {
  background: linear-gradient(135deg, #ffffff 0%, #f1f5f9 100%);
  border-color: #cbd5e1;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
}

#document-search:focus {
  background: #ffffff;
  border-color: #10b981;
  box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.1), 0 4px 20px rgba(0, 0, 0, 0.08);
  transform: translateY(-1px) translateZ(0);
}

#document-search:focus:hover {
  box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.15), 0 6px 25px rgba(0, 0, 0, 0.1);
}

/* Enhanced clear search button */
#clear-search {
  transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  transform: translateZ(0);
  border-radius: 50%;
  padding: 4px;
}

#clear-search:hover {
  transform: scale(1.1) translateZ(0);
  color: #dc2626;
  background-color: rgba(239, 68, 68, 0.1);
  box-shadow: 0 2px 8px rgba(239, 68, 68, 0.2);
}

#clear-search:active {
  transform: scale(0.95) translateZ(0);
  background-color: rgba(239, 68, 68, 0.2);
}

/* Enhanced clear button */
#clear-filters {
  transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  transform: translateZ(0);
}

#clear-filters:hover {
  transform: translateY(-2px) translateZ(0);
  box-shadow: 0 8px 25px rgba(239, 68, 68, 0.2);
  background: linear-gradient(135deg, #fef2f2 0%, #fee2e2 100%);
  border-color: #fca5a5;
}

#clear-filters:active {
  transform: translateY(-1px) translateZ(0);
  box-shadow: 0 4px 15px rgba(239, 68, 68, 0.25);
}

/* Enhanced chip animations */
.clear-chip-btn {
  transition: all 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  transform: translateZ(0);
  border-radius: 50%;
  padding: 2px;
}

.clear-chip-btn:hover {
  transform: scale(1.15) translateZ(0);
  background-color: rgba(0, 0, 0, 0.1);
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.15);
}

.clear-chip-btn:active {
  transform: scale(0.9) translateZ(0);
  background-color: rgba(0, 0, 0, 0.2);
}

/* Performance-optimized container */
.document-filter {
  background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
  transform: translateZ(0);
}

/* Mobile optimizations */
@media (max-width: 768px) {
  .filter-btn {
    padding: 0.75rem 1rem;
    font-size: 0.875rem;
    transition: all 0.15s ease-out;
  }
  
  #document-search {
    padding: 0.875rem 1rem;
    font-size: 0.875rem;
  }
  
  /* Reduce animations on mobile for better performance */
  .filter-btn:hover {
    transform: translateY(-0.5px) translateZ(0);
  }
  
  .filter-btn::before {
    display: none; /* Disable shimmer on mobile */
  }
}

/* Reduced motion for accessibility */
@media (prefers-reduced-motion: reduce) {
  .filter-btn,
  #document-search,
  #clear-search,
  #clear-filters,
  .clear-chip-btn {
    transition: none;
  }
  
  .filter-btn::before {
    display: none;
  }
  
  .filter-btn:hover {
    transform: none;
  }
}

/* Ultra-smooth animations */
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(10px) translateZ(0);
  }
  to {
    opacity: 1;
    transform: translateY(0) translateZ(0);
  }
}

.document-filter {
  animation: fadeInUp 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}

/* Optimized glass morphism */
.document-filter > div {
  backdrop-filter: blur(8px);
  background: rgba(255, 255, 255, 0.95);
  transform: translateZ(0);
}

/* Enhanced touch optimizations for mobile */
@media (hover: none) and (pointer: coarse) {
  .filter-btn:hover {
    transform: none;
    box-shadow: none;
  }
  
  .filter-btn:active {
    transform: scale(0.96) translateZ(0);
    transition: transform 0.1s ease-out;
    background: linear-gradient(135deg, #e2e8f0 0%, #cbd5e1 100%) !important;
  }
  
  .filter-btn.active:active {
    transform: scale(0.98) translateZ(0);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }
  
  #clear-search:hover,
  .clear-chip-btn:hover {
    transform: none;
  }
  
  #clear-search:active {
    transform: scale(0.9) translateZ(0);
    background-color: rgba(239, 68, 68, 0.2);
  }
  
  .clear-chip-btn:active {
    transform: scale(0.85) translateZ(0);
    background-color: rgba(0, 0, 0, 0.2);
  }
  
  #document-search:active {
    transform: scale(0.99) translateZ(0);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }
}

/* GPU acceleration for smooth scrolling */
.document-filter {
  contain: layout style paint;
}

/* Optimize repaints */
.filter-btn,
#document-search {
  contain: layout style;
}
</style>
