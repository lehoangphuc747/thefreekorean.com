---
export interface Props {
  documents: Array<{
    title: string;
    category: string;
    subcategory?: string;
    type: string;
    description: string;
    pages?: number;
    cards?: number;
    fileSize?: string;
    url: string;
    slug: string;
    date: string;
  }>;
  class?: string;
}

const { documents, class: className = '' } = Astro.props;

// Get unique categories and subcategories
const categories = [...new Set(documents.map(doc => doc.category).filter(Boolean))];
const subcategoriesByCategory = categories.reduce((acc, category) => {
  acc[category] = [...new Set(documents
    .filter(doc => doc.category === category && doc.subcategory)
    .map(doc => doc.subcategory)
  )];
  return acc;
}, {} as Record<string, string[]>);

// Count documents by category and subcategory
const getDocumentCount = (category?: string, subcategory?: string) => {
  if (!category) return documents.length;
  if (!subcategory) return documents.filter(doc => doc.category === category).length;
  return documents.filter(doc => doc.category === category && doc.subcategory === subcategory).length;
};
---

<div class={`filter-section ${className}`}>
  <div class="bg-white rounded-xl shadow-lg p-4 mb-8">
    <!-- Categories Filter -->
    <div class="mb-4">
      <div class="flex flex-wrap gap-2">
        <!-- All Categories Button -->
        <button 
          type="button"
          class="filter-btn category-filter active px-3 py-2 rounded-full text-sm font-medium transition-all duration-200 bg-blue-600 text-white hover:bg-blue-700"
          data-category=""
        >
          Tất cả ({getDocumentCount()})
        </button>
        
        <!-- Individual Category Buttons -->
        {categories.map(category => (
          <button 
            type="button"
            class="filter-btn category-filter px-3 py-2 rounded-full text-sm font-medium transition-all duration-200 bg-gray-100 text-gray-700 hover:bg-gray-200"
            data-category={category}
          >
            {category} ({getDocumentCount(category)})
          </button>
        ))}
      </div>
    </div>

    <!-- Subcategories Filter -->
    <div class="mb-4">
      <div class="flex flex-wrap gap-2" id="subcategory-filters">
        <!-- All Subcategories Button -->
        <button 
          type="button"
          class="filter-btn subcategory-filter active px-3 py-2 rounded-full text-sm font-medium transition-all duration-200 bg-purple-600 text-white hover:bg-purple-700"
          data-subcategory=""
        >
          Tất cả
        </button>
      </div>
    </div>

    <!-- Search and Results -->
    <div class="flex items-center justify-between gap-4">
      <!-- Search -->
      <div class="relative flex-1 max-w-md">
        <input
          type="text"
          id="document-search"
          placeholder="Tìm kiếm tài liệu..."
          class="w-full px-4 py-2 pl-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm"
        />
        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          <svg class="h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
          </svg>
        </div>
      </div>

      <!-- Results Count -->
      <div class="text-sm text-gray-500 whitespace-nowrap" id="results-count">
        {documents.length} tài liệu
      </div>
    </div>
  </div>
</div>

<script define:vars={{ subcategoriesByCategory }}>
document.addEventListener('DOMContentLoaded', function() {
  const categoryButtons = document.querySelectorAll('.category-filter');
  const searchInput = document.getElementById('document-search');
  const resultsCount = document.getElementById('results-count');
  const subcategoryContainer = document.getElementById('subcategory-filters');
  
  let currentCategory = '';
  let currentSubcategory = '';
  let currentSearch = '';

  // Update subcategory buttons based on selected category
  function updateSubcategoryButtons(selectedCategory) {
    // Clear existing subcategory buttons except "Tất cả"
    const allButton = subcategoryContainer.querySelector('[data-subcategory=""]');
    subcategoryContainer.innerHTML = '';
    subcategoryContainer.appendChild(allButton);
    
    // Reset subcategory selection
    currentSubcategory = '';
    allButton.classList.add('active', 'bg-purple-600', 'text-white');
    allButton.classList.remove('bg-gray-100', 'text-gray-700');
    
    // Add subcategory buttons for selected category
    if (selectedCategory && subcategoriesByCategory[selectedCategory]) {
      subcategoriesByCategory[selectedCategory].forEach(subcategory => {
        const button = document.createElement('button');
        button.type = 'button';
        button.className = 'filter-btn subcategory-filter px-4 py-2 rounded-full text-sm font-medium transition-all duration-200 bg-gray-100 text-gray-700 hover:bg-gray-200';
        button.setAttribute('data-subcategory', subcategory);
        button.textContent = subcategory;
        
        button.addEventListener('click', function() {
          handleSubcategoryFilter(this);
        });
        
        subcategoryContainer.appendChild(button);
      });
    }
  }

  // Handle category filter
  function handleCategoryFilter(button) {
    // Remove active class from all category buttons
    categoryButtons.forEach(btn => {
      btn.classList.remove('active', 'bg-blue-600', 'text-white');
      btn.classList.add('bg-gray-100', 'text-gray-700');
    });
    
    // Add active class to clicked button
    button.classList.add('active', 'bg-blue-600', 'text-white');
    button.classList.remove('bg-gray-100', 'text-gray-700');
    
    currentCategory = button.getAttribute('data-category');
    updateSubcategoryButtons(currentCategory);
    filterDocuments();
  }

  // Handle subcategory filter
  function handleSubcategoryFilter(button) {
    // Remove active class from all subcategory buttons
    document.querySelectorAll('.subcategory-filter').forEach(btn => {
      btn.classList.remove('active', 'bg-purple-600', 'text-white');
      btn.classList.add('bg-gray-100', 'text-gray-700');
    });
    
    // Add active class to clicked button
    button.classList.add('active', 'bg-purple-600', 'text-white');
    button.classList.remove('bg-gray-100', 'text-gray-700');
    
    currentSubcategory = button.getAttribute('data-subcategory');
    filterDocuments();
  }

  // Filter documents based on current filters
  function filterDocuments() {
    const documentCards = document.querySelectorAll('.document-card-wrapper');
    let visibleCount = 0;

    documentCards.forEach(card => {
      const cardCategory = card.getAttribute('data-category');
      const cardSubcategory = card.getAttribute('data-subcategory');
      const cardTitle = card.getAttribute('data-title')?.toLowerCase() || '';
      
      let isVisible = true;

      // Category filter
      if (currentCategory && cardCategory !== currentCategory) {
        isVisible = false;
      }

      // Subcategory filter
      if (currentSubcategory && cardSubcategory !== currentSubcategory) {
        isVisible = false;
      }

      // Search filter
      if (currentSearch && !cardTitle.includes(currentSearch.toLowerCase())) {
        isVisible = false;
      }

      // Show/hide card
      if (isVisible) {
        card.style.display = 'block';
        visibleCount++;
      } else {
        card.style.display = 'none';
      }
    });

    // Update results count
    if (resultsCount) {
      resultsCount.textContent = `${visibleCount} tài liệu`;
    }
  }

  // Event listeners
  categoryButtons.forEach(button => {
    button.addEventListener('click', function() {
      handleCategoryFilter(this);
    });
  });

  if (searchInput) {
    searchInput.addEventListener('input', function() {
      currentSearch = this.value;
      filterDocuments();
    });
  }

  // Initialize subcategories for "All" category
  updateSubcategoryButtons('');
});
</script>

<style>
.filter-btn {
  white-space: nowrap;
  cursor: pointer;
  border: 1px solid transparent;
}

.filter-btn:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.filter-btn.active {
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}
</style>
