---
export interface Section {
  subtitle: string;
  icon: string;
  content: string | string[];
}

export interface Props {
  title?: string;
  sections: Section[];
}

const { title = 'üìñ √ù nghƒ©a v√† c√°ch d√πng', sections } = Astro.props;

const icons = {
  lightbulb: `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-purple-500" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 11-8.486-8.486A5 5 0 0112 6a5 5 0 015 5 5 5 0 01-5 5z" /></svg>`,
  pencil: `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" /></svg>`
};

// H·ªó tr·ª£ in ƒë·∫≠m v·ªõi c√∫ ph√°p **text** ho·∫∑c __text__ v√† cho ph√©p HTML inline (v√≠ d·ª• <strong>...)
function renderContent(content: string): string {
  if (!content) return content;
  let html = content;
  // H·ªó tr·ª£ inline code b·∫±ng backticks `...`
  html = html.replace(/`([^`]+)`/g, '<code>$1</code>');
  // Chuy·ªÉn markdown: **...** = ƒë·∫≠m xanh d∆∞∆°ng, __...__ = ƒë·∫≠m cam
  html = html.replace(/__(.+?)__/g, '<strong class="text-orange-600 font-bold">$1</strong>');
  html = html.replace(/\*\*(.+?)\*\*/g, '<strong class="text-blue-600 font-bold">$1</strong>');
  // ƒê·∫£m b·∫£o m·ªçi th·∫ª <strong> kh√¥ng c√≥ class s·∫Ω m·∫∑c ƒë·ªãnh ƒë·∫≠m xanh d∆∞∆°ng
  html = html.replace(/<strong(?![^>]*class=)([^>]*)>/g, '<strong class="text-blue-600 font-bold"$1>');
  // ƒê·∫£m b·∫£o m·ªçi th·∫ª <code> kh√¥ng c√≥ class s·∫Ω c√≥ style r√µ r√†ng, d·ªÖ ƒë·ªçc
  // - n·ªÅn ƒë·∫≠m v·ª´a ph·∫£i, ch·ªØ s√°ng
  // - vi·ªÅn m·∫£nh, bo g√≥c
  // - font mono, kh√¥ng xu·ªëng d√≤ng, cƒÉn gi·ªØa theo d√≤ng
  html = html.replace(
    /<code(?![^>]*class=)([^>]*)>/g,
    '<code class="bg-slate-700 text-slate-50 px-1.5 py-0.5 rounded-md font-mono text-[0.95em] align-middle whitespace-nowrap ring-1 ring-slate-300/40"$1>'
  );
  return html;
}
---

<section class="bg-white/90 backdrop-blur rounded-2xl border border-slate-200 shadow-sm p-5 md:p-6">
  <div class="flex items-center justify-between flex-wrap gap-3 mb-6">
    <h2 class="text-2xl font-semibold text-slate-900 tracking-tight">{title}</h2>
    <span class="inline-flex items-center gap-2 text-sm font-medium text-slate-500 bg-slate-100 px-3 py-1.5 rounded-full">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
        <path stroke-linecap="round" stroke-linejoin="round" d="M13 16h-1v-4h-1m1-4h.01M12 20a8 8 0 100-16 8 8 0 000 16z" />
      </svg>
      G·ª£i √Ω h·ªçc nhanh
    </span>
  </div>
  <div class="space-y-6">
    {sections.map((section) => (
      <article class="space-y-3">
        <div class="flex items-center gap-3 text-slate-800">
          <Fragment set:html={icons[section.icon]} />
          <h3 class="text-lg font-semibold">{section.subtitle}</h3>
        </div>
        <div class="text-slate-600 leading-relaxed pl-9">
          {Array.isArray(section.content) ? (
            <ul class="list-none space-y-2">
              {section.content.map((line) => (
                <li class="relative pl-5">
                  <span class="absolute left-0 top-2 h-1.5 w-1.5 rounded-full bg-purple-400"></span>
                  <Fragment set:html={renderContent(line)} />
                </li>
              ))}
            </ul>
          ) : (
            <div class="bg-slate-50 text-slate-700 rounded-xl px-4 py-3">
              <Fragment set:html={renderContent(section.content)} />
            </div>
          )}
        </div>
      </article>
    ))}
  </div>
</section>
