---
// Reading Progress Bar Component
// Shows reading progress as user scrolls through content
// Features: Smooth animation, customizable colors, multiple positions

export interface Props {
  position?: 'top' | 'bottom' | 'inline'; // Where to display the progress bar
  color?: string; // Custom color for the progress bar
  height?: string; // Height of the progress bar
  class?: string;
  showPercentage?: boolean; // Show percentage text
  target?: string; // CSS selector for target content area
}

const { 
  position = 'top',
  color = 'linear-gradient(90deg, #3245ff 0%, #bc52ee 100%)',
  height = '3px',
  class: className = '',
  showPercentage = false,
  target = '.prose, .document-content, #doc-content, main'
} = Astro.props;

// Generate unique ID for this instance
const progressId = `reading-progress-${Math.random().toString(36).substr(2, 9)}`;
---

<div 
  class={`reading-progress reading-progress-${position} ${className}`}
  id={progressId}
  data-target={target}
  data-show-percentage={showPercentage}
>
  <div class="progress-container">
    <div class="progress-bar" style={`background: ${color}; height: ${height};`}></div>
    {showPercentage && (
      <div class="progress-percentage">
        <span class="percentage-text">0%</span>
      </div>
    )}
  </div>
</div>

<style>
  .reading-progress {
    z-index: 1000;
    transition: all 0.3s ease;
  }

  /* Position variants */
  .reading-progress-top {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
  }

  .reading-progress-bottom {
    position: fixed;
    bottom: 0;
    left: 0;
    width: 100%;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border-top: 1px solid rgba(0, 0, 0, 0.1);
  }

  .reading-progress-inline {
    position: relative;
    width: 100%;
    margin: 1rem 0;
    background: rgba(0, 0, 0, 0.05);
    border-radius: 8px;
    overflow: hidden;
  }

  .progress-container {
    position: relative;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
  }

  .progress-bar {
    width: 0%;
    height: 3px;
    border-radius: 2px;
    transition: width 0.1s ease-out;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .reading-progress-inline .progress-bar {
    border-radius: 0;
  }

  .progress-percentage {
    position: absolute;
    right: 1rem;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(255, 255, 255, 0.9);
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.75rem;
    font-weight: 600;
    color: #374151;
    backdrop-filter: blur(4px);
    border: 1px solid rgba(0, 0, 0, 0.1);
  }

  .reading-progress-inline .progress-percentage {
    background: rgba(50, 69, 255, 0.1);
    color: #3245ff;
    border-color: rgba(50, 69, 255, 0.2);
  }

  .percentage-text {
    min-width: 2.5rem;
    text-align: center;
    display: inline-block;
  }

  /* Enhanced styles for top/bottom positions */
  .reading-progress-top .progress-container,
  .reading-progress-bottom .progress-container {
    height: 4px;
    background: transparent;
  }

  /* Animation for progress bar */
  @keyframes progressPulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.8; }
  }

  .progress-bar.reading-complete {
    animation: progressPulse 2s ease-in-out;
  }

  /* Mobile optimizations */
  @media (max-width: 768px) {
    .progress-percentage {
      font-size: 0.7rem;
      padding: 0.2rem 0.4rem;
      right: 0.5rem;
    }

    .reading-progress-top .progress-container,
    .reading-progress-bottom .progress-container {
      height: 3px;
    }
  }

  /* Dark mode support */
  @media (prefers-color-scheme: dark) {
    .reading-progress-top,
    .reading-progress-bottom {
      background: rgba(15, 23, 42, 0.95);
      border-color: rgba(255, 255, 255, 0.1);
    }

    .progress-percentage {
      background: rgba(15, 23, 42, 0.9);
      color: #e2e8f0;
      border-color: rgba(255, 255, 255, 0.1);
    }
  }

  /* Smooth hide/show on scroll */
  .reading-progress.hidden {
    transform: translateY(-100%);
    opacity: 0;
  }

  .reading-progress-bottom.hidden {
    transform: translateY(100%);
  }

  /* Custom color variants */
  .progress-theme-blue .progress-bar {
    background: linear-gradient(90deg, #3b82f6 0%, #1d4ed8 100%);
  }

  .progress-theme-green .progress-bar {
    background: linear-gradient(90deg, #10b981 0%, #059669 100%);
  }

  .progress-theme-purple .progress-bar {
    background: linear-gradient(90deg, #8b5cf6 0%, #7c3aed 100%);
  }

  .progress-theme-gradient .progress-bar {
    background: linear-gradient(90deg, #ff6b6b 0%, #4ecdc4 50%, #45b7d1 100%);
  }
</style>

<script>
  // Reading Progress functionality
  document.addEventListener('DOMContentLoaded', function() {
    const progressBars = document.querySelectorAll('.reading-progress');
    
    progressBars.forEach(progressContainer => {
      const progressBar = progressContainer.querySelector('.progress-bar') as HTMLElement;
      const percentageText = progressContainer.querySelector('.percentage-text') as HTMLElement;
      const targetSelector = progressContainer.getAttribute('data-target') || '.prose, .document-content, #doc-content, main';
      const showPercentage = progressContainer.getAttribute('data-show-percentage') === 'true';
      
      if (!progressBar) return;

      // Find the target content area
      const targetContent = document.querySelector(targetSelector);
      if (!targetContent) {
        console.warn('ReadingProgress: Target content not found for selector:', targetSelector);
        return;
      }

      let isReading = false;
      let hideTimeout: NodeJS.Timeout;

      function updateProgress() {
        // Get target content bounds
        const contentRect = targetContent.getBoundingClientRect();
        const contentTop = contentRect.top + window.pageYOffset;
        const contentHeight = contentRect.height;
        const windowHeight = window.innerHeight;
        const scrollTop = window.pageYOffset;

        // Calculate progress based on content area
        const contentStart = contentTop;
        const contentEnd = contentTop + contentHeight - windowHeight;
        
        let progress = 0;
        
        if (scrollTop >= contentStart && scrollTop <= contentEnd) {
          // Reading content
          progress = ((scrollTop - contentStart) / (contentEnd - contentStart)) * 100;
          isReading = true;
        } else if (scrollTop > contentEnd) {
          // Past content
          progress = 100;
          isReading = true;
        } else {
          // Before content
          progress = 0;
          isReading = false;
        }

        // Clamp progress between 0 and 100
        progress = Math.max(0, Math.min(100, progress));

        // Update progress bar
        progressBar.style.width = `${progress}%`;
        
        // Update percentage text
        if (showPercentage && percentageText) {
          percentageText.textContent = `${Math.round(progress)}%`;
        }

        // Add completion animation
        if (progress >= 100 && !progressBar.classList.contains('reading-complete')) {
          progressBar.classList.add('reading-complete');
          setTimeout(() => {
            progressBar.classList.remove('reading-complete');
          }, 2000);
        }

        // Auto-hide when not reading (for fixed positions)
        const position = progressContainer.classList.contains('reading-progress-top') ? 'top' :
                        progressContainer.classList.contains('reading-progress-bottom') ? 'bottom' : 'inline';
        
        if (position !== 'inline') {
          clearTimeout(hideTimeout);
          
          if (isReading && progress > 0) {
            progressContainer.classList.remove('hidden');
          } else {
            hideTimeout = setTimeout(() => {
              progressContainer.classList.add('hidden');
            }, 1000);
          }
        }
      }

      // Throttled scroll handler
      let ticking = false;
      function onScroll() {
        if (!ticking) {
          requestAnimationFrame(() => {
            updateProgress();
            ticking = false;
          });
          ticking = true;
        }
      }

      // Initialize
      updateProgress();

      // Listen to scroll events
      window.addEventListener('scroll', onScroll, { passive: true });
      window.addEventListener('resize', updateProgress);

      // Store reference for external access
      if (!window.ReadingProgress) {
        window.ReadingProgress = {};
      }
      
      window.ReadingProgress[progressContainer.id] = {
        update: updateProgress,
        getProgress: () => {
          const width = progressBar.style.width;
          return parseFloat(width.replace('%', '')) || 0;
        },
        setTarget: (newSelector: string) => {
          progressContainer.setAttribute('data-target', newSelector);
          updateProgress();
        }
      };
    });

    // Global reading progress functions
    window.ReadingProgress = window.ReadingProgress || {};
    window.ReadingProgress.updateAll = function() {
      progressBars.forEach(container => {
        const instance = window.ReadingProgress[container.id];
        if (instance) {
          instance.update();
        }
      });
    };
  });
</script> 