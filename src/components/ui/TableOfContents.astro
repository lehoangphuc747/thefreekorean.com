---
// Table of Contents component
// Automatically generates TOC from h1, h2, h3 headings in content
// Features: Smooth scroll, active section highlighting, collapse/expand

export interface Props {
  class?: string;
  title?: string;
  showTitle?: boolean;
  collapsible?: boolean;
  maxDepth?: number; // 1=h1 only, 2=h1+h2, 3=h1+h2+h3
}

const { 
  class: className = '', 
  title = 'Má»¥c lá»¥c',
  showTitle = true,
  collapsible = true,
  maxDepth = 3
} = Astro.props;
---

<div class={`table-of-contents ${className}`} id="table-of-contents">
  {showTitle && (
    <div class="toc-header">
      <h2 class="toc-title">{title}</h2>
      {collapsible && (
        <button class="toc-toggle" id="toc-toggle" aria-label="Toggle table of contents">
          <svg class="toc-toggle-icon" width="16" height="16" viewBox="0 0 24 24">
            <path d="M6 9l6 6 6-6" stroke="currentColor" stroke-width="2" fill="none" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </button>
      )}
    </div>
  )}
  
  <nav class="toc-nav" id="toc-nav">
    <!-- Reading Progress inside TOC -->
    <div class="toc-progress" id="toc-progress">
      <div class="toc-progress-bar" id="toc-progress-bar"></div>
    </div>
    
    <ul class="toc-list" id="toc-list">
      <!-- TOC items will be generated by JavaScript -->
    </ul>
    
    <!-- Empty State -->
    <div class="toc-empty" id="toc-empty" style="display: none;">
      <p class="text-gray-500 text-sm italic">KhÃ´ng cÃ³ má»¥c lá»¥c cho trang nÃ y</p>
    </div>
  </nav>
</div>

<style>
  .table-of-contents {
    background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
    border: 1px solid #e2e8f0;
    border-radius: 12px;
    padding: 1.5rem;
    margin-bottom: 2rem;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    transition: all 0.3s ease;
  }

  .table-of-contents:hover {
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
  }

  .toc-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
    padding-bottom: 0.75rem;
    border-bottom: 2px solid #e2e8f0;
  }

  .toc-title {
    font-size: 1.125rem;
    font-weight: 600;
    color: #1e293b;
    margin: 0;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .toc-title::before {
    content: "ðŸ“‹";
    font-size: 1.25rem;
  }

  .toc-toggle {
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.25rem;
    border-radius: 6px;
    transition: all 0.2s ease;
    color: #64748b;
  }

  .toc-toggle:hover {
    background: #e2e8f0;
    color: #1e293b;
  }

  .toc-toggle-icon {
    transition: transform 0.2s ease;
  }

  .toc-collapsed .toc-toggle-icon {
    transform: rotate(-90deg);
  }

  .toc-nav {
    transition: all 0.3s ease;
    overflow: hidden;
  }

  .toc-collapsed .toc-nav {
    max-height: 0;
    opacity: 0;
    margin-top: 0;
  }

  .toc-list {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  .toc-item {
    margin: 0;
    border-radius: 6px;
    transition: all 0.2s ease;
  }

  .toc-item:hover {
    background: rgba(50, 69, 255, 0.05);
  }

  .toc-link {
    display: block;
    padding: 0.5rem 0.75rem;
    color: #475569;
    text-decoration: none;
    font-size: 0.875rem;
    line-height: 1.4;
    border-radius: 6px;
    transition: all 0.2s ease;
    border-left: 3px solid transparent;
  }

  .toc-link:hover {
    color: #3245ff;
    background: rgba(50, 69, 255, 0.08);
    transform: translateX(2px);
  }

  .toc-link.active {
    color: #3245ff;
    font-weight: 600;
    background: rgba(50, 69, 255, 0.12);
    border-left-color: #3245ff;
  }

  /* Heading level indentation */
  .toc-level-1 .toc-link {
    padding-left: 0.75rem;
    font-weight: 600;
    font-size: 0.9rem;
  }

  .toc-level-2 .toc-link {
    padding-left: 1.5rem;
    font-size: 0.85rem;
  }

  .toc-level-3 .toc-link {
    padding-left: 2.25rem;
    font-size: 0.8rem;
    color: #64748b;
  }

  .toc-level-4 .toc-link {
    padding-left: 3rem;
    font-size: 0.75rem;
    color: #64748b;
  }

  /* Progress indicator */
  .toc-progress {
    height: 2px;
    background: #e2e8f0;
    border-radius: 1px;
    margin: 1rem 0 0.5rem 0;
    overflow: hidden;
  }

  .toc-progress-bar {
    height: 100%;
    background: linear-gradient(90deg, #3245ff, #bc52ee);
    border-radius: 1px;
    transition: width 0.3s ease;
    width: 0%;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .table-of-contents {
      margin: 1rem 0;
      padding: 1rem;
    }

    .toc-title {
      font-size: 1rem;
    }

    .toc-link {
      font-size: 0.8rem;
      padding: 0.4rem 0.6rem;
    }

    .toc-level-2 .toc-link {
      padding-left: 1.2rem;
    }

    .toc-level-3 .toc-link {
      padding-left: 1.8rem;
    }
  }

  /* Sticky behavior when used in sidebar */
  .toc-sticky {
    position: sticky;
    top: 2rem;
    max-height: calc(100vh - 4rem);
    overflow-y: auto;
  }

  /* Compact variant */
  .toc-compact {
    padding: 1rem;
    margin-bottom: 1rem;
  }

  .toc-compact .toc-title {
    font-size: 1rem;
    margin-bottom: 0.5rem;
  }

  .toc-compact .toc-link {
    padding: 0.25rem 0.5rem;
    font-size: 0.8rem;
  }
</style>

<script>
  // Table of Contents functionality
  document.addEventListener('DOMContentLoaded', function() {
    const toc = document.getElementById('table-of-contents');
    const tocList = document.getElementById('toc-list');
    const tocEmpty = document.getElementById('toc-empty');
    const tocToggle = document.getElementById('toc-toggle');
    const tocNav = document.getElementById('toc-nav');
    
    if (!toc || !tocList) return;

    // Get maxDepth from data attribute or default to 3
    const maxDepth = parseInt(toc.dataset.maxDepth || '3');
    
    // Generate TOC
    function generateTOC() {
      const contentArea = document.querySelector('.prose, .document-content, #doc-content, main');
      if (!contentArea) return;

      const headings = contentArea.querySelectorAll('h1, h2, h3, h4, h5, h6');
      const tocItems = [];

      headings.forEach((heading, index) => {
        const level = parseInt(heading.tagName.charAt(1));
        
        // Skip headings deeper than maxDepth
        if (level > maxDepth) return;

        // Create or get existing ID
        if (!heading.id) {
          const id = heading.textContent
            ?.toLowerCase()
            .replace(/[^\w\s-]/g, '')
            .replace(/\s+/g, '-')
            .trim() || `heading-${index}`;
          heading.id = id;
        }

        // Add scroll anchor
        heading.style.scrollMarginTop = '2rem';

        tocItems.push({
          id: heading.id,
          text: heading.textContent || '',
          level: level,
          element: heading
        });
      });

      // Render TOC items
      if (tocItems.length === 0) {
        tocList.style.display = 'none';
        if (tocEmpty) tocEmpty.style.display = 'block';
        return;
      }

      tocList.innerHTML = tocItems.map(item => `
        <li class="toc-item toc-level-${item.level}">
          <a href="#${item.id}" class="toc-link" data-target="${item.id}">
            ${item.text}
          </a>
        </li>
      `).join('');

      if (tocEmpty) tocEmpty.style.display = 'none';
      tocList.style.display = 'block';

      // Add smooth scroll behavior
      setupSmoothScroll();
      
      // Setup intersection observer for active highlighting
      setupActiveHighlighting(tocItems);
    }

    // Smooth scroll setup
    function setupSmoothScroll() {
      const tocLinks = tocList.querySelectorAll('.toc-link');
      
      tocLinks.forEach(link => {
        link.addEventListener('click', function(e) {
          e.preventDefault();
          
          const targetId = this.getAttribute('data-target');
          const targetElement = document.getElementById(targetId);
          
          if (targetElement) {
            // Update active state immediately
            updateActiveLink(this);
            
            // Smooth scroll to target
            targetElement.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });

            // Update URL hash after scroll
            setTimeout(() => {
              history.pushState(null, null, `#${targetId}`);
            }, 100);
          }
        });
      });
    }

    // Active section highlighting
    function setupActiveHighlighting(tocItems) {
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const tocLink = tocList.querySelector(`[data-target="${entry.target.id}"]`);
            if (tocLink) {
              updateActiveLink(tocLink);
            }
          }
        });
      }, {
        rootMargin: '-10% 0px -70% 0px',
        threshold: 0
      });

      tocItems.forEach(item => {
        observer.observe(item.element);
      });
    }

    // Update active link
    function updateActiveLink(activeLink) {
      // Remove active class from all links
      tocList.querySelectorAll('.toc-link').forEach(link => {
        link.classList.remove('active');
      });
      
      // Add active class to current link
      activeLink.classList.add('active');
    }

    // Toggle functionality
    if (tocToggle && tocNav) {
      tocToggle.addEventListener('click', function() {
        toc.classList.toggle('toc-collapsed');
        
        // Update aria attributes
        const isCollapsed = toc.classList.contains('toc-collapsed');
        tocToggle.setAttribute('aria-expanded', !isCollapsed);
      });
    }

    // Reading progress (optional)
    function setupReadingProgress() {
      const progressBar = document.querySelector('.toc-progress-bar');
      if (!progressBar) return;

      window.addEventListener('scroll', () => {
        const scrollTop = window.pageYOffset;
        const docHeight = document.documentElement.scrollHeight - window.innerHeight;
        const scrollPercent = (scrollTop / docHeight) * 100;
        
        progressBar.style.width = Math.min(scrollPercent, 100) + '%';
      });
    }

    // Initialize on page load
    generateTOC();
    setupReadingProgress();

    // Highlight current section based on URL hash
    if (window.location.hash) {
      setTimeout(() => {
        const targetLink = tocList.querySelector(`[data-target="${window.location.hash.substring(1)}"]`);
        if (targetLink) {
          updateActiveLink(targetLink);
        }
      }, 100);
    }

    // Global access for external control
    window.TableOfContents = {
      regenerate: generateTOC,
      scrollToSection: (id) => {
        const element = document.getElementById(id);
        if (element) {
          element.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
      }
    };
  });
</script> 