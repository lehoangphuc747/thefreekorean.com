---
export interface Props {
  variant?: 'primary' | 'secondary' | 'ghost' | 'outline';
  size?: 'sm' | 'md' | 'lg';
  class?: string;
  active?: boolean;
  type?: 'button' | 'submit' | 'reset';
  disabled?: boolean;
  href?: string;
  target?: string;
}

const { 
  variant = 'primary', 
  size = 'md', 
  class: className = '', 
  active = false,
  type = 'button',
  disabled = false,
  href,
  target,
  ...rest 
} = Astro.props;

const baseClasses = 'inline-flex items-center justify-center rounded-full font-medium transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2';

const variants = {
  primary: 'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500',
  secondary: 'bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 hover:border-blue-300 focus:ring-blue-500',
  ghost: 'bg-gray-100 text-gray-600 hover:bg-gray-200 focus:ring-gray-500',
  outline: 'border border-gray-300 text-gray-700 hover:bg-gray-50 focus:ring-blue-500'
};

const sizes = {
  sm: 'px-3 py-1 text-xs',
  md: 'px-4 py-2 text-sm',
  lg: 'px-6 py-3 text-base'
};

const activeClasses = {
  primary: 'bg-blue-700',
  secondary: 'bg-blue-600 text-white border-blue-600',
  ghost: 'bg-blue-600 text-white',
  outline: 'bg-blue-600 text-white border-blue-600'
};

const disabledClasses = 'opacity-50 cursor-not-allowed pointer-events-none';

const classes = [
  baseClasses,
  variants[variant],
  sizes[size],
  active ? activeClasses[variant] : '',
  disabled ? disabledClasses : '',
  className
].filter(Boolean).join(' ');

const Tag = href ? 'a' : 'button';
---

<Tag 
  class={classes}
  type={!href ? type : undefined}
  disabled={!href ? disabled : undefined}
  href={href}
  target={target}
  {...rest}
>
  <slot />
</Tag>
