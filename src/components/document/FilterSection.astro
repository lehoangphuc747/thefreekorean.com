---
import Button from '../ui/Button.astro';

export interface Props {
  categories: string[];
  subcategoriesByCategory: Record<string, string[]>;
  documents: Array<{
    category: string;
    subcategory: string;
  }>;
  class?: string;
}

const { categories, subcategoriesByCategory, documents, class: className = '' } = Astro.props;

// Calculate document counts
const getTotalCount = () => documents.length;
const getCategoryCount = (category: string) => documents.filter(doc => doc.category === category).length;
const getSubcategoryCount = (category: string, subcategory: string) => 
  documents.filter(doc => doc.category === category && doc.subcategory === subcategory).length;
---

<div class={`filter-section ${className}`}>
  <!-- Main Category Filters -->
  <div class="flex flex-wrap gap-3 justify-center mb-4" id="filter-buttons">
    <Button 
      variant="primary" 
      size="md" 
      active={true}
      class="filter-btn"
      data-category=""
    >
      Tất cả ({getTotalCount()})
    </Button>
    
    {categories.map(category => (
      <Button 
        variant="secondary" 
        size="md"
        class="filter-btn"
        data-category={category}
      >
        {category} ({getCategoryCount(category)})
      </Button>
    ))}
  </div>
  
  <!-- Subcategory Filters -->
  <div class="subcategory-filters" id="subcategory-filters">
    {Object.entries(subcategoriesByCategory).map(([category, subcategories]) => (
      <div 
        class="flex flex-wrap gap-2 justify-center mb-2" 
        data-parent-category={category} 
        style="display: none;"
      >
        {subcategories.map(subcategory => (
          <Button 
            variant="ghost" 
            size="sm"
            class="subcategory-btn"
            data-category={category}
            data-subcategory={subcategory}
          >
            {subcategory} ({getSubcategoryCount(category, subcategory)})
          </Button>
        ))}
      </div>
    ))}
  </div>
</div>

<script>
  // Filter functionality
  document.addEventListener('DOMContentLoaded', function() {
    const filterButtons = document.querySelectorAll('#filter-buttons .filter-btn') as NodeListOf<HTMLElement>;
    const subcategoryButtons = document.querySelectorAll('#subcategory-filters .subcategory-btn') as NodeListOf<HTMLElement>;
    const documentCards = document.querySelectorAll('.document-card-wrapper') as NodeListOf<HTMLElement>;
    const subcategoryGroups = document.querySelectorAll('#subcategory-filters [data-parent-category]') as NodeListOf<HTMLElement>;
    const emptyState = document.getElementById('empty-state');

    let currentCategory = '';
    let currentSubcategory = '';

    function filterDocuments() {
      let visibleCount = 0;

      documentCards.forEach(card => {
        const cardCategory = card.getAttribute('data-category');
        const cardSubcategory = card.getAttribute('data-subcategory');
        
        let show = true;
        
        if (currentCategory && cardCategory !== currentCategory) {
          show = false;
        }
        
        if (currentSubcategory && cardSubcategory !== currentSubcategory) {
          show = false;
        }

        if (show) {
          card.style.display = 'block';
          visibleCount++;
        } else {
          card.style.display = 'none';
        }
      });

      // Show/hide empty state
      if (emptyState) {
        emptyState.style.display = visibleCount === 0 ? 'block' : 'none';
      }
    }

    function updateButtonStates() {
      // Update main category buttons
      filterButtons.forEach(btn => {
        const btnCategory = btn.getAttribute('data-category') || '';
        if (btnCategory === currentCategory) {
          btn.classList.add('bg-blue-700', 'text-white');
          btn.classList.remove('bg-white', 'text-gray-700', 'border-gray-300');
        } else {
          btn.classList.remove('bg-blue-700', 'text-white');
          btn.classList.add('bg-white', 'text-gray-700', 'border-gray-300');
        }
      });

      // Update subcategory buttons
      subcategoryButtons.forEach(btn => {
        const btnSubcategory = btn.getAttribute('data-subcategory') || '';
        if (btnSubcategory === currentSubcategory) {
          btn.classList.add('bg-blue-600', 'text-white');
          btn.classList.remove('bg-gray-100', 'text-gray-600');
        } else {
          btn.classList.remove('bg-blue-600', 'text-white');
          btn.classList.add('bg-gray-100', 'text-gray-600');
        }
      });
    }

    // Filter by category
    filterButtons.forEach(button => {
      button.addEventListener('click', function(this: HTMLElement) {
        // Set current category
        currentCategory = this.getAttribute('data-category') || '';
        currentSubcategory = '';

        // Show/hide subcategory buttons
        subcategoryGroups.forEach(group => {
          const parentCategory = group.getAttribute('data-parent-category');
          if (currentCategory === '' || parentCategory === currentCategory) {
            group.style.display = currentCategory ? 'flex' : 'none';
          } else {
            group.style.display = 'none';
          }
        });

        updateButtonStates();
        filterDocuments();
      });
    });

    // Filter by subcategory
    subcategoryButtons.forEach(button => {
      button.addEventListener('click', function(this: HTMLElement) {
        // Set current subcategory
        currentSubcategory = this.getAttribute('data-subcategory') || '';

        updateButtonStates();
        filterDocuments();
      });
    });
  });
</script>
