---
import Layout from '../layouts/Layout.astro';
import GrammarCard from '../components/grammar/GrammarCard.astro';
import GrammarDashboard from '../components/grammar/GrammarDashboard.astro';
import GrammarNavigation from '../components/grammar/GrammarNavigation.astro';
import GrammarProgress from '../components/grammar/GrammarProgress.astro';
import GrammarFilter from '../components/grammar/GrammarFilter.astro';
import { grammarRoadmaps } from '../data/grammarRoadmaps.ts';

// Lấy tất cả files ngữ pháp từ thư mục grammar
const grammarFiles = import.meta.glob('../documents/grammar/*.mdx', { eager: true });

// Xử lý và sắp xếp dữ liệu ngữ pháp
const grammars = [];
for (const [path, module] of Object.entries(grammarFiles)) {
  const frontmatter = module.frontmatter || {};
  const filename = path.split('/').pop()?.replace('.mdx', '') || '';
  
  if (frontmatter.title) {
    grammars.push({
      title: frontmatter.title,
      level: frontmatter.level || 'Beginner',
      topikLevel: frontmatter.topikLevel || 'TOPIK I',
      grammarType: frontmatter.grammarType || 'Khác',
      difficulty: frontmatter.difficulty || 1,
      description: frontmatter.description || '',
      cover: frontmatter.cover || '/images/default-grammar.svg',
      slug: frontmatter.slug || filename,
      date: frontmatter.date || frontmatter.publishDate || new Date().toISOString(),
      grammarPattern: frontmatter.grammarPattern || '',
    });
  }
}

grammars.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());

// Lấy danh sách levels và types để filter
const levels = [...new Set(grammars.map(g => g.level))];
const grammarTypes = [...new Set(grammars.map(g => g.grammarType))];
const difficulties = [...new Set(grammars.map(g => g.difficulty))];

// Group grammars by level for roadmap display
const grammarsByLevel = {
  'Beginner': grammars.filter(g => g.level === 'Beginner'),
  'Intermediate': grammars.filter(g => g.level === 'Intermediate'),
  'Advanced': grammars.filter(g => g.level === 'Advanced')
};

const pageTitle = "Ngữ pháp tiếng Hàn - Dashboard";
const pageDescription = "Hệ thống học ngữ pháp tiếng Hàn thông minh với dashboard theo dõi tiến độ, quiz tương tác và lộ trình học tập cá nhân hóa";

// Transform grammars for dashboard
const dashboardGrammars = grammars.map(g => ({
  id: g.slug,
  title: g.title,
  korean: g.grammarPattern || g.title,
  level: g.level.toLowerCase(),
  difficulty: g.difficulty,
  estimatedTime: 15 + (g.difficulty * 5),
  completed: false,
  accuracy: 0,
  lastReview: null
}));
---

<Layout title={pageTitle} description={pageDescription}>
  <!-- Main Grammar Dashboard -->
  <GrammarDashboard 
    showWelcome={true}
    grammarList={dashboardGrammars}
  />

  <!-- Navigation Component -->
  <div class="container mx-auto px-4 mb-8">
    <GrammarNavigation currentGrammar="" />
  </div>

  <!-- Tab Content Container -->
  <main class="container mx-auto px-4 py-8">
    <!-- Tab Navigation -->
    <div class="mb-8 flex justify-center">
      <div class="bg-white rounded-xl shadow-lg p-1 flex flex-wrap gap-1">
        <button 
          id="dashboard-tab" 
          class="tab-button px-6 py-3 rounded-lg font-semibold transition-all duration-300 bg-blue-600 text-white shadow-md"
        >
          🏠 Dashboard
        </button>
        <button 
          id="roadmap-tab" 
          class="tab-button px-6 py-3 rounded-lg font-semibold transition-all duration-300 text-gray-600 hover:text-gray-800 hover:bg-gray-50"
        >
          🗺️ Lộ trình
        </button>
        <button 
          id="list-tab" 
          class="tab-button px-6 py-3 rounded-lg font-semibold transition-all duration-300 text-gray-600 hover:text-gray-800 hover:bg-gray-50"
        >
          📋 Danh sách
        </button>
        <button 
          id="progress-tab" 
          class="tab-button px-6 py-3 rounded-lg font-semibold transition-all duration-300 text-gray-600 hover:text-gray-800 hover:bg-gray-50"
        >
          📊 Tiến độ
        </button>
      </div>
    </div>

    <!-- Dashboard Content (Default - Hidden as main dashboard is above) -->
    <div id="dashboard-content" class="tab-content" style="display: none;">
      <div class="text-center py-12">
        <div class="text-6xl mb-4">🏠</div>
        <h3 class="text-2xl font-bold text-gray-800 mb-2">Dashboard chính</h3>
        <p class="text-gray-600">Dashboard chính hiển thị ở trên trang</p>
      </div>
    </div>

    <!-- Roadmap Content -->
    <div id="roadmap-content" class="tab-content" style="display: none;">
      <div class="space-y-8">
        {grammarRoadmaps.map((roadmap) => (
          <div class="bg-white rounded-xl shadow-lg p-8 border-l-4 hover:shadow-xl transition-shadow duration-300" 
               class:list={[
                 roadmap.level === 'Beginner' && 'border-green-500',
                 roadmap.level === 'Intermediate' && 'border-yellow-500', 
                 roadmap.level === 'Advanced' && 'border-red-500'
               ]}>
            <!-- Roadmap Header -->
            <div class="flex items-center justify-between mb-6">
              <div>
                <h2 class="text-3xl font-bold text-gray-800 mb-3">
                  {roadmap.title}
                </h2>
                <p class="text-gray-600 mb-4 text-lg leading-relaxed">
                  {roadmap.description}
                </p>
                <div class="flex flex-wrap gap-3">
                  <span class="inline-flex items-center px-4 py-2 text-sm font-medium rounded-full"
                        class:list={[
                          roadmap.level === 'Beginner' && 'bg-green-100 text-green-800',
                          roadmap.level === 'Intermediate' && 'bg-yellow-100 text-yellow-800',
                          roadmap.level === 'Advanced' && 'bg-red-100 text-red-800'
                        ]}>
                    {roadmap.level === 'Beginner' ? '🟢' : roadmap.level === 'Intermediate' ? '🟡' : '🔴'}
                    {roadmap.level}
                  </span>
                  <span class="inline-flex items-center px-4 py-2 text-sm font-medium bg-gray-100 text-gray-800 rounded-full">
                    ⏱️ {roadmap.estimatedTime}
                  </span>
                  <span class="inline-flex items-center px-4 py-2 text-sm font-medium bg-blue-100 text-blue-800 rounded-full">
                    📚 {roadmap.grammarPoints.length} ngữ pháp
                  </span>
                </div>
              </div>
            </div>

            <!-- Grammar Points -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {roadmap.grammarPoints.map((point, index) => {
                const matchingGrammar = grammars.find(g => g.slug === point.id);
                return matchingGrammar ? (
                  <div class="relative">
                    <div class="absolute -top-3 -left-3 w-8 h-8 bg-blue-600 text-white text-sm rounded-full flex items-center justify-center font-bold z-10 shadow-lg">
                      {index + 1}
                    </div>
                    <GrammarCard
                      title={matchingGrammar.title}
                      level={matchingGrammar.level}
                      topikLevel={matchingGrammar.topikLevel}
                      grammarType={matchingGrammar.grammarType}
                      difficulty={matchingGrammar.difficulty}
                      description={matchingGrammar.description}
                      slug={matchingGrammar.slug}
                      cover={matchingGrammar.cover}
                    />
                  </div>
                ) : (
                  <div class="bg-gray-100 border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                    <div class="text-gray-400 text-2xl mb-2">📝</div>
                    <p class="text-gray-500 text-sm">Đang cập nhật...</p>
                  </div>
                );
              })}
            </div>
          </div>
        ))}
      </div>
    </div>

    <!-- List Content -->
    <div id="list-content" class="tab-content" style="display: none;">
      <!-- Filter Section -->
      <div class="mb-8">
        <GrammarFilter />
      </div>

      <!-- Search and Filters -->
      <div class="bg-white rounded-xl shadow-lg p-6 mb-8">
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          <!-- Search -->
          <div class="relative">
            <input 
              type="text" 
              id="search-input"
              placeholder="Tìm kiếm ngữ pháp..." 
              class="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
              </svg>
            </div>
          </div>

          <!-- Level Filter -->
          <select id="level-filter" class="w-full py-3 px-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
            <option value="">Tất cả cấp độ</option>
            {levels.map(level => (
              <option value={level}>{level}</option>
            ))}
          </select>

          <!-- Type Filter -->
          <select id="type-filter" class="w-full py-3 px-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
            <option value="">Tất cả loại</option>
            {grammarTypes.map(type => (
              <option value={type}>{type}</option>
            ))}
          </select>

          <!-- Difficulty Filter -->
          <select id="difficulty-filter" class="w-full py-3 px-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
            <option value="">Tất cả độ khó</option>
            {difficulties.sort((a, b) => a - b).map(diff => (
              <option value={diff}>Độ khó {diff}</option>
            ))}
          </select>
        </div>

        <div class="flex justify-between items-center mt-4">
          <div class="text-gray-600" id="results-count">
            Hiển thị {grammars.length} ngữ pháp
          </div>
          <button 
            id="clear-filters" 
            class="px-4 py-2 text-blue-600 hover:text-blue-800 font-medium"
          >
            Xóa bộ lọc
          </button>
        </div>
      </div>

      <!-- Grammar List -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="grammar-list">
        {grammars.map((grammar) => (
          <div class="grammar-item" 
               data-level={grammar.level}
               data-type={grammar.grammarType}
               data-difficulty={grammar.difficulty}
               data-title={grammar.title.toLowerCase()}>
            <GrammarCard
              title={grammar.title}
              level={grammar.level}
              topikLevel={grammar.topikLevel}
              grammarType={grammar.grammarType}
              difficulty={grammar.difficulty}
              description={grammar.description}
              slug={grammar.slug}
              cover={grammar.cover}
            />
          </div>
        ))}
      </div>

      <!-- No Results -->
      <div id="no-results" class="text-center py-12" style="display: none;">
        <div class="text-6xl mb-4">🔍</div>
        <h3 class="text-2xl font-bold text-gray-800 mb-2">Không tìm thấy kết quả</h3>
        <p class="text-gray-600 mb-4">Thử thay đổi từ khóa tìm kiếm hoặc bộ lọc</p>
        <button id="reset-search" class="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
          Đặt lại tìm kiếm
        </button>
      </div>
    </div>

    <!-- Progress Content -->
    <div id="progress-content" class="tab-content" style="display: none;">
      <GrammarProgress showDetailed={true} variant="full" />
    </div>
  </main>
</Layout>

<style>
  /* Tab Styles */
  .tab-button {
    min-width: 120px;
    text-align: center;
  }

  .tab-button.active {
    background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
    color: white;
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
  }

  .tab-content {
    animation: fadeIn 0.5s ease-in-out;
  }

  @keyframes fadeIn {
    from { 
      opacity: 0; 
      transform: translateY(20px); 
    }
    to { 
      opacity: 1; 
      transform: translateY(0); 
    }
  }

  /* Filter animations */
  .grammar-item {
    transition: all 0.3s ease;
  }

  .grammar-item.hidden {
    opacity: 0;
    transform: scale(0.95);
    pointer-events: none;
  }

  /* Custom scrollbar */
  select {
    background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6,9 12,15 18,9'%3e%3c/polyline%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right 12px center;
    background-size: 16px;
    padding-right: 48px;
    appearance: none;
  }

  /* Responsive improvements */
  @media (max-width: 768px) {
    .tab-button {
      min-width: auto;
      flex: 1;
      font-size: 0.875rem;
      padding: 0.75rem 0.5rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Tab functionality
    const tabButtons = document.querySelectorAll('.tab-button');
    const tabContents = document.querySelectorAll('.tab-content');

    function showTab(tabId) {
      // Hide all tab contents
      tabContents.forEach(content => {
        content.style.display = 'none';
      });

      // Remove active class from all buttons
      tabButtons.forEach(button => {
        button.classList.remove('active');
        button.classList.add('text-gray-600', 'hover:text-gray-800', 'hover:bg-gray-50');
        button.classList.remove('bg-blue-600', 'text-white', 'shadow-md');
      });

      // Show selected tab content
      const targetContent = document.getElementById(tabId + '-content');
      if (targetContent) {
        targetContent.style.display = 'block';
      }

      // Add active class to clicked button
      const targetButton = document.getElementById(tabId + '-tab');
      if (targetButton) {
        targetButton.classList.add('active');
        targetButton.classList.remove('text-gray-600', 'hover:text-gray-800', 'hover:bg-gray-50');
        targetButton.classList.add('bg-blue-600', 'text-white', 'shadow-md');
      }

      // Update URL
      const url = new URL(window.location);
      url.searchParams.set('tab', tabId);
      window.history.pushState(null, '', url);
    }

    // Tab click handlers
    document.getElementById('dashboard-tab')?.addEventListener('click', () => showTab('dashboard'));
    document.getElementById('roadmap-tab')?.addEventListener('click', () => showTab('roadmap'));
    document.getElementById('list-tab')?.addEventListener('click', () => showTab('list'));
    document.getElementById('progress-tab')?.addEventListener('click', () => showTab('progress'));

    // Filter functionality for list view
    const searchInput = document.getElementById('search-input');
    const levelFilter = document.getElementById('level-filter');
    const typeFilter = document.getElementById('type-filter');
    const difficultyFilter = document.getElementById('difficulty-filter');
    const clearFiltersBtn = document.getElementById('clear-filters');
    const resetSearchBtn = document.getElementById('reset-search');
    const resultsCount = document.getElementById('results-count');
    const noResults = document.getElementById('no-results');
    const grammarList = document.getElementById('grammar-list');

    function filterGrammars() {
      const searchTerm = searchInput?.value.toLowerCase() || '';
      const selectedLevel = levelFilter?.value || '';
      const selectedType = typeFilter?.value || '';
      const selectedDifficulty = difficultyFilter?.value || '';

      const grammarItems = document.querySelectorAll('.grammar-item');
      let visibleCount = 0;

      grammarItems.forEach(item => {
        const title = item.dataset.title || '';
        const level = item.dataset.level || '';
        const type = item.dataset.type || '';
        const difficulty = item.dataset.difficulty || '';

        const matchesSearch = title.includes(searchTerm);
        const matchesLevel = !selectedLevel || level === selectedLevel;
        const matchesType = !selectedType || type === selectedType;
        const matchesDifficulty = !selectedDifficulty || difficulty === selectedDifficulty;

        if (matchesSearch && matchesLevel && matchesType && matchesDifficulty) {
          item.style.display = 'block';
          item.classList.remove('hidden');
          visibleCount++;
        } else {
          item.style.display = 'none';
          item.classList.add('hidden');
        }
      });

      // Update results count
      if (resultsCount) {
        resultsCount.textContent = `Hiển thị ${visibleCount} ngữ pháp`;
      }

      // Show/hide no results message
      if (noResults && grammarList) {
        if (visibleCount === 0) {
          grammarList.style.display = 'none';
          noResults.style.display = 'block';
        } else {
          grammarList.style.display = 'grid';
          noResults.style.display = 'none';
        }
      }

      // Update URL parameters
      const url = new URL(window.location);
      if (searchTerm) url.searchParams.set('search', searchTerm);
      else url.searchParams.delete('search');
      
      if (selectedLevel) url.searchParams.set('level', selectedLevel);
      else url.searchParams.delete('level');
      
      if (selectedType) url.searchParams.set('type', selectedType);
      else url.searchParams.delete('type');
      
      if (selectedDifficulty) url.searchParams.set('difficulty', selectedDifficulty);
      else url.searchParams.delete('difficulty');
      
      window.history.replaceState(null, '', url);
    }

    function clearFilters() {
      if (searchInput) searchInput.value = '';
      if (levelFilter) levelFilter.value = '';
      if (typeFilter) typeFilter.value = '';
      if (difficultyFilter) difficultyFilter.value = '';
      filterGrammars();
    }

    // Event listeners
    searchInput?.addEventListener('input', filterGrammars);
    levelFilter?.addEventListener('change', filterGrammars);
    typeFilter?.addEventListener('change', filterGrammars);
    difficultyFilter?.addEventListener('change', filterGrammars);
    clearFiltersBtn?.addEventListener('click', clearFilters);
    resetSearchBtn?.addEventListener('click', clearFilters);

    // Load state from URL
    const urlParams = new URLSearchParams(window.location.search);
    const activeTab = urlParams.get('tab') || 'dashboard';
    
    // Load filter values
    if (searchInput && urlParams.get('search')) {
      searchInput.value = urlParams.get('search');
    }
    if (levelFilter && urlParams.get('level')) {
      levelFilter.value = urlParams.get('level');
    }
    if (typeFilter && urlParams.get('type')) {
      typeFilter.value = urlParams.get('type');
    }
    if (difficultyFilter && urlParams.get('difficulty')) {
      difficultyFilter.value = urlParams.get('difficulty');
    }

    // Show initial tab
    showTab(activeTab);
    
    // Apply initial filters if any
    if (activeTab === 'list') {
      filterGrammars();
    }
  });
</script>
