---
import TopikLayout from '../../../layouts/TopikLayout.astro';
import TopikTimer from '../../../components/topik/TopikTimer.astro';
import TopikQuiz from '../../../components/topik/TopikQuiz.astro';

// Sample test data - trong thực tế sẽ load từ database theo ID
export async function getStaticPaths() {
  const sampleTests = [
    {
      id: 'topik-i-2023-1',
      title: 'TOPIK I - Kỳ thi tháng 4/2023',
      description: 'Đề thi TOPIK I chính thức kỳ thi tháng 4/2023',
      level: 'TOPIK I',
      duration: 100,
      questions: [
        {
          id: 'q1',
          type: 'multiple-choice',
          section: 'listening',
          question: '다음을 듣고 알맞은 것을 고르십시오.',
          audio: '/audio/topik-i-2023-1-q1.mp3',
          options: [
            '학교에 갑니다.',
            '집에 갑니다.',
            '회사에 갑니다.',
            '병원에 갑니다.'
          ],
          correctAnswer: 1,
          explanation: '대화에서 "집에 간다"고 명확히 말했습니다.',
          points: 2
        },
        {
          id: 'q2',
          type: 'multiple-choice',
          section: 'listening',
          question: '대화를 듣고 여자가 어디에 가는지 고르십시오.',
          audio: '/audio/topik-i-2023-1-q2.mp3',
          options: [
            '도서관',
            '카페',
            '식당',
            '상점'
          ],
          correctAnswer: 0,
          explanation: '여자가 "도서관에서 공부하겠다"고 말했습니다.',
          points: 2
        },
        {
          id: 'q3',
          type: 'multiple-choice',
          section: 'reading',
          question: '다음 글의 내용과 같은 것을 고르십시오.',
          passage: '저는 매일 아침 7시에 일어납니다. 그리고 운동을 한 시간 합니다. 운동 후에 샤워를 하고 아침을 먹습니다. 8시 30분에 회사에 갑니다.',
          options: [
            '7시에 운동을 시작합니다.',
            '8시에 아침을 먹습니다.',
            '9시에 회사에 갑니다.',
            '샤워 후에 운동을 합니다.'
          ],
          correctAnswer: 0,
          explanation: '글에서 7시에 일어나서 운동을 한다고 했으므로, 7시에 운동을 시작한다는 것이 맞습니다.',
          points: 2
        },
        {
          id: 'q4',
          type: 'multiple-choice',
          section: 'reading',
          question: '빈 곳에 들어갈 가장 알맞은 것을 고르십시오.',
          passage: '어제 친구와 영화를 봤습니다. 영화가 아주 _____. 다음에 또 보고 싶습니다.',
          options: [
            '좋았습니다',
            '나빴습니다',
            '어려웠습니다',
            '쉬웠습니다'
          ],
          correctAnswer: 0,
          explanation: '"다음에 또 보고 싶다"는 표현에서 영화가 좋았다는 것을 알 수 있습니다.',
          points: 2
        },
        {
          id: 'q5',
          type: 'multiple-choice',
          section: 'reading',
          question: '다음 그림을 보고 알맞은 설명을 고르십시오.',
          image: '/images/topik-reading-q5.jpg',
          options: [
            '사람들이 공원에서 운동하고 있습니다.',
            '사람들이 식당에서 식사하고 있습니다.',
            '사람들이 도서관에서 공부하고 있습니다.',
            '사람들이 상점에서 쇼핑하고 있습니다.'
          ],
          correctAnswer: 0,
          explanation: '그림에서 공원에서 여러 사람들이 운동하는 모습을 볼 수 있습니다.',
          points: 2
        }
      ],
      totalPoints: 10
    },
    {
      id: 'topik-ii-2023-1',
      title: 'TOPIK II - Kỳ thi tháng 4/2023',
      description: 'Đề thi TOPIK II chính thức kỳ thi tháng 4/2023',
      level: 'TOPIK II',
      duration: 180,
      questions: [
        {
          id: 'q1',
          type: 'multiple-choice',
          section: 'listening',
          question: '다음을 듣고 남자의 의견으로 가장 알맞은 것을 고르십시오.',
          audio: '/audio/topik-ii-2023-1-q1.mp3',
          options: [
            '환경 보호가 중요하다',
            '경제 발전이 우선이다',
            '기술 발전이 필요하다',
            '교육 개혁이 시급하다'
          ],
          correctAnswer: 0,
          explanation: '남자가 환경 문제의 심각성과 보호의 중요성을 강조했습니다.',
          points: 3
        },
        {
          id: 'q2',
          type: 'multiple-choice',
          section: 'reading',
          question: '다음 글의 주제로 가장 알맞은 것을 고르십시오.',
          passage: '현대 사회에서 스마트폰은 단순한 통신 도구를 넘어서 우리 삶의 필수품이 되었다. 정보 검색, 업무 처리, 엔터테인먼트 등 다양한 기능을 제공하며 일상생활의 편의성을 크게 향상시켰다. 하지만 과도한 사용으로 인한 중독 문제와 대인관계 악화 등의 부작용도 나타나고 있어 올바른 사용법에 대한 고민이 필요한 시점이다.',
          options: [
            '스마트폰의 기술적 발전',
            '스마트폰이 현대 사회에 미치는 영향',
            '스마트폰 중독의 심각성',
            '스마트폰의 경제적 가치'
          ],
          correctAnswer: 1,
          explanation: '글 전체에서 스마트폰이 현대 사회에 미치는 긍정적, 부정적 영향을 종합적으로 다루고 있습니다.',
          points: 3
        },
        {
          id: 'q3',
          type: 'writing',
          section: 'writing',
          question: '다음 주제에 대해 자신의 의견을 써서 제출하십시오. (200-300자)\n\n주제: "대학생들의 아르바이트에 대한 찬반 의견을 쓰고, 그 이유를 설명하십시오."',
          points: 10
        }
      ],
      totalPoints: 16
    }
  ];
  
  return sampleTests.map(test => ({
    params: { id: test.id },
    props: { test }
  }));
}

const { test } = Astro.props;
---

<TopikLayout 
  title={`${test.title} - Làm bài thi`}
  description={`Làm bài thi ${test.title} - ${test.description}`}
  showNavigation={false}
>
  
  <!-- Test Header -->
  <div class="bg-gradient-to-r from-blue-600 to-indigo-600 text-white">
    <div class="max-w-7xl mx-auto px-4 py-8">
      <div class="flex items-center justify-between">
        
        <!-- Test Info -->
        <div>
          <div class="flex items-center gap-3 mb-2">
            <div class="w-10 h-10 bg-white/20 rounded-lg flex items-center justify-center">
              <span class="text-xl">🎯</span>
            </div>
            <div>
              <h1 class="text-2xl font-bold">{test.title}</h1>
              <p class="text-blue-100">{test.description}</p>
            </div>
          </div>
          
          <!-- Test Stats -->
          <div class="flex items-center gap-6 text-sm text-blue-100">
            <span>📝 {test.questions.length} câu hỏi</span>
            <span>⏱️ {test.duration} phút</span>
            <span>🎯 {test.totalPoints} điểm</span>
            <span class="px-2 py-1 bg-white/20 rounded">{test.level}</span>
          </div>
        </div>
        
        <!-- Timer Container -->
        <div class="timer-container">
          <TopikTimer 
            duration={test.duration}
            onTimeUp="handleTestTimeUp"
            showWarnings={true}
            autoSubmit={true}
            class="w-80"
          />
        </div>
      </div>
    </div>
  </div>

  <!-- Warning Banner -->
  <div class="bg-yellow-50 border-b border-yellow-200">
    <div class="max-w-7xl mx-auto px-4 py-3">
      <div class="flex items-center gap-3 text-yellow-800">
        <svg class="w-5 h-5 text-yellow-600" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>
        </svg>
        <div class="text-sm">
          <span class="font-medium">⚠️ Lưu ý quan trọng:</span>
          Bài thi sẽ tự động nộp khi hết thời gian. Hãy đảm bảo kết nối internet ổn định.
          Không tải lại trang hoặc đóng trình duyệt trong quá trình làm bài.
        </div>
      </div>
    </div>
  </div>

  <!-- Instructions Section -->
  <section class="py-8 bg-gray-50">
    <div class="max-w-7xl mx-auto px-4">
      <div class="bg-white rounded-xl shadow-lg border border-gray-200 p-6" id="instructions-section">
        
        <!-- Instructions Header -->
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-xl font-bold text-gray-900">📋 Hướng dẫn làm bài</h2>
          <button 
            id="start-test-btn"
            class="px-6 py-3 bg-gradient-to-r from-green-600 to-emerald-600 text-white rounded-lg font-bold hover:from-green-700 hover:to-emerald-700 transition-all duration-200 shadow-lg"
          >
            🚀 Bắt đầu làm bài
          </button>
        </div>
        
        <!-- Instructions Content -->
        <div class="grid md:grid-cols-2 gap-8">
          
          <!-- General Instructions -->
          <div>
            <h3 class="font-bold text-gray-900 mb-4 flex items-center gap-2">
              <span class="text-blue-600">📝</span>
              Hướng dẫn chung
            </h3>
            <ul class="space-y-2 text-gray-700">
              <li class="flex items-start gap-2">
                <span class="text-green-600 mt-1">✓</span>
                <span>Đọc kỹ từng câu hỏi trước khi chọn đáp án</span>
              </li>
              <li class="flex items-start gap-2">
                <span class="text-green-600 mt-1">✓</span>
                <span>Có thể chuyển qua lại giữa các câu hỏi</span>
              </li>
              <li class="flex items-start gap-2">
                <span class="text-green-600 mt-1">✓</span>
                <span>Sử dụng chức năng đánh dấu cho câu khó</span>
              </li>
              <li class="flex items-start gap-2">
                <span class="text-green-600 mt-1">✓</span>
                <span>Kiểm tra lại đáp án trước khi nộp bài</span>
              </li>
            </ul>
          </div>
          
          <!-- Technical Instructions -->
          <div>
            <h3 class="font-bold text-gray-900 mb-4 flex items-center gap-2">
              <span class="text-purple-600">🔧</span>
              Lưu ý kỹ thuật
            </h3>
            <ul class="space-y-2 text-gray-700">
              <li class="flex items-start gap-2">
                <span class="text-yellow-600 mt-1">⚠️</span>
                <span>Đảm bảo kết nối internet ổn định</span>
              </li>
              <li class="flex items-start gap-2">
                <span class="text-yellow-600 mt-1">⚠️</span>
                <span>Không tải lại trang trong quá trình thi</span>
              </li>
              <li class="flex items-start gap-2">
                <span class="text-yellow-600 mt-1">⚠️</span>
                <span>Sử dụng trình duyệt hiện đại (Chrome, Firefox)</span>
              </li>
              <li class="flex items-start gap-2">
                <span class="text-yellow-600 mt-1">⚠️</span>
                <span>Bật âm thanh cho các câu hỏi nghe</span>
              </li>
            </ul>
          </div>
        </div>
        
        <!-- Test Structure -->
        <div class="mt-8 pt-6 border-t border-gray-200">
          <h3 class="font-bold text-gray-900 mb-4 flex items-center gap-2">
            <span class="text-orange-600">📊</span>
            Cấu trúc đề thi
          </h3>
          
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            {test.questions.filter(q => q.section === 'listening').length > 0 && (
              <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                <div class="flex items-center gap-2 mb-2">
                  <span class="text-xl">🎧</span>
                  <span class="font-medium text-blue-900">Phần Nghe</span>
                </div>
                <div class="text-sm text-blue-700">
                  {test.questions.filter(q => q.section === 'listening').length} câu hỏi
                </div>
              </div>
            )}
            
            {test.questions.filter(q => q.section === 'reading').length > 0 && (
              <div class="bg-green-50 border border-green-200 rounded-lg p-4">
                <div class="flex items-center gap-2 mb-2">
                  <span class="text-xl">📖</span>
                  <span class="font-medium text-green-900">Phần Đọc</span>
                </div>
                <div class="text-sm text-green-700">
                  {test.questions.filter(q => q.section === 'reading').length} câu hỏi
                </div>
              </div>
            )}
            
            {test.questions.filter(q => q.section === 'writing').length > 0 && (
              <div class="bg-purple-50 border border-purple-200 rounded-lg p-4">
                <div class="flex items-center gap-2 mb-2">
                  <span class="text-xl">✍️</span>
                  <span class="font-medium text-purple-900">Phần Viết</span>
                </div>
                <div class="text-sm text-purple-700">
                  {test.questions.filter(q => q.section === 'writing').length} câu hỏi
                </div>
              </div>
            )}
          </div>
        </div>
        
        <!-- Final Warning -->
        <div class="mt-6 p-4 bg-red-50 border border-red-200 rounded-lg">
          <div class="flex items-start gap-3">
            <svg class="w-5 h-5 text-red-600 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>
            </svg>
            <div class="text-red-800">
              <div class="font-medium">⚠️ Cảnh báo quan trọng</div>
              <div class="text-sm mt-1">
                Sau khi bắt đầu làm bài, bạn không thể tạm dừng hoặc làm lại. 
                Hãy đảm bảo bạn đã sẵn sàng và có đủ thời gian để hoàn thành bài thi.
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Quiz Section (Hidden initially) -->
  <section class="quiz-section hidden" id="quiz-section">
    <TopikQuiz test={test} />
  </section>

  <!-- Confirmation Modal -->
  <div class="confirmation-modal fixed inset-0 bg-black/50 flex items-center justify-center z-50 hidden" id="confirmation-modal">
    <div class="bg-white rounded-xl shadow-2xl max-w-md w-full mx-4">
      
      <!-- Modal Header -->
      <div class="p-6 border-b border-gray-200">
        <h2 class="text-xl font-bold text-gray-900">🚀 Xác nhận bắt đầu thi</h2>
      </div>
      
      <!-- Modal Content -->
      <div class="p-6">
        <p class="text-gray-700 mb-4">
          Bạn có chắc chắn muốn bắt đầu làm bài thi không? 
          Sau khi bắt đầu, thời gian sẽ bắt đầu đếm ngược và bạn không thể tạm dừng.
        </p>
        
        <div class="bg-blue-50 border border-blue-200 rounded-lg p-3 mb-4">
          <div class="text-sm text-blue-800">
            <div class="font-medium">📋 Thông tin bài thi:</div>
            <div class="mt-1">
              • {test.questions.length} câu hỏi<br>
              • {test.duration} phút<br>
              • {test.totalPoints} điểm tối đa
            </div>
          </div>
        </div>
      </div>
      
      <!-- Modal Actions -->
      <div class="flex gap-3 p-6 border-t border-gray-200">
        <button 
          id="cancel-start"
          class="flex-1 px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors font-medium"
        >
          ❌ Hủy
        </button>
        <button 
          id="confirm-start"
          class="flex-1 px-4 py-2 bg-gradient-to-r from-green-600 to-emerald-600 text-white rounded-lg hover:from-green-700 hover:to-emerald-700 transition-all duration-200 font-medium"
        >
          ✅ Bắt đầu thi
        </button>
      </div>
    </div>
  </div>
</TopikLayout>

<style>
  /* Smooth transitions */
  .quiz-section {
    transition: all 0.3s ease;
  }
  
  .quiz-section.hidden {
    opacity: 0;
    pointer-events: none;
  }
  
  /* Timer adjustments for test page */
  .timer-container .timer-container {
    min-width: 320px;
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .timer-container {
      width: 100%;
      margin-top: 1rem;
    }
  }
</style>

<script define:vars={{ test }}>
  document.addEventListener('DOMContentLoaded', function() {
    const startTestBtn = document.getElementById('start-test-btn');
    const confirmationModal = document.getElementById('confirmation-modal');
    const cancelStart = document.getElementById('cancel-start');
    const confirmStart = document.getElementById('confirm-start');
    const instructionsSection = document.getElementById('instructions-section');
    const quizSection = document.getElementById('quiz-section');
    
    let testStarted = false;
    
    // Show confirmation modal
    if (startTestBtn) {
      startTestBtn.addEventListener('click', function() {
        confirmationModal?.classList.remove('hidden');
      });
    }
    
    // Cancel start
    if (cancelStart) {
      cancelStart.addEventListener('click', function() {
        confirmationModal?.classList.add('hidden');
      });
    }
    
    // Confirm start - begin test
    if (confirmStart) {
      confirmStart.addEventListener('click', function() {
        startTest();
        confirmationModal?.classList.add('hidden');
      });
    }
    
    // Start the actual test
    function startTest() {
      testStarted = true;
      
      // Hide instructions and show quiz
      if (instructionsSection) {
        instructionsSection.style.display = 'none';
      }
      
      if (quizSection) {
        quizSection.classList.remove('hidden');
      }
      
      // Update page title
      document.title = `Đang thi: ${test.title} - The Free Korean`;
      
      // Prevent leaving page
      window.addEventListener('beforeunload', handleBeforeUnload);
      
      // Track test start
      trackTestStart();
    }
    
    // Handle time up from timer
    window.handleTestTimeUp = function() {
      if (window.TopikQuiz && window.TopikQuiz.submitTest) {
        window.TopikQuiz.submitTest(true); // Auto submit
      } else {
        // Fallback if quiz not ready
        alert('⏰ Hết thời gian! Bài thi sẽ được nộp tự động.');
        window.location.href = `/topik/results/${test.id}?timeout=true`;
      }
    };
    
    // Prevent accidental page leave
    function handleBeforeUnload(e) {
      if (testStarted) {
        e.preventDefault();
        e.returnValue = 'Bạn đang trong quá trình làm bài thi. Rời khỏi trang sẽ mất hết dữ liệu đã làm.';
        return e.returnValue;
      }
    }
    
    // Track test start for analytics
    function trackTestStart() {
      const startData = {
        testId: test.id,
        startTime: new Date().toISOString(),
        userAgent: navigator.userAgent,
        screenResolution: `${screen.width}x${screen.height}`
      };
      
      // Store in localStorage for recovery
      localStorage.setItem(`topik_test_start_${test.id}`, JSON.stringify(startData));
      
      // Send to analytics if available
      if (window.gtag) {
        window.gtag('event', 'test_start', {
          test_id: test.id,
          test_title: test.title,
          test_duration: test.duration
        });
      }
    }
    
    // Auto-save functionality
    let autoSaveInterval;
    
    function startAutoSave() {
      autoSaveInterval = setInterval(() => {
        if (window.TopikQuiz && testStarted) {
          const answers = window.TopikQuiz.getAnswers();
          const markedQuestions = window.TopikQuiz.getMarkedQuestions();
          
          const saveData = {
            testId: test.id,
            answers: answers,
            markedQuestions: markedQuestions,
            lastSaved: new Date().toISOString(),
            timeLeft: window.TopikTimer ? window.TopikTimer.getTimeLeft() : null
          };
          
          localStorage.setItem(`topik_autosave_${test.id}`, JSON.stringify(saveData));
        }
      }, 30000); // Auto-save every 30 seconds
    }
    
    // Check for previous session
    function checkPreviousSession() {
      const savedData = localStorage.getItem(`topik_autosave_${test.id}`);
      if (savedData) {
        const data = JSON.parse(savedData);
        const timeDiff = new Date().getTime() - new Date(data.lastSaved).getTime();
        
        // If saved within last 2 hours, offer to resume
        if (timeDiff < 2 * 60 * 60 * 1000) {
          const resume = confirm(
            '🔄 Phát hiện phiên làm bài trước đó.\n\n' +
            `Lần lưu cuối: ${new Date(data.lastSaved).toLocaleString()}\n` +
            'Bạn có muốn tiếp tục từ vị trí đã lưu không?'
          );
          
          if (resume) {
            // Start test and restore data
            startTest();
            setTimeout(() => {
              if (window.TopikQuiz) {
                // Restore answers and marked questions
                Object.keys(data.answers).forEach(questionId => {
                  window.TopikQuiz.selectOption(questionId, data.answers[questionId]);
                });
                
                data.markedQuestions.forEach(questionId => {
                  // Mark questions (would need to implement in TopikQuiz)
                });
              }
            }, 1000);
          } else {
            // Clear saved data
            localStorage.removeItem(`topik_autosave_${test.id}`);
          }
        }
      }
    }
    
    // Keyboard shortcuts
    document.addEventListener('keydown', function(e) {
      if (!testStarted) return;
      
      // Ctrl/Cmd + S to auto-save (prevent default save)
      if ((e.ctrlKey || e.metaKey) && e.key === 's') {
        e.preventDefault();
        // Trigger manual save
        if (window.TopikQuiz) {
          const answers = window.TopikQuiz.getAnswers();
          console.log('Manual save triggered', answers);
        }
      }
      
      // ESC to show navigation
      if (e.key === 'Escape') {
        if (window.TopikQuiz) {
          document.getElementById('navigator-btn')?.click();
        }
      }
    });
    
    // Initialize
    checkPreviousSession();
    
    // Start auto-save when test begins
    document.addEventListener('testStarted', startAutoSave);
    
    // Cleanup on page unload
    window.addEventListener('beforeunload', function() {
      if (autoSaveInterval) {
        clearInterval(autoSaveInterval);
      }
    });
    
    // Visual feedback for test status
    function updateTestStatus() {
      const favicon = document.querySelector('link[rel="icon"]');
      if (testStarted && favicon) {
        // Change favicon to indicate test in progress
        favicon.href = '/favicon-test.ico';
      }
    }
  });
</script> 