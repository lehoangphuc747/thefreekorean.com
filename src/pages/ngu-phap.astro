---
import Layout from '../layouts/Layout.astro';
import GrammarFilter from '../components/grammar/GrammarFilter.astro';
import GrammarGrid from '../components/grammar/GrammarGrid.astro';

// Temporary: Use static list to avoid AstroGlobNoMatch error
const soCap = [];
const trungCap = [];
const caoCap = [];

// Static grammar data for demonstration
const staticGrammarList = [
  {
    slug: 'go-sipda',
    title: '-Í≥† Ïã∂Îã§ (mu·ªën l√†m g√¨)',
    date: '2025-01-15',
    category: 'Ng·ªØ ph√°p',
    subcategory: 'S∆° c·∫•p',
    level: 'Beginner',
    grammarPattern: '-Í≥† Ïã∂Îã§',
    meaning: 'Bi·ªÉu hi·ªán √Ω mu·ªën, mong mu·ªën',
    description: 'C·∫•u tr√∫c ng·ªØ ph√°p ƒë·ªÉ di·ªÖn t·∫£ mong mu·ªën, √Ω ƒë·ªãnh mu·ªën l√†m g√¨ ƒë√≥.',
    type: 'Grammar',
    tags: ['desire', 'want', 'intention'],
    examples: 5,
    exercises: 8,
    difficulty: 2,
    cover: '/images/default-grammar.svg',
    url: '/ngu-phap/demo-grammar'
  },
  {
    slug: 'eumyeonseo',
    title: '-ÏúºÎ©¥ÏÑú (trong khi)',
    date: '2025-01-10',
    category: 'Ng·ªØ ph√°p',
    subcategory: 'S∆° c·∫•p',
    level: 'Beginner',
    grammarPattern: '-ÏúºÎ©¥ÏÑú',
    meaning: 'Di·ªÖn t·∫£ hai h√†nh ƒë·ªông x·∫£y ra ƒë·ªìng th·ªùi',
    description: 'C·∫•u tr√∫c ng·ªØ ph√°p ƒë·ªÉ n·ªëi hai h√†nh ƒë·ªông ho·∫∑c tr·∫°ng th√°i x·∫£y ra c√πng l√∫c.',
    type: 'Grammar',
    tags: ['simultaneous', 'while', 'conjunction'],
    examples: 4,
    exercises: 6,
    difficulty: 3,
    cover: '/images/default-grammar.svg',
    url: '/ngu-phap/demo-grammar'
  }
];

console.log('=== USING STATIC GRAMMAR DATA ===');
console.log('Static grammar found:', staticGrammarList.length);

// Use static grammar list instead of processing files
const grammarList = staticGrammarList
  .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());

// Debug logs
console.log('=== FINAL GRAMMAR RESULTS ===');
console.log('Total grammar found:', grammarList.length);
console.log('Sample grammar:', grammarList[0]);

// Get unique levels v√† subcategories
const levels = [...new Set(grammarList.map(item => item.level))];
const subcategories = [...new Set(grammarList.map(item => item.subcategory))];
const allTags = [...new Set(grammarList.flatMap(item => item.tags))];

// Convert levels to Vietnamese
const levelMapping = {
  'Beginner': 'S∆° c·∫•p',
  'Intermediate': 'Trung c·∫•p', 
  'Advanced': 'Cao c·∫•p'
};
---

<Layout title="Ng·ªØ ph√°p ti·∫øng H√†n">
  <div class="min-h-screen bg-gradient-to-br from-slate-50 via-purple-50 to-slate-100">
    <div class="max-w-7xl mx-auto px-4 py-8">
      
      <!-- Header Section -->
      <header class="text-center mb-12">
        <div class="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-purple-600 to-blue-600 rounded-2xl mb-4">
          <span class="text-2xl">üìö</span>
        </div>
        <h1 class="text-4xl md:text-5xl font-bold text-gray-900 mb-4">
          Ng·ªØ ph√°p ti·∫øng H√†n
        </h1>
        <p class="text-lg text-gray-600 max-w-2xl mx-auto leading-relaxed">
          H·ªçc ng·ªØ ph√°p ti·∫øng H√†n m·ªôt c√°ch c√≥ h·ªá th·ªëng t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao v·ªõi v√≠ d·ª• v√† b√†i t·∫≠p th·ª±c h√†nh
        </p>
        <div class="flex items-center justify-center gap-4 mt-6 text-sm text-gray-500">
          <div class="flex items-center gap-2">
            <div class="w-2 h-2 bg-purple-500 rounded-full"></div>
            <span>{grammarList.length} ng·ªØ ph√°p</span>
          </div>
          <div class="flex items-center gap-2">
            <div class="w-2 h-2 bg-blue-500 rounded-full"></div>
            <span>{levels.length} c·∫•p ƒë·ªô</span>
          </div>
        </div>
      </header>

      <!-- Grammar Filter Section -->
      <GrammarFilter grammarList={grammarList} />

      <!-- Grammar Grid -->
      <GrammarGrid grammarList={grammarList} />
      
    </div>
  </div>
</Layout>