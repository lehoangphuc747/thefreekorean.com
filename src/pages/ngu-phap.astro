---
import Layout from '../layouts/Layout.astro';
import GrammarCard from '../components/grammar/GrammarCard.astro';
import GrammarDashboard from '../components/grammar/GrammarDashboard.astro';
import GrammarNavigation from '../components/grammar/GrammarNavigation.astro';
import GrammarProgress from '../components/grammar/GrammarProgress.astro';
import { grammarRoadmaps } from '../data/grammarRoadmaps.ts';

// L·∫•y t·∫•t c·∫£ files ng·ªØ ph√°p t·ª´ th∆∞ m·ª•c grammar
const grammarFiles = import.meta.glob('../documents/grammar/*.mdx', { eager: true });

// X·ª≠ l√Ω v√† s·∫Øp x·∫øp d·ªØ li·ªáu ng·ªØ ph√°p
const grammars = [];
for (const [path, module] of Object.entries(grammarFiles)) {
  const frontmatter = module.frontmatter || {};
  const filename = path.split('/').pop()?.replace('.mdx', '') || '';
  
  if (frontmatter.title) {
    grammars.push({
      title: frontmatter.title,
      level: frontmatter.level || 'Beginner',
      topikLevel: frontmatter.topikLevel || 'TOPIK I',
      grammarType: frontmatter.grammarType || 'Kh√°c',
      difficulty: frontmatter.difficulty || 1,
      description: frontmatter.description || '',
      cover: frontmatter.cover || '/images/default-grammar.svg',
      slug: frontmatter.slug || filename,
      date: frontmatter.date || frontmatter.publishDate || new Date().toISOString(),
      grammarPattern: frontmatter.grammarPattern || '',
    });
  }
}

grammars.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());

// L·∫•y danh s√°ch levels v√† types ƒë·ªÉ filter
const levels = [...new Set(grammars.map(g => g.level))];
const grammarTypes = [...new Set(grammars.map(g => g.grammarType))];
const difficulties = [...new Set(grammars.map(g => g.difficulty))];

// Group grammars by level for roadmap display
const grammarsByLevel = {
  'Beginner': grammars.filter(g => g.level === 'Beginner'),
  'Intermediate': grammars.filter(g => g.level === 'Intermediate'),
  'Advanced': grammars.filter(g => g.level === 'Advanced')
};

const pageTitle = "Ng·ªØ ph√°p ti·∫øng H√†n";
const pageDescription = "T·ªïng h·ª£p ng·ªØ ph√°p ti·∫øng H√†n t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao v·ªõi v√≠ d·ª• chi ti·∫øt v√† b√†i t·∫≠p th·ª±c h√†nh";
---

<Layout title={pageTitle} description={pageDescription}>
  <!-- Hero Section -->
  <section class="bg-gradient-to-r from-blue-600 to-purple-600 text-white py-16">
    <div class="container mx-auto px-4 text-center">
      <h1 class="text-4xl md:text-5xl font-bold mb-4">
        ÔøΩ Ng·ªØ ph√°p ti·∫øng H√†n
      </h1>
      <p class="text-xl md:text-2xl mb-8 max-w-3xl mx-auto leading-relaxed">
        H·ªçc ng·ªØ ph√°p ti·∫øng H√†n m·ªôt c√°ch c√≥ h·ªá th·ªëng t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao
      </p>
      <div class="flex flex-wrap justify-center items-center gap-4 text-lg">
        <span class="bg-white bg-opacity-20 px-4 py-2 rounded-full">
          üìö {grammars.length} ng·ªØ ph√°p
        </span>
        <span class="bg-white bg-opacity-20 px-4 py-2 rounded-full">
          üéØ T·ª´ s∆° c·∫•p ƒë·∫øn n√¢ng cao
        </span>
        <span class="bg-white bg-opacity-20 px-4 py-2 rounded-full">
          ‚ú® V√≠ d·ª• th·ª±c t·∫ø
        </span>
      </div>
    </div>
  </section>

  <!-- Main Content -->
  <main class="container mx-auto px-4 py-12">
    <!-- View Toggle -->
    <div class="mb-8 flex justify-center">
      <div class="bg-white rounded-lg shadow-md p-1 flex">
        <button 
          id="roadmap-view" 
          class="view-toggle px-6 py-2 rounded-md font-medium transition-colors duration-200 bg-blue-600 text-white"
        >
          üó∫Ô∏è L·ªô tr√¨nh h·ªçc t·∫≠p
        </button>
        <button 
          id="list-view" 
          class="view-toggle px-6 py-2 rounded-md font-medium transition-colors duration-200 text-gray-600 hover:text-gray-800"
        >
          üìã Danh s√°ch to√†n b·ªô
        </button>
      </div>
    </div>

    <!-- Roadmap View -->
    <div id="roadmap-content" class="space-y-8">
      {grammarRoadmaps.map((roadmap) => (
        <div class="bg-white rounded-lg shadow-lg p-6 border-l-4" 
             class:list={[
               roadmap.level === 'Beginner' && 'border-green-500',
               roadmap.level === 'Intermediate' && 'border-yellow-500', 
               roadmap.level === 'Advanced' && 'border-red-500'
             ]}>
          <!-- Roadmap Header -->
          <div class="flex items-center justify-between mb-4">
            <div>
              <h2 class="text-2xl font-bold text-gray-800 mb-2">
                {roadmap.title}
              </h2>
              <p class="text-gray-600 mb-3">
                {roadmap.description}
              </p>
              <div class="flex flex-wrap gap-2">
                <span class="inline-block px-3 py-1 text-sm rounded-full"
                      class:list={[
                        roadmap.level === 'Beginner' && 'bg-green-100 text-green-800',
                        roadmap.level === 'Intermediate' && 'bg-yellow-100 text-yellow-800',
                        roadmap.level === 'Advanced' && 'bg-red-100 text-red-800'
                      ]}>
                  {roadmap.level}
                </span>
                <span class="inline-block px-3 py-1 text-sm bg-gray-100 text-gray-800 rounded-full">
                  ‚è±Ô∏è {roadmap.estimatedTime}
                </span>
                <span class="inline-block px-3 py-1 text-sm bg-blue-100 text-blue-800 rounded-full">
                  üìö {roadmap.grammarPoints.length} ng·ªØ ph√°p
                </span>
              </div>
            </div>
          </div>

          <!-- Grammar Points -->
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {roadmap.grammarPoints.map((point, index) => {
              const matchingGrammar = grammars.find(g => g.slug === point.id);
              return matchingGrammar ? (
                <div class="relative">
                  <div class="absolute -top-2 -left-2 w-6 h-6 bg-blue-600 text-white text-xs rounded-full flex items-center justify-center font-bold z-10">
                    {index + 1}
                  </div>
                  <GrammarCard
                    title={matchingGrammar.title}
                    level={matchingGrammar.level}
                    topikLevel={matchingGrammar.topikLevel}
                    grammarType={matchingGrammar.grammarType}
                    difficulty={matchingGrammar.difficulty}
                    description={matchingGrammar.description}
                    slug={matchingGrammar.slug}
                    cover={matchingGrammar.cover}
                  />
                </div>
              ) : (
                <div class="relative">
                  <div class="absolute -top-2 -left-2 w-6 h-6 bg-gray-400 text-white text-xs rounded-full flex items-center justify-center font-bold z-10">
                    {index + 1}
                  </div>
                  <div class="bg-gray-100 border-2 border-dashed border-gray-300 rounded-lg p-4 h-full flex flex-col justify-center items-center text-center">
                    <div class="text-gray-400 text-4xl mb-2">üöß</div>
                    <h3 class="font-semibold text-gray-600 mb-1">
                      {point.grammarPattern}
                    </h3>
                    <p class="text-sm text-gray-500 mb-2">
                      {point.title}
                    </p>
                    <span class="text-xs bg-gray-200 text-gray-600 px-2 py-1 rounded">
                      S·∫Øp ra m·∫Øt
                    </span>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      ))}
    </div>

    <!-- List View (Original) -->
    <div id="list-content" class="hidden">
      <!-- Filter Section -->
      <div class="mb-8 bg-white rounded-lg shadow-md p-6">
        <h2 class="text-2xl font-semibold mb-4 text-gray-800">üîç L·ªçc ng·ªØ ph√°p</h2>
        
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          <!-- Search Input -->
          <div>
            <label for="search" class="block text-sm font-medium text-gray-700 mb-2">
              T√¨m ki·∫øm
            </label>
            <input 
              type="text" 
              id="search"
              placeholder="Nh·∫≠p t√™n ng·ªØ ph√°p..."
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>

          <!-- Level Filter -->
          <div>
            <label for="level-filter" class="block text-sm font-medium text-gray-700 mb-2">
              C·∫•p ƒë·ªô
            </label>
            <select 
              id="level-filter"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="">T·∫•t c·∫£ c·∫•p ƒë·ªô</option>
              {levels.map(level => (
                <option value={level}>{level}</option>
              ))}
            </select>
          </div>

          <!-- Grammar Type Filter -->
          <div>
            <label for="type-filter" class="block text-sm font-medium text-gray-700 mb-2">
              Lo·∫°i ng·ªØ ph√°p
            </label>
            <select 
              id="type-filter"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="">T·∫•t c·∫£ lo·∫°i</option>
              {grammarTypes.map(type => (
                <option value={type}>{type}</option>
              ))}
            </select>
          </div>

          <!-- Difficulty Filter -->
          <div>
            <label for="difficulty-filter" class="block text-sm font-medium text-gray-700 mb-2">
              ƒê·ªô kh√≥
            </label>
            <select 
              id="difficulty-filter"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="">T·∫•t c·∫£ ƒë·ªô kh√≥</option>
              {difficulties.map(difficulty => (
                <option value={difficulty}>{difficulty}</option>
              ))}
            </select>
          </div>
        </div>

        <!-- Clear Filters Button -->
        <div class="mt-4">
          <button 
            id="clear-filters"
            class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-md transition-colors duration-200"
          >
            üîÑ X√≥a b·ªô l·ªçc
          </button>
        </div>
      </div>

      <!-- Results Summary -->
      <div class="mb-6">
        <p class="text-lg text-gray-600">
          Hi·ªÉn th·ªã <span id="results-count" class="font-semibold text-blue-600">{grammars.length}</span> ng·ªØ ph√°p
        </p>
      </div>

      <!-- Grammar Grid -->
      <div id="grammar-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        {grammars.map((grammar) => (
          <div class="grammar-item" 
               data-title={grammar.title.toLowerCase()}
               data-level={grammar.level}
               data-type={grammar.grammarType}
               data-difficulty={grammar.difficulty}>
            <GrammarCard
              title={grammar.title}
              level={grammar.level}
              topikLevel={grammar.topikLevel}
              grammarType={grammar.grammarType}
              difficulty={grammar.difficulty}
              description={grammar.description}
              slug={grammar.slug}
              cover={grammar.cover}
            />
          </div>
        ))}
      </div>

      <!-- Empty State -->
      <div id="empty-state" class="hidden text-center py-16">
        <div class="text-6xl mb-4">üîç</div>
        <h3 class="text-2xl font-semibold text-gray-600 mb-2">
          Kh√¥ng t√¨m th·∫•y ng·ªØ ph√°p n√†o
        </h3>
        <p class="text-gray-500 mb-6">
          H√£y th·ª≠ ƒëi·ªÅu ch·ªânh b·ªô l·ªçc ho·∫∑c t·ª´ kh√≥a t√¨m ki·∫øm
        </p>
        <button 
          id="reset-search"
          class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg transition-colors duration-200"
        >
          üîÑ ƒê·∫∑t l·∫°i t√¨m ki·∫øm
        </button>
      </div>
    </div>
  </main>
</Layout>

<script>
  // Grammar filtering functionality
  document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('search') as HTMLInputElement;
    const levelFilter = document.getElementById('level-filter') as HTMLSelectElement;
    const typeFilter = document.getElementById('type-filter') as HTMLSelectElement;
    const difficultyFilter = document.getElementById('difficulty-filter') as HTMLSelectElement;
    const clearFiltersBtn = document.getElementById('clear-filters') as HTMLButtonElement;
    const resetSearchBtn = document.getElementById('reset-search') as HTMLButtonElement;
    const grammarItems = document.querySelectorAll('.grammar-item') as NodeListOf<HTMLElement>;
    const resultsCount = document.getElementById('results-count') as HTMLElement;
    const emptyState = document.getElementById('empty-state') as HTMLElement;
    const grammarGrid = document.getElementById('grammar-grid') as HTMLElement;

    // View toggle elements
    const roadmapViewBtn = document.getElementById('roadmap-view') as HTMLButtonElement;
    const listViewBtn = document.getElementById('list-view') as HTMLButtonElement;
    const roadmapContent = document.getElementById('roadmap-content') as HTMLElement;
    const listContent = document.getElementById('list-content') as HTMLElement;

    // View toggle functionality
    function showRoadmapView() {
      roadmapContent.classList.remove('hidden');
      listContent.classList.add('hidden');
      roadmapViewBtn.classList.add('bg-blue-600', 'text-white');
      roadmapViewBtn.classList.remove('text-gray-600', 'hover:text-gray-800');
      listViewBtn.classList.remove('bg-blue-600', 'text-white');
      listViewBtn.classList.add('text-gray-600', 'hover:text-gray-800');
      
      // Update URL
      const params = new URLSearchParams(window.location.search);
      params.set('view', 'roadmap');
      window.history.replaceState(null, '', window.location.pathname + '?' + params.toString());
    }

    function showListView() {
      roadmapContent.classList.add('hidden');
      listContent.classList.remove('hidden');
      listViewBtn.classList.add('bg-blue-600', 'text-white');
      listViewBtn.classList.remove('text-gray-600', 'hover:text-gray-800');
      roadmapViewBtn.classList.remove('bg-blue-600', 'text-white');
      roadmapViewBtn.classList.add('text-gray-600', 'hover:text-gray-800');
      
      // Update URL
      const params = new URLSearchParams(window.location.search);
      params.set('view', 'list');
      window.history.replaceState(null, '', window.location.pathname + '?' + params.toString());
    }

    function filterGrammars() {
      const searchTerm = searchInput.value.toLowerCase().trim();
      const selectedLevel = levelFilter.value;
      const selectedType = typeFilter.value;
      const selectedDifficulty = difficultyFilter.value;

      let visibleCount = 0;

      grammarItems.forEach(item => {
        const title = item.dataset.title || '';
        const level = item.dataset.level || '';
        const type = item.dataset.type || '';
        const difficulty = item.dataset.difficulty || '';

        const matchesSearch = !searchTerm || title.includes(searchTerm);
        const matchesLevel = !selectedLevel || level === selectedLevel;
        const matchesType = !selectedType || type === selectedType;
        const matchesDifficulty = !selectedDifficulty || difficulty === selectedDifficulty;

        if (matchesSearch && matchesLevel && matchesType && matchesDifficulty) {
          item.style.display = 'block';
          visibleCount++;
        } else {
          item.style.display = 'none';
        }
      });

      // Update results count
      resultsCount.textContent = visibleCount.toString();

      // Show/hide empty state
      if (visibleCount === 0) {
        emptyState.classList.remove('hidden');
        grammarGrid.classList.add('hidden');
      } else {
        emptyState.classList.add('hidden');
        grammarGrid.classList.remove('hidden');
      }

      // Update URL params for sharing/bookmarking (only for list view)
      if (!listContent.classList.contains('hidden')) {
        const params = new URLSearchParams();
        params.set('view', 'list');
        if (searchTerm) params.set('search', searchTerm);
        if (selectedLevel) params.set('level', selectedLevel);
        if (selectedType) params.set('type', selectedType);
        if (selectedDifficulty) params.set('difficulty', selectedDifficulty);

        const newUrl = window.location.pathname + (params.toString() ? '?' + params.toString() : '');
        window.history.replaceState(null, '', newUrl);
      }
    }

    function clearFilters() {
      searchInput.value = '';
      levelFilter.value = '';
      typeFilter.value = '';
      difficultyFilter.value = '';
      filterGrammars();
    }

    // Event listeners
    roadmapViewBtn.addEventListener('click', showRoadmapView);
    listViewBtn.addEventListener('click', showListView);
    
    searchInput.addEventListener('input', filterGrammars);
    levelFilter.addEventListener('change', filterGrammars);
    typeFilter.addEventListener('change', filterGrammars);
    difficultyFilter.addEventListener('change', filterGrammars);
    clearFiltersBtn.addEventListener('click', clearFilters);
    resetSearchBtn.addEventListener('click', clearFilters);

    // Load view preference and filters from URL params on page load
    const urlParams = new URLSearchParams(window.location.search);
    const viewMode = urlParams.get('view') || 'roadmap';
    
    if (viewMode === 'list') {
      showListView();
      // Load filter values for list view
      if (urlParams.get('search')) searchInput.value = urlParams.get('search') || '';
      if (urlParams.get('level')) levelFilter.value = urlParams.get('level') || '';
      if (urlParams.get('type')) typeFilter.value = urlParams.get('type') || '';
      if (urlParams.get('difficulty')) difficultyFilter.value = urlParams.get('difficulty') || '';
      filterGrammars();
    } else {
      showRoadmapView();
    }
  });
</script>

<style>
  /* Custom scrollbar for select elements */
  select {
    background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6,9 12,15 18,9'%3e%3c/polyline%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right 8px center;
    background-size: 16px;
    padding-right: 40px;
    appearance: none;
  }

  /* Smooth transitions */
  .grammar-item {
    transition: all 0.3s ease;
  }

  /* Loading state animation */
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
  }

  .grammar-item {
    animation: fadeIn 0.5s ease-out;
  }
</style>