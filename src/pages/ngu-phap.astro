---
import Layout from '../layouts/Layout.astro';
import GrammarFilter from '../components/grammar/GrammarFilter.astro';
import GrammarGrid from '../components/grammar/GrammarGrid.astro';

// Import all grammar files using Vite's glob import
// Exclude dynamic route files using negative patterns
const grammarFiles = import.meta.glob(['./ngu-phap/**/*.astro', '!./ngu-phap/[slug].astro'], { 
  eager: true,
  import: 'postData' 
});

console.log('=== USING VITE GLOB IMPORT ===');
console.log('Grammar files found:', Object.keys(grammarFiles).length);

// Process imported grammar data
const grammarList = Object.entries(grammarFiles)
  .map(([path, postData]) => {
    // Skip if no postData
    if (!postData) {
      return null;
    }
    
    // Extract level from path (so-cap, trung-cap, cao-cap)
    const pathParts = path.split('/');
    const levelFromPath = pathParts[2]; // Should be 'so-cap', 'trung-cap', or 'cao-cap'
    const levelMapping = {
      'so-cap': 'Beginner',
      'trung-cap': 'Intermediate', 
      'cao-cap': 'Advanced'
    };
    
    // Extract filename as slug
    const fileName = pathParts.pop().replace('.astro', '');
    
    return {
      ...postData,
      slug: `${levelFromPath}/${fileName}`, // Include level folder in slug
      level: levelMapping[levelFromPath] || 'Beginner',
      subcategory: levelFromPath === 'so-cap' ? 'S∆° c·∫•p' : 
                   levelFromPath === 'trung-cap' ? 'Trung c·∫•p' : 'Cao c·∫•p',
      date: postData.date || new Date().toISOString().split('T')[0],
      tags: postData.tags || ['grammar'],
      examples: postData.examples || 3,
      exercises: postData.exercises || 5,
      difficulty: postData.difficulty || 2,
      cover: '/images/default-grammar.svg',
      url: path.replace('.astro', '').replace('./', '/')
    };
  })
  .filter(item => item && item.title) // Filter out invalid entries
  .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());

// Debug logs
console.log('=== FINAL GRAMMAR RESULTS ===');
console.log('Total grammar found:', grammarList.length);
console.log('Sample grammar:', grammarList[0]);

// Get unique levels v√† subcategories
const levels = [...new Set(grammarList.map(item => item.level))];
const subcategories = [...new Set(grammarList.map(item => item.subcategory))];
const allTags = [...new Set(grammarList.flatMap(item => item.tags))];

// Convert levels to Vietnamese
const levelMapping = {
  'Beginner': 'S∆° c·∫•p',
  'Intermediate': 'Trung c·∫•p', 
  'Advanced': 'Cao c·∫•p'
};
---

<Layout title="Ng·ªØ ph√°p ti·∫øng H√†n">
  <div class="min-h-screen bg-gradient-to-br from-slate-50 via-purple-50 to-slate-100">
    <div class="max-w-7xl mx-auto px-4 py-8">
      
      <!-- Header Section -->
      <header class="text-center mb-12">
        <div class="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-purple-600 to-blue-600 rounded-2xl mb-4">
          <span class="text-2xl">üìö</span>
        </div>
        <h1 class="text-4xl md:text-5xl font-bold text-gray-900 mb-4">
          Ng·ªØ ph√°p ti·∫øng H√†n
        </h1>
        <p class="text-lg text-gray-600 max-w-2xl mx-auto leading-relaxed">
          H·ªçc ng·ªØ ph√°p ti·∫øng H√†n m·ªôt c√°ch c√≥ h·ªá th·ªëng t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao v·ªõi v√≠ d·ª• v√† b√†i t·∫≠p th·ª±c h√†nh
        </p>
        <div class="flex items-center justify-center gap-4 mt-6 text-sm text-gray-500">
          <div class="flex items-center gap-2">
            <div class="w-2 h-2 bg-purple-500 rounded-full"></div>
            <span>{grammarList.length} ng·ªØ ph√°p</span>
          </div>
          <div class="flex items-center gap-2">
            <div class="w-2 h-2 bg-blue-500 rounded-full"></div>
            <span>{levels.length} c·∫•p ƒë·ªô</span>
          </div>
        </div>
      </header>

      <!-- Grammar Filter Section -->
      <GrammarFilter grammarList={grammarList} />

      <!-- Grammar Grid -->
      <GrammarGrid grammarList={grammarList} />
      
    </div>
  </div>
</Layout>