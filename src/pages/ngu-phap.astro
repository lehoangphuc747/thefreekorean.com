---
import Layout from '../layouts/Layout.astro';

// ƒê·ªçc t·∫•t c·∫£ file MDX t·ª´ th∆∞ m·ª•c documents/grammar
const grammarFiles = import.meta.glob('../documents/grammar/**/*.mdx', { eager: true });

// Transform data cho grammar
const grammarList = Object.entries(grammarFiles)
  .map(([path, file]) => ({
    slug: path.split('/').pop()?.replace('.mdx', '') || '',
    title: file.frontmatter?.title || '',
    date: file.frontmatter?.date || new Date().toISOString(),
    category: file.frontmatter?.category || 'Ng·ªØ ph√°p',
    subcategory: file.frontmatter?.subcategory || 'S∆° c·∫•p',
    level: file.frontmatter?.level || 'Beginner',
    grammarPattern: file.frontmatter?.grammarPattern || '',
    meaning: file.frontmatter?.meaning || '',
    description: file.frontmatter?.description || '',
    type: file.frontmatter?.type || 'Grammar',
    tags: file.frontmatter?.tags || [],
    examples: file.frontmatter?.examples || 0,
    exercises: file.frontmatter?.exercises || 0,
    difficulty: file.frontmatter?.difficulty || 1,
    cover: file.frontmatter?.cover || '/images/grammar-default.jpg',
    content: file.Content
  }))
  .filter(grammar => grammar.title)
  .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());

// Get unique levels v√† subcategories
const levels = [...new Set(grammarList.map(item => item.level))];
const subcategories = [...new Set(grammarList.map(item => item.subcategory))];
const allTags = [...new Set(grammarList.flatMap(item => item.tags))];

// Convert levels to Vietnamese
const levelMapping = {
  'Beginner': 'S∆° c·∫•p',
  'Intermediate': 'Trung c·∫•p', 
  'Advanced': 'Cao c·∫•p'
};
---

<Layout title="Ng·ªØ ph√°p ti·∫øng H√†n">
  <div class="min-h-screen bg-gradient-to-br from-slate-50 via-purple-50 to-slate-100">
    <div class="max-w-7xl mx-auto px-4 py-8">
      
      <!-- Header Section -->
      <header class="text-center mb-12">
        <div class="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-purple-600 to-blue-600 rounded-2xl mb-4">
          <span class="text-2xl">üìö</span>
        </div>
        <h1 class="text-4xl md:text-5xl font-bold text-gray-900 mb-4">
          Ng·ªØ ph√°p ti·∫øng H√†n
        </h1>
        <p class="text-lg text-gray-600 max-w-2xl mx-auto leading-relaxed">
          H·ªçc ng·ªØ ph√°p ti·∫øng H√†n m·ªôt c√°ch c√≥ h·ªá th·ªëng t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao v·ªõi v√≠ d·ª• v√† b√†i t·∫≠p th·ª±c h√†nh
        </p>
        <div class="flex items-center justify-center gap-4 mt-6 text-sm text-gray-500">
          <div class="flex items-center gap-2">
            <div class="w-2 h-2 bg-purple-500 rounded-full"></div>
            <span>{grammarList.length} ng·ªØ ph√°p</span>
          </div>
          <div class="flex items-center gap-2">
            <div class="w-2 h-2 bg-blue-500 rounded-full"></div>
            <span>{levels.length} c·∫•p ƒë·ªô</span>
          </div>
        </div>
      </header>

      <!-- Search v√† Filter Section -->
      <div class="bg-white rounded-xl shadow-lg p-6 mb-8">
        <!-- Search Box -->
        <div class="flex flex-col md:flex-row gap-4 mb-6">
          <div class="flex-1">
            <input 
              type="text" 
              id="search-box"
              placeholder="T√¨m ki·∫øm ng·ªØ ph√°p (VD: -Í∏∞ ÎïåÎ¨∏Ïóê, l√Ω do...)"
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
            />
          </div>
        </div>

        <!-- Level Filter -->
        <div class="flex flex-wrap gap-3 justify-center mb-4">
          <button 
            class="filter-btn px-4 py-2 rounded-lg border-2 border-purple-500 bg-white text-purple-500 font-medium transition-all hover:bg-purple-50"
            data-filter="all"
            data-type="level"
          >
            T·∫•t c·∫£ ({grammarList.length})
          </button>
          {levels.map(level => (
            <button 
              class="filter-btn px-4 py-2 rounded-lg border-2 border-purple-500 text-purple-500 bg-white font-medium transition-all hover:bg-purple-50"
              data-filter={level}
              data-type="level"
            >
              {levelMapping[level] || level} ({grammarList.filter(g => g.level === level).length})
            </button>
          ))}
        </div>

        <!-- Tags Filter -->
        {allTags.length > 0 && (
          <div class="flex flex-wrap gap-2 justify-center">
            {allTags.slice(0, 10).map(tag => (
              <button 
                class="tag-btn px-3 py-1 text-sm rounded-full border border-blue-500 text-blue-500 bg-white hover:bg-blue-50 transition-all"
                data-tag={tag}
              >
                #{tag}
              </button>
            ))}
          </div>
        )}
      </div>

      <!-- Grammar Grid -->
      <div id="grammar-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {grammarList.map(grammar => (
          <div 
            class="grammar-card bg-white rounded-xl shadow-md hover:shadow-lg transition-all duration-300 hover:-translate-y-1 cursor-pointer border border-gray-100"
            data-level={grammar.level}
            data-subcategory={grammar.subcategory}
            data-tags={grammar.tags.join(',')}
            data-pattern={grammar.grammarPattern}
            data-meaning={grammar.meaning}
            data-title={grammar.title}
          >
            <!-- Card Content -->
            <div class="p-6">
              <div class="flex justify-between items-start mb-3">
                <div class="flex-1">
                  <h3 class="text-xl font-bold text-purple-600 mb-1">
                    {grammar.grammarPattern}
                  </h3>
                  <p class="text-gray-600 font-medium">
                    {grammar.meaning}
                  </p>
                </div>
                <div class="flex flex-col gap-1 items-end">
                  <span class={`px-2 py-1 text-xs rounded-full font-medium ${
                    grammar.level === 'Beginner' ? 'bg-green-100 text-green-600' :
                    grammar.level === 'Intermediate' ? 'bg-yellow-100 text-yellow-600' :
                    'bg-red-100 text-red-600'
                  }`}>
                    {levelMapping[grammar.level] || grammar.level}
                  </span>
                  <div class="flex gap-1">
                    {Array.from({length: grammar.difficulty}, (_, i) => (
                      <span class="text-yellow-400 text-sm">‚òÖ</span>
                    ))}
                  </div>
                </div>
              </div>

              <p class="text-gray-600 text-sm mb-4 line-clamp-2">
                {grammar.description}
              </p>

              <!-- Stats -->
              <div class="flex gap-4 text-sm text-gray-500 mb-4">
                <span class="flex items-center gap-1">
                  üí° {grammar.examples} v√≠ d·ª•
                </span>
                <span class="flex items-center gap-1">
                  üìù {grammar.exercises} b√†i t·∫≠p
                </span>
              </div>

              <!-- Tags -->
              <div class="flex flex-wrap gap-1">
                {grammar.tags.slice(0, 3).map(tag => (
                  <span class="px-2 py-1 text-xs bg-blue-100 text-blue-600 rounded-full">
                    #{tag}
                  </span>
                ))}
              </div>
            </div>
          </div>
        ))}
      </div>

      <!-- Empty State -->
      <div id="empty-state" class="hidden text-center py-12">
        <div class="text-6xl mb-4">üîç</div>
        <h3 class="text-xl font-medium text-gray-600 mb-2">Kh√¥ng t√¨m th·∫•y ng·ªØ ph√°p n√†o</h3>
        <p class="text-gray-500">H√£y th·ª≠ t√¨m ki·∫øm v·ªõi t·ª´ kh√≥a kh√°c ho·∫∑c b·ªè b·ªõt b·ªô l·ªçc.</p>
      </div>
    </div>
  </div>
</Layout>

<script>
  // Filter functionality
  document.addEventListener('DOMContentLoaded', function() {
    const grammarCards = document.querySelectorAll('.grammar-card') as NodeListOf<HTMLElement>;
    const filterBtns = document.querySelectorAll('.filter-btn') as NodeListOf<HTMLElement>;
    const tagBtns = document.querySelectorAll('.tag-btn') as NodeListOf<HTMLElement>;
    const searchBox = document.getElementById('search-box') as HTMLInputElement;
    const emptyState = document.getElementById('empty-state');

    let activeLevel = 'all';
    let activeTag = '';
    let searchTerm = '';

    function filterGrammar() {
      let visibleCount = 0;

      grammarCards.forEach(card => {
        const cardLevel = card.getAttribute('data-level') || '';
        const cardTags = card.getAttribute('data-tags') || '';
        const cardPattern = card.getAttribute('data-pattern') || '';
        const cardMeaning = card.getAttribute('data-meaning') || '';
        const cardTitle = card.getAttribute('data-title') || '';

        let show = true;

        // Filter by level
        if (activeLevel !== 'all' && cardLevel !== activeLevel) {
          show = false;
        }

        // Filter by tag
        if (activeTag && !cardTags.includes(activeTag)) {
          show = false;
        }

        // Filter by search
        if (searchTerm) {
          const searchLower = searchTerm.toLowerCase();
          const matchPattern = cardPattern.toLowerCase().includes(searchLower);
          const matchMeaning = cardMeaning.toLowerCase().includes(searchLower);
          const matchTitle = cardTitle.toLowerCase().includes(searchLower);
          
          if (!matchPattern && !matchMeaning && !matchTitle) {
            show = false;
          }
        }

        if (show) {
          card.style.display = 'block';
          visibleCount++;
        } else {
          card.style.display = 'none';
        }
      });

      // Show/hide empty state
      if (emptyState) {
        emptyState.style.display = visibleCount === 0 ? 'block' : 'none';
      }
    }

    function updateFilterButtons() {
      filterBtns.forEach(btn => {
        const filter = btn.getAttribute('data-filter') || 'all';
        if (filter === activeLevel) {
          btn.classList.add('bg-purple-500', 'text-white');
          btn.classList.remove('bg-white', 'text-purple-500');
        } else {
          btn.classList.remove('bg-purple-500', 'text-white');
          btn.classList.add('bg-white', 'text-purple-500');
        }
      });
    }

    function updateTagButtons() {
      tagBtns.forEach(btn => {
        const tag = btn.getAttribute('data-tag') || '';
        if (tag === activeTag) {
          btn.classList.add('bg-blue-500', 'text-white');
          btn.classList.remove('bg-white', 'text-blue-500');
        } else {
          btn.classList.remove('bg-blue-500', 'text-white');
          btn.classList.add('bg-white', 'text-blue-500');
        }
      });
    }

    // Level filter
    filterBtns.forEach(btn => {
      btn.addEventListener('click', function(this: HTMLElement) {
        activeLevel = this.getAttribute('data-filter') || 'all';
        updateFilterButtons();
        filterGrammar();
      });
    });

    // Tag filter
    tagBtns.forEach(btn => {
      btn.addEventListener('click', function(this: HTMLElement) {
        const tag = this.getAttribute('data-tag') || '';
        activeTag = activeTag === tag ? '' : tag;
        updateTagButtons();
        filterGrammar();
      });
    });

    // Search
    if (searchBox) {
      searchBox.addEventListener('input', function() {
        searchTerm = this.value;
        filterGrammar();
      });
    }

    // Card click handler
    grammarCards.forEach(card => {
      card.addEventListener('click', function() {
        // Extract slug from card data or generate from title
        const pattern = this.getAttribute('data-pattern') || '';
        const slug = pattern.replace(/[^a-zA-Z0-9-]/g, '').toLowerCase() || 'unknown';
        window.location.href = `/grammar/${slug}`;
      });
    });

    // Initialize
    updateFilterButtons();
    filterGrammar();
  });
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style> 