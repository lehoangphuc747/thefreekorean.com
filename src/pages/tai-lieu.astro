---
import Layout from '../layouts/Layout.astro';
import DocumentFilter from '../components/tai-lieu/DocumentFilter.astro';
import DocumentGrid from '../components/tai-lieu/DocumentGrid.astro';

// Get all .astro files using import.meta.glob() (new syntax)
const ankiSummaryModule = import.meta.glob('./tai-lieu/anki/books/tieng-han-tong-hop/*.astro', { eager: true });
const textbookFilesModule = import.meta.glob('./tai-lieu/textbooks/*.astro', { eager: true });

// Convert module objects to array format compatible with old Astro.glob
const ankiSummaryFiles = Object.entries(ankiSummaryModule).map(([path, module]) => ({
  ...module,
  url: path.replace('./tai-lieu', '/tai-lieu').replace('.astro', ''),
  file: path
}));

const textbookFiles = Object.entries(textbookFilesModule).map(([path, module]) => ({
  ...module,
  url: path.replace('./tai-lieu', '/tai-lieu').replace('.astro', ''),
  file: path
}));

console.log('=== DEBUG ASTRO.GLOB ===');
console.log('Anki Summary files found:', ankiSummaryFiles.length);
console.log('Textbook files found:', textbookFiles.length);

// Sample debug for first file
if (ankiSummaryFiles.length > 0) {
  const sample = ankiSummaryFiles[0];
  console.log('Sample Anki Summary file keys:', Object.keys(sample));
  console.log('Sample frontmatter:', sample.frontmatter);
  console.log('Sample default export:', sample.default);
}

// Debug textbook files structure
if (textbookFiles.length > 0) {
  const sample = textbookFiles[0];
  console.log('Sample Textbook file keys:', Object.keys(sample));
  console.log('Sample textbook frontmatter:', sample.frontmatter);
  console.log('Sample textbook default export:', sample.default);
  console.log('Sample textbook postData:', sample.postData);
  console.log('Sample textbook full structure:', sample);
}

// Helper function to process import.meta.glob results
function processDocuments(files: any[], defaultCategory: string) {
  return files
    .map((file) => {
      try {
        // Get data from the module (import.meta.glob structure)
        const frontmatter = file.frontmatter || {};
        // For "export const postData", it's available directly on the module
        const exports = file.postData || file.default?.postData;
        const data = exports || frontmatter;
        
        // Get file path and URL
        const url = file.url || '';
        const slug = url.split('/').pop() || '';
        
        console.log('Processing file:', slug, 'frontmatter:', frontmatter);
        console.log('Exports available:', !!exports, 'postData:', exports);
        console.log('File keys:', Object.keys(file));
        console.log('Final data:', data);
        
        // Skip if no title or if draft
        if (!data.title || data.draft || slug.includes('index')) {
          console.log('Skipped:', slug, 'hasTitle:', !!data.title, 'isDraft:', !!data.draft);
          return null;
        }
        
        const document = {
          slug,
          title: data.title,
          date: data.date || new Date().toISOString(),
          category: data.category || defaultCategory,
          subcategory: data.subcategory || '',
          type: data.type || (defaultCategory === 'Anki' ? 'Anki Deck' : 'PDF'),
          description: data.description || '',
          fileSize: data.fileSize,
          pages: data.pages,
          cards: data.cards,
          downloadUrl: data.downloadUrl,
          cover: data.cover,
          url: url,
          draft: data.draft
        };
        
        console.log('Created document:', document);
        return document;
        
      } catch (error) {
        console.error('Error processing file:', file.url, error);
        return null;
      }
    })
    .filter(Boolean); // Remove null entries
}

// Process documents
const ankiSummaryDocuments = processDocuments(ankiSummaryFiles, 'Anki');
const textbookDocuments = processDocuments(textbookFiles, 'Giáo trình');

// Combine all documents
const allDocuments = [...ankiSummaryDocuments, ...textbookDocuments]
  .filter(Boolean)
  .sort((a, b) => new Date(b?.date || 0).getTime() - new Date(a?.date || 0).getTime());

// Debug logs
console.log('=== FINAL RESULTS ===');
console.log('Anki Summary documents found:', ankiSummaryDocuments.length);
console.log('Textbook documents found:', textbookDocuments.length);
console.log('Sample Anki Summary document:', ankiSummaryDocuments[0]);
console.log('Sample textbook document:', textbookDocuments[0]);

// Get unique categories
const categories = [...new Set(allDocuments.map(doc => doc?.category).filter(Boolean))];
---

<Layout title="Tài liệu học tiếng Hàn">
  <div class="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-slate-100">
    <div class="max-w-7xl mx-auto px-4 py-8">
      
      <!-- Header Section -->
      <header class="text-center mb-12">
        <h1 class="text-4xl md:text-5xl font-bold text-gray-900 mb-4">
          Tài liệu học tiếng Hàn
        </h1>
        <p class="text-lg text-gray-600 max-w-2xl mx-auto leading-relaxed">
          Bộ sưu tập tài liệu học tiếng Hàn miễn phí, chất lượng cao dành cho mọi trình độ
        </p>
        <div class="flex items-center justify-center gap-4 mt-6 text-sm text-gray-500">
          <div class="flex items-center gap-2">
            <div class="w-2 h-2 bg-blue-500 rounded-full"></div>
            <span>{allDocuments.length} tài liệu</span>
          </div>
          <div class="flex items-center gap-2">
            <div class="w-2 h-2 bg-purple-500 rounded-full"></div>
            <span>{categories.length} danh mục</span>
          </div>
        </div>
      </header>

      <!-- Filter Section -->
      <DocumentFilter documents={allDocuments} />

      <!-- Documents Grid -->
      <DocumentGrid documents={allDocuments} />
      
    </div>
  </div>
</Layout>

<style>
  /* Custom styles for the documents page */
  .documents-grid {
    animation: fadeIn 0.5s ease-in-out;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>
