---
import Layout from '../../layouts/Layout.astro';
import ExampleSection from '../../components/grammar/ExampleSection.astro';
import PracticeSection from '../../components/grammar/PracticeSection.astro';
import PronunciationGuide from '../../components/grammar/PronunciationGuide.astro';
import AnkiDownloadSection from '../../components/grammar/AnkiDownloadSection.astro';
import { getCollection } from 'astro:content';

// Generate static paths for all grammar documents
export async function getStaticPaths() {
  try {
    // Get all MDX files from the documents/grammar directory
    const grammarFiles = await import.meta.glob('../../documents/grammar/*.mdx');
    
    const paths = [];
    
    for (const [path, resolver] of Object.entries(grammarFiles)) {
      const module = await resolver();
      const frontmatter = module.frontmatter || {};
      
      // Extract slug from filename
      const filename = path.split('/').pop()?.replace('.mdx', '') || '';
      const slug = frontmatter.slug || filename;
      
      // Ensure we have required frontmatter
      if (frontmatter.title && frontmatter.level) {
        paths.push({
          params: { slug },
          props: {
            Content: module.default,
            frontmatter: {
              title: frontmatter.title || 'Ng·ªØ ph√°p ti·∫øng H√†n',
              level: frontmatter.level || 'Beginner',
              topikLevel: frontmatter.topikLevel || 'TOPIK I',
              grammarType: frontmatter.grammarType || 'Kh√°c',
              difficulty: frontmatter.difficulty || 1,
              description: frontmatter.description || '',
              pattern: frontmatter.pattern || '',
              meaning: frontmatter.meaning || '',
              usage: frontmatter.usage || '',
              structure: frontmatter.structure || '',
              examples: frontmatter.examples || [],
              relatedGrammar: frontmatter.relatedGrammar || [],
              exercises: frontmatter.exercises || [],
              notes: frontmatter.notes || [],
              author: frontmatter.author || 'The Free Korean',
              publishDate: frontmatter.publishDate || new Date().toISOString().split('T')[0],
              updateDate: frontmatter.updateDate || new Date().toISOString().split('T')[0],
              tags: frontmatter.tags || [],
              cover: frontmatter.cover || '/images/default-grammar.jpg'
            }
          }
        });
      }
    }
    
    return paths;
  } catch (error) {
    console.error('Error generating static paths:', error);
    return [];
  }
}

const { slug } = Astro.params;
const { Content, frontmatter } = Astro.props;

// SEO metadata
const pageTitle = `${frontmatter.title} | Ng·ªØ ph√°p ti·∫øng H√†n - The Free Korean`;
const pageDescription = frontmatter.description || `H·ªçc ng·ªØ ph√°p ti·∫øng H√†n: ${frontmatter.title}. ${frontmatter.meaning || ''}`;

// Generate breadcrumb
const breadcrumb = [
  { name: 'Trang ch·ªß', url: '/' },
  { name: 'Ng·ªØ ph√°p', url: '/ngu-phap' },
  { name: frontmatter.title, url: `/ngu-phap/${slug}` }
];

// Level badge styles
const getLevelBadgeClass = (level: string) => {
  switch (level) {
    case 'Beginner': return 'bg-green-100 text-green-800 border-green-200';
    case 'Intermediate': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
    case 'Advanced': return 'bg-red-100 text-red-800 border-red-200';
    default: return 'bg-gray-100 text-gray-800 border-gray-200';
  }
};

// Difficulty stars
const getDifficultyStars = (difficulty: number) => {
  return Array.from({ length: 5 }, (_, i) => i < difficulty ? '‚òÖ' : '‚òÜ').join('');
};

// Navigation helper - get prev/next grammar
const getAllGrammarSlugs = async () => {
  try {
    const grammarFiles = await import.meta.glob('../../documents/grammar/*.mdx');
    const slugs = [];
    
    for (const [path, resolver] of Object.entries(grammarFiles)) {
      const module = await resolver();
      const frontmatter = module.frontmatter || {};
      const filename = path.split('/').pop()?.replace('.mdx', '') || '';
      const slug = frontmatter.slug || filename;
      
      if (frontmatter.title) {
        slugs.push({
          slug,
          title: frontmatter.title,
          level: frontmatter.level || 'Beginner'
        });
      }
    }
    
    return slugs.sort((a, b) => a.title.localeCompare(b.title));
  } catch (error) {
    return [];
  }
};

const allGrammarSlugs = await getAllGrammarSlugs();
const currentIndex = allGrammarSlugs.findIndex(g => g.slug === slug);
const prevGrammar = currentIndex > 0 ? allGrammarSlugs[currentIndex - 1] : null;
const nextGrammar = currentIndex < allGrammarSlugs.length - 1 ? allGrammarSlugs[currentIndex + 1] : null;
---

<Layout title={pageTitle} description={pageDescription}>
  <!-- Breadcrumb -->
  <nav class="bg-gray-50 border-b border-gray-200">
    <div class="container mx-auto px-4 py-3">
      <ol class="flex items-center space-x-2 text-sm">
        {breadcrumb.map((item, index) => (
          <li class="flex items-center">
            {index > 0 && <span class="mx-2 text-gray-400">/</span>}
            {index < breadcrumb.length - 1 ? (
              <a href={item.url} class="text-blue-600 hover:text-blue-800 hover:underline">
                {item.name}
              </a>
            ) : (
              <span class="text-gray-600 font-medium">{item.name}</span>
            )}
          </li>
        ))}
      </ol>
    </div>
  </nav>

  <!-- Grammar Header -->
  <header class="bg-white border-b border-gray-200">
    <div class="container mx-auto px-4 py-8">
      <div class="max-w-4xl mx-auto">
        <!-- Title and Meta -->
        <div class="mb-6">
          <h1 class="text-3xl md:text-4xl font-bold text-gray-900 mb-3">
            {frontmatter.title}
          </h1>
          
          {frontmatter.pattern && (
            <div class="text-2xl font-mono text-blue-600 mb-3 bg-blue-50 px-4 py-2 rounded-lg inline-block">
              {frontmatter.pattern}
            </div>
          )}
          
          {frontmatter.meaning && (
            <p class="text-lg text-gray-600 mb-4">
              <span class="font-medium">√ù nghƒ©a:</span> {frontmatter.meaning}
            </p>
          )}
          
          {frontmatter.description && (
            <p class="text-gray-600 leading-relaxed">
              {frontmatter.description}
            </p>
          )}
        </div>

        <!-- Meta Information -->
        <div class="flex flex-wrap gap-4 items-center text-sm">
          <!-- Level Badge -->
          <span class={`px-3 py-1 rounded-full border font-medium ${getLevelBadgeClass(frontmatter.level)}`}>
            üìö {frontmatter.level === 'Beginner' ? 'S∆° c·∫•p' : frontmatter.level === 'Intermediate' ? 'Trung c·∫•p' : 'Cao c·∫•p'}
          </span>
          
          <!-- TOPIK Level -->
          {frontmatter.topikLevel && (
            <span class="px-3 py-1 bg-purple-100 text-purple-800 rounded-full border border-purple-200 font-medium">
              üéØ {frontmatter.topikLevel}
            </span>
          )}
          
          <!-- Grammar Type -->
          {frontmatter.grammarType && (
            <span class="px-3 py-1 bg-indigo-100 text-indigo-800 rounded-full border border-indigo-200 font-medium">
              üìù {frontmatter.grammarType}
            </span>
          )}
          
          <!-- Difficulty -->
          <span class="px-3 py-1 bg-orange-100 text-orange-800 rounded-full border border-orange-200 font-medium">
            ‚≠ê {getDifficultyStars(frontmatter.difficulty)}
          </span>
          
          <!-- Update Date -->
          {frontmatter.updateDate && (
            <span class="text-gray-500">
              üìÖ C·∫≠p nh·∫≠t: {new Date(frontmatter.updateDate).toLocaleDateString('vi-VN')}
            </span>
          )}
        </div>

        <!-- Tags -->
        {frontmatter.tags && frontmatter.tags.length > 0 && (
          <div class="mt-4 flex flex-wrap gap-2">
            {frontmatter.tags.map((tag: string) => (
              <span class="px-2 py-1 bg-gray-100 text-gray-700 rounded-md text-sm hover:bg-gray-200 transition-colors">
                #{tag}
              </span>
            ))}
          </div>
        )}
      </div>
    </div>
  </header>

  <!-- Main Content -->
  <main class="container mx-auto px-4 py-8">
    <div class="max-w-4xl mx-auto">
      <!-- Grammar Content -->
      <article class="prose prose-lg max-w-none">
        <Content />
      </article>

      <!-- Anki Download Section -->
      <AnkiDownloadSection grammarPattern={frontmatter.pattern} />

      <!-- Related Grammar -->
      {frontmatter.relatedGrammar && frontmatter.relatedGrammar.length > 0 && (
        <section class="mt-12 p-6 bg-blue-50 rounded-lg border border-blue-200">
          <h3 class="text-xl font-semibold text-blue-800 mb-4 flex items-center">
            üîó Ng·ªØ ph√°p li√™n quan
          </h3>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
            {frontmatter.relatedGrammar.map((related: any) => (
              <a 
                href={`/ngu-phap/${related.slug}`}
                class="p-3 bg-white rounded-md border border-blue-200 hover:shadow-md transition-shadow"
              >
                <div class="font-medium text-blue-600">{related.title}</div>
                {related.description && (
                  <div class="text-sm text-gray-600 mt-1">{related.description}</div>
                )}
              </a>
            ))}
          </div>
        </section>
      )}

      <!-- Navigation -->
      {(prevGrammar || nextGrammar) && (
        <nav class="mt-12 flex justify-between items-center border-t border-gray-200 pt-8">
          <div class="flex-1">
            {prevGrammar && (
              <a 
                href={`/ngu-phap/${prevGrammar.slug}`}
                class="group flex items-center text-blue-600 hover:text-blue-800"
              >
                <span class="mr-2 text-xl group-hover:-translate-x-1 transition-transform">‚Üê</span>
                <div>
                  <div class="text-sm text-gray-500">Tr∆∞·ªõc ƒë√≥</div>
                  <div class="font-medium">{prevGrammar.title}</div>
                </div>
              </a>
            )}
          </div>

          <!-- Back to list -->
          <div class="flex-shrink-0 mx-8">
            <a 
              href="/ngu-phap"
              class="px-6 py-3 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg transition-colors font-medium"
            >
              üìö Danh s√°ch ng·ªØ ph√°p
            </a>
          </div>

          <div class="flex-1 text-right">
            {nextGrammar && (
              <a 
                href={`/ngu-phap/${nextGrammar.slug}`}
                class="group flex items-center justify-end text-blue-600 hover:text-blue-800"
              >
                <div class="text-right">
                  <div class="text-sm text-gray-500">Ti·∫øp theo</div>
                  <div class="font-medium">{nextGrammar.title}</div>
                </div>
                <span class="ml-2 text-xl group-hover:translate-x-1 transition-transform">‚Üí</span>
              </a>
            )}
          </div>
        </nav>
      )}

      <!-- Back to top -->
      <div class="mt-8 text-center">
        <button 
          onclick="window.scrollTo({top: 0, behavior: 'smooth'})"
          class="inline-flex items-center px-4 py-2 text-blue-600 hover:text-blue-800 hover:bg-blue-50 rounded-lg transition-colors"
        >
          <span class="mr-1">‚Üë</span>
          L√™n ƒë·∫ßu trang
        </button>
      </div>
    </div>
  </main>
</Layout>

<style>
  /* Enhanced prose styles for grammar content */
  .prose {
    color: #374151;
    line-height: 1.75;
  }

  .prose h1 { 
    font-size: 1.875rem; 
    font-weight: 700; 
    color: #111827; 
    margin-top: 2rem; 
    margin-bottom: 1rem; 
  }
  
  .prose h2 { 
    font-size: 1.5rem; 
    font-weight: 600; 
    color: #1f2937; 
    margin-top: 2rem; 
    margin-bottom: 1rem; 
    border-bottom: 1px solid #e5e7eb; 
    padding-bottom: 0.5rem; 
  }
  
  .prose h3 { 
    font-size: 1.25rem; 
    font-weight: 600; 
    color: #1f2937; 
    margin-top: 1.5rem; 
    margin-bottom: 0.75rem; 
  }
  
  .prose h4 { 
    font-size: 1.125rem; 
    font-weight: 600; 
    color: #1f2937; 
    margin-top: 1rem; 
    margin-bottom: 0.5rem; 
  }

  .prose p { 
    margin-bottom: 1rem; 
    line-height: 1.75; 
  }
  
  .prose ul { 
    margin-bottom: 1rem; 
    padding-left: 1.5rem; 
  }
  
  .prose ol { 
    margin-bottom: 1rem; 
    padding-left: 1.5rem; 
  }
  
  .prose li { 
    margin-bottom: 0.5rem; 
  }

  .prose blockquote {
    border-left: 4px solid #3b82f6;
    background-color: #eff6ff;
    padding-left: 1rem;
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
    margin: 1rem 0;
    font-style: italic;
  }

  .prose code {
    background-color: #f3f4f6;
    padding: 0.125rem 0.5rem;
    border-radius: 0.25rem;
    font-size: 0.875rem;
    font-family: ui-monospace, SFMono-Regular, monospace;
  }

  .prose pre {
    background-color: #111827;
    color: white;
    padding: 1rem;
    border-radius: 0.5rem;
    overflow-x: auto;
    margin: 1rem 0;
  }

  .prose table {
    width: 100%;
    border-collapse: collapse;
    border: 1px solid #d1d5db;
    margin: 1rem 0;
  }

  .prose th {
    background-color: #f3f4f6;
    border: 1px solid #d1d5db;
    padding: 0.75rem 1rem;
    font-weight: 600;
    text-align: left;
  }

  .prose td {
    border: 1px solid #d1d5db;
    padding: 0.75rem 1rem;
  }

  /* Custom styles for Korean examples */
  .korean-example {
    background-color: #fefce8;
    border-left: 4px solid #eab308;
    padding: 1rem;
    margin: 1rem 0;
  }

  .grammar-pattern {
    font-family: ui-monospace, SFMono-Regular, monospace;
    color: #2563eb;
    background-color: #eff6ff;
    padding: 0.125rem 0.5rem;
    border-radius: 0.25rem;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .prose {
      font-size: 16px;
    }
    
    .prose h1 { font-size: 1.5rem; }
    .prose h2 { font-size: 1.25rem; }
    .prose h3 { font-size: 1.125rem; }
  }
</style>

<script>
  // Add copy functionality to code blocks
  document.addEventListener('DOMContentLoaded', function() {
    const codeBlocks = document.querySelectorAll('pre code');
    
    codeBlocks.forEach(block => {
      const button = document.createElement('button');
      button.textContent = 'üìã Copy';
      button.className = 'absolute top-2 right-2 px-2 py-1 bg-gray-700 text-white text-sm rounded hover:bg-gray-600 transition-colors';
      
      block.parentElement.style.position = 'relative';
      block.parentElement.appendChild(button);
      
      button.addEventListener('click', async () => {
        try {
          await navigator.clipboard.writeText(block.textContent);
          button.textContent = '‚úÖ Copied!';
          setTimeout(() => {
            button.textContent = 'üìã Copy';
          }, 2000);
        } catch (err) {
          console.error('Failed to copy text: ', err);
        }
      });
    });
  });
</script>
